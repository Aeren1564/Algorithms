<snippet>
	<content><![CDATA[
template<class B, class T>
struct fenwick_tree_2d_sparse_sum{
	vector<B> X;
	vector<vector<array<B, 2>>> Y;
	vector<vector<T>> data;
	// O(n * log^2(n))
	fenwick_tree_2d_sparse_sum(vector<pair<array<B, 2>, T>> init): X(init.size()){
		sort(init.begin(), init.end());
		for(auto i = 0; i < (int)init.size(); ++ i) X[i] = init[i].first[0];
		sort(X.begin(), X.end());
		X.erase(unique(X.begin(), X.end()), X.end());
		int n = (int)X.size();
		Y.resize(n);
		data.resize(n);
		vector<vector<pair<array<B, 2>, T>>> hold(n);
		for(auto i = 0, x = 0; i < (int)init.size(); ++ i){
			auto [pos, val] = init[i];
			while(X[x] < pos[0]) ++ x;
			hold[x].push_back({{pos[1], pos[0]}, val});
		}
		for(auto x = 1; x <= n; ++ x) if(x + (x & -x) <= n){
			auto &hold0 = hold[x + (x & -x) - 1];
			auto &hold1 = hold[x - 1];
			int size = (int)hold0.size();
			hold0.insert(hold0.end(), hold1.begin(), hold1.end());
		}
		for(auto x = 0; x < n; ++ x){
			auto &Y0 = Y[x];
			auto &hold0 = hold[x];
			auto &data0 = data[x];
			sort(hold0.begin(), hold0.end());
			Y0.resize(hold0.size());
			for(auto j = 0; j < (int)hold0.size(); ++ j) Y0[j] = hold0[j].first;
			Y0.erase(unique(Y0.begin(), Y0.end()), Y0.end());
			data0.resize(Y0.size());
			for(auto j = 0, y = 0; j < (int)hold0.size(); ++ j){
				while(Y0[y] < hold0[j].first) ++ y;
				data0[y] += hold0[j].second;
			}
			int m = (int)data0.size();
			for(auto y = 1; y <= m; ++ y) if(y + (y & -y) <= m) data0[y + (y & -y) - 1] += data0[y - 1];
		}
	}
	// O(log^2(n))
	void update(B _p, B _q, T x){
		int p = lower_bound(X.begin(), X.end(), _p) - X.begin();
		assert(p < (int)X.size() && X[p] == _p);
		for(auto i = p + 1; i <= (int)X.size(); i += i & -i){
			auto &Y0 = Y[i - 1];
			auto &data0 = data[i - 1];
			int q = lower_bound(Y0.begin(), Y0.end(), array{_q, _p}) - Y0.begin();
			assert(q < (int)Y0.size() && Y0[q][0] == _q && Y0[q][1] == _p);
			for(auto j = q + 1; j <= (int)data0.size(); j += j & -j) data0[j - 1] += x;
		}
	}
	// O(log^2(n))
	T prefix(B _xr, B _yr) const{
		int xr = lower_bound(X.begin(), X.end(), _xr) - X.begin();
		T res = 0;
		for(auto i = xr; i > 0; i -= i & -i){
			auto &Y0 = Y[i - 1];
			auto &data0 = data[i - 1];
			int yr = lower_bound(Y0.begin(), Y0.end(), array{_yr, numeric_limits<B>::min()}) - Y0.begin();
			for(auto j = yr; j > 0; j -= j & -j) res += data0[j - 1];
		}
		return res;
	}
	// O(log^2(n))
	T query(B _xl, B _xr, B _yl, B _yr) const{
		return prefix(_xr, _yr) - prefix(_xl, _yr) - prefix(_xr, _yl) + prefix(_xl, _yl);
	}
	// O(log^2(n))
	T query(B _x, B _y) const{
		return prefix(_x + 1, _y + 1) - prefix(_x + 1, _y) - prefix(_x, _y + 1) + prefix(_x, _y);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fenwick_tree_2d_sparse_sum</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
