<snippet>
	<content><![CDATA[
// For a commutative data structure supporting update, where each update has an associated priority,
// support deletion of update with lowest priority online.
// Assumes that no two priorities are equal at any moment.
// Source: https://codeforces.com/blog/entry/111117
template<class P, class I, class S, class R, class Compare = less<>>
struct data_structure_priority_queue_like_deletion_enabler_online{
	int n; // Elements should lie in range [0, n).
	I insert; // insert(i): insert the i-th update.
	S state; // state(): return the state of the DS as an integer.
	R reverse_to; // reverse_to(s): reverse the state of the DS to s.
	vector<int> stack, log;
	map<P, int, Compare> order;
	data_structure_priority_queue_like_deletion_enabler_online(int n, P _type_deducer, I insert, S state, R reverse_to, Compare cmp = less<>()): n(n), was(n), insert(insert), state(state), reverse_to(reverse_to), log({state()}), order(cmp){
		assert(n >= 0);
	}
	void clear(){
		stack.clear();
		log.resize(1);
		reverse_to(log.back());
		order.clear();
	}
	int iter = 0;
	vector<int> was, popped, top;
	// Amortized O(log(qn)) insert() and state() calls, and O(1) reverse_to() calls.
	int pop(){
		assert(!stack.empty());
		++ iter;
		int qn = (int)stack.size(), ipop = -1;
		auto it = order.begin();
		for(auto pick = 1, cnt = 0; ; ++ pick){
			assert(pick <= qn);
			int i = stack.back();
			stack.pop_back();
			popped.push_back(i);
			was[i] = iter;
			while(it != order.end() && was[it->second] == iter) ++ it, ++ cnt;
			if(2 * cnt < pick) continue;
			log.resize((int)stack.size() + 1);
			reverse_to(log.back());
			++ iter;
			it = order.begin();
			for(auto rep = pick + 1 >> 1; rep; -- rep, ++ it){
				int i = it->second;
				top.push_back(i);
				was[i] = iter;
			}
			ipop = order.begin()->second;
			order.erase(order.begin());
			top.erase(top.begin());
			while(!popped.empty()){
				int i = popped.back();
				popped.pop_back();
				if(was[i] == iter) continue;
				stack.push_back(i);
				insert(i);
				log.push_back(state());
			}
			while(!top.empty()){
				int i = top.back();
				top.pop_back();
				stack.push_back(i);
				insert(i);
				log.push_back(state());
			}
			break;
		}
		assert(~ipop);
		return ipop;
	}
	void push(int i, const P &p){
		assert(0 <= i && i < n);
		stack.push_back(i);
		assert(order.insert({p, i}).second);
		insert(i);
		log.push_back(state());
	}
	friend ostream &operator<<(ostream &out, const data_structure_priority_queue_like_deletion_enabler_online &enabler){
		out << "{";
		for(auto i = 0; i < (int)enabler.stack.size(); ++ i){
			out << enabler.stack[i];
			if(i < (int)enabler.stack.size() - 1) out << ", ";
		}
		return out << "}";
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>data_structure_priority_queue_like_deletion_enabler_online</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
