<snippet>
	<content><![CDATA[
template<class T, bool PRECALC_INVERSE, bool HAS_NONTRIVIAL_DEG, bool HAS_NONTRIVIAL_BASE>
struct range_choose_sum_tracker{
	int n, deg, th;
	T base, inv_base;
	vector<vector<T>> power;
	vector<T> base_power;
	// Every number from 1 to n along with base + 1 must be invertible.
	// O((n + deg) * deg)
	range_choose_sum_tracker(int n, T base, int deg){
		assert(n >= 0 && deg >= 0);
		this->n = n;
		this->deg = deg;
		this->base = base;
		th = max(n, deg);
		value = vector<T>(deg + 1);
		if constexpr(HAS_NONTRIVIAL_DEG) power = vector<vector<T>>(deg + 1, vector<T>(th + 1, 1));
		if constexpr(HAS_NONTRIVIAL_BASE) base_power = vector<T>(th + 1, 1);
		fact.assign(th + 1, 1);
		for(auto i = 2; i <= th; ++ i) fact[i] = fact[i - 1] * i;
		if constexpr(PRECALC_INVERSE){
			inv_base = 1 / (base + 1);
			invfact.assign(th + 1, 1);
			invfact[th] = 1 / fact[th];
			for(auto i = th - 1; i >= 2; -- i) invfact[i] = invfact[i + 1] * (i + 1);
		}
		if constexpr(HAS_NONTRIVIAL_DEG) for(auto x = 1; x <= deg; ++ x) for(auto y = 0; y <= th; ++ y) power[x][y] = power[x - 1][y] * y;
		if constexpr(HAS_NONTRIVIAL_BASE) for(auto x = 1; x <= th; ++ x) base_power[x] = base_power[x - 1] * base;
	}
	vector<T> fact, invfact;
	T _choose(int m, int i) const{
		assert(0 <= m && m <= th);
		if(i < 0 || m < i) return T{0};
		if constexpr(PRECALC_INVERSE) return fact[m] * invfact[i] * invfact[m - i];
		else return fact[m] / fact[i] / fact[m - i];
	}
	int m = 0, l = 0, r = 0;
	vector<T> value;
#define UPDATE0(acc, op, p, n, k)\
	if constexpr(HAS_NONTRIVIAL_BASE){\
		acc op base_power[p] * _choose(n, k);\
	}\
	else{\
		acc op _choose(n, k);\
	}
#define UPDATE(acc, op, i, p, n, k)\
	if constexpr(HAS_NONTRIVIAL_BASE){\
		acc op power[i][p] * base_power[p] * _choose(n, k);\
	}\
	else{\
		acc op power[i][p] * _choose(n, k);\
	}
	// O((deg + 1)^2)
	void _increase_m(){
		assert(m < n);
		if(l < r){
			if constexpr(HAS_NONTRIVIAL_DEG) for(auto i = deg; i >= 1; -- i){
				T res = 0;
				for(auto j = 0; j <= i; ++ j) res += _choose(i, j) * value[j];
				res = res * base + value[i];
				if(1 <= l && l <= th){
					UPDATE(res, +=, i, l, m, l - 1);
				}
				if(1 <= r && r <= th){
					UPDATE(res, -=, i, r, m, r - 1);
				}
				value[i] = res;
			}
			{
				T res = value[0] * (base + 1);
				if(1 <= l && l <= th){
					UPDATE0(res, +=, l, m, l - 1);
				}
				if(1 <= r && r <= th){
					UPDATE0(res, -=, r, m, r - 1);
				}
				value[0] = res;
			}
		}
		++ m;
	}
	// O((deg + 1)^2)
	void _decrease_m(){
		assert(m >= 1);
		if(l < r){
			{
				T res = value[0];
				if(1 <= l && l <= th){
					UPDATE0(res, -=, l, m - 1, l - 1);
				}
				if(1 <= r && r <= th){
					UPDATE0(res, +=, r, m - 1, r - 1);
				}
				if constexpr(PRECALC_INVERSE) value[0] = res * inv_base;
				else value[0] = res / (base + 1);
			}
			if constexpr(HAS_NONTRIVIAL_DEG) for(auto i = 1; i <= deg; ++ i){
				T res = 0;
				for(auto j = 0; j < i; ++ j) res -= _choose(i, j) * value[j];
				res = res * base + value[i];
				if(1 <= l && l <= th){
					UPDATE(res, -=, i, l, m - 1, l - 1);
				}
				if(1 <= r && r <= th){
					UPDATE(res, +=, i, r, m - 1, r - 1);
				}
				if constexpr(PRECALC_INVERSE) value[i] = res * inv_base;
				else value[i] = res / (base + 1);
			}
		}
		-- m;
	}
	// O(deg + 1)
	void _increase_l(){
		assert(l < r);
		if(0 <= l && l <= th){
			UPDATE0(value[0], -=, l, m, l);
			if constexpr(HAS_NONTRIVIAL_DEG) for(auto i = 1; i <= deg; ++ i){
				UPDATE(value[i], -=, i, l, m, l);
			}
		}
		++ l;
	}
	// O(deg + 1)
	void _decrease_l(){
		-- l;
		if(0 <= l && l <= th){
			UPDATE0(value[0], +=, l, m, l);
			if constexpr(HAS_NONTRIVIAL_DEG) for(auto i = 1; i <= deg; ++ i){
				UPDATE(value[i], +=, i, l, m, l);
			}
		}
	}
	// O(deg + 1)
	void _increase_r(){
		if(0 <= r && r <= th){
			UPDATE0(value[0], +=, r, m, r);
			if constexpr(HAS_NONTRIVIAL_DEG) for(auto i = 1; i <= deg; ++ i){
				UPDATE(value[i], +=, i, r, m, r);
			}
		}
		++ r;
	}
	// O(deg + 1)
	void _decrease_r(){
		assert(l < r);
		-- r;
		if(0 <= r && r <= th){
			UPDATE0(value[0], -=, r, m, r);
			if constexpr(HAS_NONTRIVIAL_DEG) for(auto i = 1; i <= deg; ++ i){
				UPDATE(value[i], -=, i, r, m, r);
			}
		}
	}
	// O((deg + 1)^2 * abs(m - qm) + (deg + 1) * (abs(l - ql) + abs(r - qr)))
	const vector<T> &query(int qm, int ql, int qr){
		assert(0 <= qm && qm <= n);
		assert(ql <= qr);
		while(m < qm) _increase_m();
		while(m > qm) _decrease_m();
		while(ql < l) _decrease_l();
		while(r < qr) _increase_r();
		while(l < ql) _increase_l();
		while(qr < r) _decrease_r();
		return value;
	}
#undef UPDATE0
#undef UPDATE
};
// query(qm, ql, qr) returns \sum_{ql <= i < qr} Choose(qm,i)
template<class T, bool PRECALC_INVERSE = true>
auto make_simple_range_choose_sum_tracker(int n){
	return range_choose_sum_tracker<T, PRECALC_INVERSE, false, false>(n, 1, 0);
}
// query(qm, ql, qr) returns \sum_{ql <= i < qr} base^i * Choose(qm,i)
template<class T, bool PRECALC_INVERSE = true>
auto make_range_choose_sum_tracker_with_base(int n, T base){
	return range_choose_sum_tracker<T, PRECALC_INVERSE, true, false>(n, base, 0);
}
// query(qm, ql, qr) returns \sum_{ql <= i < qr} i^j * Choose(qm,i) for all integer 0 <= j <= deg
template<class T, bool PRECALC_INVERSE = true>
auto make_range_choose_sum_tracker_with_power(int n, int deg){
	return range_choose_sum_tracker<T, PRECALC_INVERSE, false, true>(n, 1, deg);
}
// query(qm, ql, qr) returns \sum_{ql <= i < qr} i^j * base^i * Choose(qm,i) for all integer 0 <= j <= deg
template<class T, bool PRECALC_INVERSE = true>
auto make_range_choose_sum_tracker(int n, T base, int deg){
	return range_choose_sum_tracker<T, PRECALC_INVERSE, true, true>(n, base, deg);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>range_choose_sum_tracker</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
