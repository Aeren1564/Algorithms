<snippet>
	<content><![CDATA[
template<int B, class T, class F>
struct sqrt_decomposition_light_point_update_heavy_range_query_commutative_monoid{
	int n, nB;
	vector<T> data, dataB;
	F TT; // commutative monoid operation
	T T_id; // commutative monoid identity
	// O(n)
	sqrt_decomposition_light_point_update_heavy_range_query_commutative_monoid(F TT, T T_id): TT(TT), T_id(T_id){ }
	// O(n)
	void build(int n){
		build(vector<T>(n, T_id));
	}
	// O(n)
	void build(int n, T x){
		build(vector<T>(n, x));
	}
	// O(n)
	template<class U>
	void build(const vector<U> &a){
		n = (int)a.size();
		nB = (n + B - 1) / B;
		data = a;
		dataB.assign(nB, T_id);
		for(auto iB = 0; iB < nB; ++ iB) for(auto i = B * iB; i < min(n, B * (iB + 1)); ++ i) dataB[iB] = TT(dataB[iB], data[i]);
	}
	// O(1)
	void update(int p, T x){
		assert(0 <= p && p < n);
		data[p] = TT(data[p], x);
		int pB = p / B;
		dataB[pB] = TT(dataB[pB], x);
	}
	// O(B + n/B)
	T query(int l, int r) const{
		assert(0 <= l && l <= r && r <= n);
		if(l == r) return T_id;
		int lB = l / B, rB = (r - 1) / B;
		T res = T_id;
		if(lB == rB) for(auto i = l; i < r; ++ i) res = TT(res, data[i]);
		else{
			for(auto i = l; i < B * (lB + 1); ++ i) res = TT(res, data[i]);
			for(auto iB = lB + 1; iB < rB; ++ iB) res = TT(res, dataB[iB]);
			for(auto i = B * rB; i < r; ++ i) res = TT(res, data[i]);
		}
		return res;
	}
	friend ostream &operator<<(ostream &out, const sqrt_decomposition_light_point_update_heavy_range_query_commutative_monoid<B, T, F> &sqrt_decomp){
		out << "{";
		for(auto i = 0; i < sqrt_decomp.n; ++ i){
			out << sqrt_decomp.data[i];
			if(i + 1 < sqrt_decomp.n) out << ", ";
		}
		return out << "}";
	}
};

template<int B, class T, class F = plus<>>
auto make_sqrt_decomposition_lpu_hrq(F TT = plus<>(), T T_id = 0){
	return sqrt_decomposition_light_point_update_heavy_range_query_commutative_monoid(TT, T_id);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sqrt_decomposition_light_point_update_heavy_range_query_commutative_monoid</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
