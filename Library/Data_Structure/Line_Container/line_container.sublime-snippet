<snippet>
	<content><![CDATA[
// Source: KACTL
template<class T, bool GET_MAX = true>
struct line_container{
	struct line_type{
		T k, d; // Constant term, Slope
		mutable T p;
		bool operator<(const line_type &otr) const{
			return d < otr.d;
		}
		bool operator<(T x) const{
			return p < x;
		}
		friend ostream &operator<<(ostream &out, const line_type &L){
			return out << "{" << L.d << ", " << L.k << ", " << L.p << "}";
		}
	};
	multiset<line_type, less<>> data;
	T inf = numeric_limits<T>::max() / 2;
	T div(T a, T b){
		if constexpr(is_integral<T>::value) return a / b - ((a ^ b) < 0 && a % b);
		else return a / b;
	}
	template<class It>
	bool isect(It x, It y){
		if(y == data.end()){
			x->p = inf;
			return false;
		}
		if(x->d == y->d) x->p = x->k > y->k ? inf : -inf;
		else x->p = div(y->k - x->k, x->d - y->d);
		return x->p >= y->p;
	}
	int size() const{
		return (int)data.size();
	}
	bool empty() const{
		return data.empty();
	}
	void clear(){
		data.clear();
	}
	// O(log(n))
	void push(line_type L){
		if(!GET_MAX){
			L.d = -L.d;
			L.k = -L.k;
		}
		L.p = 0;
		auto z = data.insert(L), y = z ++, x = y;
		while(isect(y, z)) z = data.erase(z);
		if(x != data.begin() && isect(-- x, y)) isect(x, y = data.erase(y));
		while((y = x) != data.begin() && (-- x)->p >= y->p) isect(x, data.erase(y));
	}
	// O(log(n))
	T query(T x){
		assert(!data.empty());
		auto l = *data.lower_bound(x);
		return (l.k + l.d * x) * (GET_MAX ? 1 : -1);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>line_container</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
