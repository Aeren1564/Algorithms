<snippet>
	<content><![CDATA[
template<class T, bool GET_MAX = false>
struct sorted_line_container{
#ifdef LOCAL
	#define ASSERT(x) assert(x)
#else
	#define ASSERT(X) 42
#endif
	struct _line_type{
		T k, d; // Constant term, Slope
		mutable T p;
		friend ostream &operator<<(ostream &out, const _line_type &L){
			return out << L.k << " + " << L.d << "X";
		}
	};
	deque<_line_type> data;
	friend ostream &operator<<(ostream &out, const sorted_line_container &slc){
		if(slc.empty()) return out << "{}";
		out << "{";
		for(auto i = 0; i < (int)slc.size(); ++ i){
			out << slc.data[i];
			if(i + 1 < (int)slc.size()) out << ", ";
		}
		return out << "}";
	}
	static constexpr T inf = numeric_limits<T>::max() / 2;
	T _div(T a, T b){
		if constexpr(is_integral<T>::value) return a / b - ((a ^ b) < 0 && a % b);
		else return a / b;
	}
	template<class It>
	bool _isect_front(It x, It y){
		if(y == data.end()){
			x->p = inf;
			return false;
		}
		else{
			x->p = _div(y->k - x->k, x->d - y->d);
			return x->p >= y->p;
		}
	}
	template<class Rit>
	bool _isect_back(Rit x, Rit y){
		if(x == data.rend()){
			return false;
		}
		else{
			x->p = _div(y->k - x->k, x->d - y->d);
			return x->p >= y->p;
		}
	}
	int size() const{
		return (int)data.size();
	}
	bool empty() const{
		return data.empty();
	}
	void clear(){
		data.clear();
	}
	// Slopes must increase monotonously
	// Amortized O(1)
	void _insert_increasing_slope(const _line_type &L){
		ASSERT(data.empty() || data.back().d <= L.d);
		if(!data.empty() && L.d == data.back().d){
			if(L.k <= data.back().k) return;
			data.erase(-- data.end());
		}
		L.p = inf;
		data.push_back(L);
		_isect_back(++ data.rbegin(), data.rbegin());
		while((int)data.size() >= 2 && _isect_back(++ ++ data.rbegin(), ++ data.rbegin())){
			data.erase(-- -- data.end());
			_isect_back(++ data.rbegin(), data.rbegin());
		}
	}
	// Slopes must decrease monotonously
	// Amortized O(1)
	void _insert_decreasing_slope(const _line_type &L){
		ASSERT(data.empty() || data.front().d >= L.d);
		if(!data.empty() && data.front().d == L.d){
			if(L.k <= data.front().k) return;
			data.erase(data.begin());
		}
		L.p = 0;
		data.push_front(L);
		_isect_front(data.begin(), ++ data.begin());
		while((int)data.size() >= 2 && _isect_front(data.begin(), ++ data.begin())) data.erase(++ data.begin());
	}
	// Const term, slope
	// Slopes must increase monotonously
	// Amortized O(1)
	void insert_increasing_slope(T k, T d){
		if constexpr(GET_MAX) _insert_increasing_slope(_line_type{k, d});
		else _insert_decreasing_slope(_line_type{-k, -d});
	}
	// Const term, slope
	// Slopes must decrease monotonously
	// Amortized O(1)
	void insert_decreasing_slope(T k, T d){
		if constexpr(GET_MAX) _insert_decreasing_slope(_line_type{k, d});
		else _insert_increasing_slope(_line_type{-k, -d});
	}
	// Other queries must not be called and x must be decreasing
	// Amortized O(1)
	T query_decreasing_x(T x){
		ASSERT(!data.empty());
		while((int)data.size() >= 2 && data.rbegin()->k + data.rbegin()->d * x <= next(data.rbegin())->k + next(data.rbegin())->d * x) data.pop_back();
		data.back().p = inf;
		return (data.rbegin()->k + data.rbegin()->d * x) * (GET_MAX ? 1 : -1);
	}
	// Other queries must not be called and x must be increasing
	// Amortized O(1)
	T query_increasing_x(T x){
		ASSERT(!data.empty());
		while((int)data.size() >= 2 && data.begin()->k + data.begin()->d * x <= next(data.begin())->k + next(data.begin())->d * x) data.pop_front();
		return (data.begin()->k + data.begin()->d * x) * (GET_MAX ? 1 : -1);
	}
	// Other queries must not be called
	// O(log(n))
	T query(T x){
		ASSERT(!data.empty());
		if((int)data.size() == 1) return (data.begin()->k + data.begin()->d * x) * (GET_MAX ? 1 : -1);
		if(data.begin()->k + data.begin()->d * x >= next(data.begin())->k + next(data.begin())->d * x) return (data.begin()->k + data.begin()->d * x) * (GET_MAX ? 1 : -1);
		int low = 0, high = (int)data.size() - 1;
		while(high - low >= 2){
			int mid = low + (high - low >> 1);
			((data.begin() + mid)->k + (data.begin() + mid)->d * x < (data.begin() + mid + 1)->k + (data.begin() + mid + 1)->d * x ? low : high) = mid;
		}
		return ((data.begin() + low + 1)->k + (data.begin() + low + 1)->d * x) * (GET_MAX ? 1 : -1);
	}
#undef ASSERT
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sorted_line_container</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
