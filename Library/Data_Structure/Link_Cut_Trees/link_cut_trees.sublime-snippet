<snippet>
	<content><![CDATA[
template<bool HAS_PATH_QUERY, bool HAS_PATH_UPDATE, bool HAS_SUBTREE_QUERY, bool HAS_SUBTREE_UPDATE, bool IS_COMMUTATIVE, class T, class U, class F1, class F2, class F3, class F4, class F5, class F6>
struct link_cut_trees_base{
#ifdef LOCAL
	#define ASSERT(x) assert(x)
#else
	#define ASSERT(x) 42
#endif
#define ifPQ if constexpr(HAS_PATH_QUERY)
#define ifPU if constexpr(HAS_PATH_UPDATE)
#define ifSQ if constexpr(HAS_SUBTREE_QUERY)
#define ifSU if constexpr(HAS_SUBTREE_UPDATE)
#define ifNC if constexpr(!IS_COMMUTATIVE)
#define ifPQSQ if constexpr(HAS_PATH_QUERY || HAS_SUBTREE_QUERY)
#define ifPUSU if constexpr(HAS_PATH_UPDATE || HAS_SUBTREE_UPDATE)
	// For subtree query or subtree update, T and U have to be commutative and invertible
	static_assert(!(!IS_COMMUTATIVE && (HAS_SUBTREE_QUERY || HAS_SUBTREE_UPDATE)));
	int n;
	vector<int> size, lazy_flip, pv, left, right;
	vector<T> data;
	vector<T> aux_data; // aggregation of data in the subtree in the auxiliary splay trees, aggregates in fixed order
	vector<T> virtual_data; // aggregation of data in the subtree (not necessarily in the current auxiliary splay tree) excluding those in aux_data, aggregates in arbitrary order
	vector<U> aux_lazy; // update splay subtree
	vector<U> aux_to_virtual_lazy; // update splay subtree along with their virtual subtrees
	vector<U> virtual_lazy; // update virtual subtrees
	F1 TT; // monoid operation (always adjacent), must be invertible if HAS_SUBTREE_QUERY
	T T_id; // monoid identity
	F2 Tinv; // group inverse
	F3 UU; // monoid operation (superset, subset), must be invertible if HAS_SUBTREE_UPDATE
	U U_id; // monoid identity
	F4 Uinv; // group inverse
	F5 UT; // action of U on T (superset, subset)
	F6 FlipT; // flip the operation order
	link_cut_trees_base(F1 TT, T T_id, F2 Tinv, F3 UU, U U_id, F4 Uinv, F5 UT, F6 FlipT): TT(TT), T_id(T_id), Tinv(Tinv), UU(UU), U_id(U_id), Uinv(Uinv), UT(UT), FlipT(FlipT){ }
	void _apply_aux(int u, const U &f){
		static_assert(HAS_PATH_UPDATE);
		ASSERT(0 <= u && u < n);
		data[u] = UT(f, data[u]);
		aux_lazy[u] = UU(f, aux_lazy[u]);
		ifPQ aux_data[u] = UT(f, aux_data[u]);
	}
	void _apply_subtr(int u, const U &f){
		static_assert(HAS_SUBTREE_UPDATE);
		ASSERT(0 <= u && u < n);
		data[u] = UT(f, data[u]);
		aux_to_virtual_lazy[u] = UU(f, aux_to_virtual_lazy[u]);
		virtual_lazy[u] = UU(f, virtual_lazy[u]);
		ifPQ aux_data[u] = UT(f, aux_data[u]);
		ifSQ virtual_data[u] = UT(f, virtual_data[u]);
	}
	void _apply_flip(int u){
		ASSERT(0 <= u && u < n);
		lazy_flip[u] ^= 1;
		ifNC aux_data[u] = FlipT(aux_data[u]);
		swap(left[u], right[u]);
	}
	void _push(int u){
		ASSERT(0 <= u && u < n);
		ifPU if(aux_lazy[u] != U_id){
			if(~left[u]) _apply_aux(left[u], aux_lazy[u]);
			if(~right[u]) _apply_aux(right[u], aux_lazy[u]);
			aux_lazy[u] = U_id;
		}
		ifSU{
			if(aux_to_virtual_lazy[u] != U_id){
				if(~left[u]) _apply_subtr(left[u], aux_to_virtual_lazy[u]);
				if(~right[u]) _apply_subtr(right[u], aux_to_virtual_lazy[u]);
				aux_to_virtual_lazy[u] = U_id;
			}
		}
		if(lazy_flip[u]){
			if(~left[u]) _apply_flip(left[u]);
			if(~right[u]) _apply_flip(right[u]);
			lazy_flip[u] = false;
		}
	}
	void _refresh(int u){
		ASSERT(0 <= u && u < n);
		ifPU ASSERT(aux_lazy[u] == U_id);
		ifSU ASSERT(aux_to_virtual_lazy[u] == U_id);
		size[u] = 1 + _internalsize(left[u]) + _internalsize(right[u]);
		ifPQ aux_data[u] = data[u];
		ifSQ virtual_data[u] = T_id;
		if(auto v = left[u]; ~v){
			ifPQ aux_data[u] = TT(aux_data[v], aux_data[u]);
			ifSQ virtual_data[u] = TT(virtual_data[v], virtual_data[u]); // this messes up operation order
		}
		if(auto w = right[u]; ~w){
			ifPQ aux_data[u] = TT(aux_data[u], aux_data[w]);
			ifSQ virtual_data[u] = TT(virtual_data[w], virtual_data[u]); // this messes up operation order
		}
	}
	template<bool sign>
	void _refresh_virtual(int u, int v){
		static_assert(HAS_SUBTREE_QUERY || HAS_SUBTREE_UPDATE);
		ASSERT(0 <= min(u, v) && max(u, v) < n);
		if constexpr(sign == 0){
			ifSQ virtual_data[u] = TT(virtual_data[u], virtual_data[v]);
			ifSU _apply_subtr(v, Uinv(virtual_lazy[u]));
		}
		else{
			ifSQ _apply_subtr(v, virtual_lazy[u]);
			ifSU virtual_data[u] = TT(virtual_data[u], Tinv(virtual_data[v]));
		}
	}
	int _dir(int u){
		ASSERT(0 <= u && u < n);
		if(!~pv[u]) return -2; // root of LCT component
		if(left[pv[u]] == u) return 0; // left child
		if(right[pv[u]] == u) return 1; // right child
		return -1; // root of current splay tree
	}
	bool _is_auxiliary_root(int u){
		ASSERT(0 <= u && u < n);
		return _dir(u) < 0;
	}
	void _set_link(int u, int v, int d){
		ASSERT(0 <= min(u, v) && max(u, v) < n);
		if(~v) pv[v] = u;
		if(d >= 0) (d == 0 ? left : right)[u] = v;
	}
	// Assumes p and p->p propagated
	void _rotate(int u){
		ASSERT(0 <= u && u < n && !_is_auxiliary_root(u));
		int x = _dir(u), g = pv[u];
		_set_link(pv[g], u, _dir(g));
		_set_link(g, x == 1 ? left[u] : right[u], x);
		_set_link(u, g, x ^ 1);
		_refresh(g);
	}
	// Bring the node to the top
	void _splay(int u){
		ASSERT(0 <= u && u < n);
		for(; !_is_auxiliary_root(u) && !_is_auxiliary_root(pv[u]); _rotate(u)){
			_push(pv[pv[u]]), _push(pv[u]), _push(u);
			_dir(u) == _dir(pv[u]) ? _rotate(pv[u]) : _rotate(u);
		}
		if(!_is_auxiliary_root(u)) _push(pv[u]), _push(u), _rotate(u);
		_push(u), _refresh(u);
	}
	int _internalsize(int u){
		ASSERT(-1 <= u && u < n);
		return ~u ? size[u] : 0;
	}
	// Put u on the preferred path then splay it (right subtree is empty)
	void _access(int u){
		ASSERT(0 <= u && u < n);
		for(auto v = u, p = -1; ~v; v = pv[p = v]){
			_splay(v);
			if constexpr(HAS_SUBTREE_QUERY || HAS_SUBTREE_UPDATE){
				if(~p) _refresh_virtual<1>(u, p);
				if(~right[v]) _refresh_virtual<0>(u, right[v]);
			}
			right[v] = p;
			_refresh(v);
		}
		_splay(u);
		ASSERT(!~right[u]);
	}
	void _cut_from_parent(int u){
		ASSERT(0 <= u && u < n);
		_access(u);
		ASSERT(~pv[u]);
		left[u] = pv[left[u]] = -1;
		_refresh(u);
	}
	void build(int n){
		ASSERT(0 <= n);
		build(vector<T>(n, T_id));
	}
	void build(int n, T init){
		ASSERT(0 <= n);
		build(vector<T>(n, init));
	}
	template<class V>
	void build(const vector<V> &a){
		n = (int)a.size();
		size.assign(n, 1);
		lazy_flip.assign(n, false);
		pv.assign(n, -1);
		left.assign(n, -1);
		right.assign(n, -1);
		data = vector<T>(a.begin(), a.end());
		ifPQ aux_data = vector<T>(a.begin(), a.end());
		ifSQ virtual_data.assign(n, T_id);
		ifPU aux_lazy.assign(n, U_id);
		ifSU aux_to_virtual_lazy.assign(n, U_id);
		ifSU virtual_lazy.assign(n, U_id);
	}
	int new_node(const T &x){
		size.push_back(1);
		lazy_flip.push_back(false);
		pv.push_back(-1);
		left.push_back(-1);
		right.push_back(-1);
		data.push_back(x);
		ifPQ aux_data.push_back(x);
		ifSQ virtual_data.push_back(T_id);
		ifPU aux_lazy.push_back(U_id);
		ifSU aux_to_virtual_lazy.push_back(U_id);
		ifSU virtual_lazy.push_back(U_id);
		return n ++;
	}
	// Make u the root of its connected component
	void reroot(int u){
		ASSERT(0 <= u && u < n);
		_access(u), _apply_flip(u), _access(u);
		ASSERT(!~left[u] && !~right[u]);
	}
	int root_of(int u){
		ASSERT(0 <= u && u < n);
		for(_access(u); ~left[u]; _push(u)) u = left[u];
		return _access(u), u;
	}
	// If u is a non-root vertex in its component, return its parent
	// Otherwise, return -1
	int parent_or_is_root(int u){
		ASSERT(0 <= u && u < n);
		_access(u);
		if(!~left[u]) return -1;
		for(_push(u = left[u]); ~right[u]; _push(u)) u = right[u];
		return _access(u), u;
	}
	// If u and v are in the same component, find the lca
	// Otherwise, return -1
	int lca_or_disconnected(int u, int v){
		ASSERT(0 <= min(u, v) && max(u, v) < n);
		if(u == v) return u;
		_access(u), _access(v);
		if(!~pv[u]) return -1;
		_splay(u);
		return ~pv[u] ? pv[u] : u;
	}
	bool adjacent(int u, int v){
		ASSERT(0 <= min(u, v) && max(u, v) < n);
		if(u == v) return false;
		int w = lca_or_disconnected(u, v);
		if(!~w || u != w && v != w) return false;
		return u != w ? w == parent_or_is_root(u) : w == parent_or_is_root(v);
	}
	int depth(int u){
		ASSERT(0 <= u && u < n);
		_access(u);
		return _internalsize(left[u]);
	}
	bool connected(int u, int v){
		ASSERT(0 <= min(u, v) && max(u, v) < n);
		if(u == v) return true;
		_access(u), _access(v);
		return !~pv[u];
	}
	// Returns the k-th ancestor on the path to root
	int find_ancestor_by_order(int u, int k){
		ASSERT(0 <= u && u < n && 0 <= k);
		k = depth(u) - k;
		ASSERT(k >= 0);
		for(; ; _push(u)){
			int size = _internalsize(left[u]);
			if(size == k) return _access(u), u;
			if(size < k) k -= size + 1, u = right[u];
			else u = left[u];
		}
		ASSERT(false);
	}
	// Returns the k-th vertex on the u-v path
	int find_vertex_by_order(int u, int v, int k){
		ASSERT(0 <= min(u, v) && max(u, v) < n && 0 <= k);
		reroot(v);
		return find_ancestor_by_order(u, k);
	}
	// Make u the parent of v
	void link(int u, int v){
		ASSERT(0 <= min(u, v) && max(u, v) < n && !connected(u, v));
		reroot(v), _access(u), _set_link(v, u, 0), _refresh(v);
	}
	// Assumes u and v are adjacent in tree
	void cut(int u, int v){
		ASSERT(adjacent(u, v));
		_cut_from_parent(depth(u) > depth(v) ? u : v);
	}
	T query(int u){
		ASSERT(0 <= u && u < n);
		ifPUSU _access(u);
		return data[u];
	}
	template<bool KEEP_STRUCTURE = false>
	T query_path(int u, int v){
		static_assert(HAS_PATH_QUERY);
		ASSERT(0 <= min(u, v) && max(u, v) < n && connected(u, v));
		int init_root = -1;
		if constexpr(KEEP_STRUCTURE) init_root = root_of(u);
		reroot(u), _access(v);
		if constexpr(KEEP_STRUCTURE) reroot(init_root);
		return aux_data[v];
	}
	T query_subtree(int root, int u){
		static_assert(HAS_SUBTREE_QUERY);
		ASSERT(0 <= min(root, u) && max(root, u) < n && connected(root, u));
		reroot(root);
		int v = parent_or_is_root(u);
		if(~v) _cut_from_parent(u);
		T res = TT(aux_data[u], virtual_data[u]);
		if(~v) link(u, v);
		return res;
	}
	void update(int u, const U &f){
		static_assert(HAS_PATH_UPDATE || HAS_SUBTREE_UPDATE);
		ASSERT(0 <= u && u < n);
		_access(u);
		data[u] = UT(f, data[u]);
		_refresh(u);
	}
	template<bool KEEP_STRUCTURE = false>
	void update_path(int u, int v, const U &f){
		static_assert(HAS_PATH_UPDATE);
		ASSERT(0 <= min(u, v) && max(u, v) < n && connected(u, v));
		int init_root = -1;
		if constexpr(KEEP_STRUCTURE) init_root = root_of(u);
		reroot(u), _access(v), _apply_aux(v, f);
		if constexpr(KEEP_STRUCTURE) reroot(init_root);
	}
	void update_subtree(int root, int u, const U &f){
		static_assert(HAS_SUBTREE_UPDATE);
		ASSERT(0 <= min(root, u) && max(root, u) < n && connected(root, u));
		reroot(root);
		int v = parent_or_is_root(u);
		if(~v) _cut_from_parent(u);
		_apply_subtr(u, f);
		if(~v) link(u, v);
	}
	template<bool KEEP_STRUCTURE = false>
	void flip(int u, int v){
		ASSERT(0 <= min(u, v) && max(u, v) < n && connected(u, v));
		int init_root = -1;
		if constexpr(KEEP_STRUCTURE) init_root = root_of(u);
		reroot(u), _access(v), _apply_flip(v);
		if constexpr(KEEP_STRUCTURE) reroot(init_root);
	}
	int partition_point(int u, int v, auto pred){
		ASSERT(0 <= min(u, v) && max(u, v) < n && connected(u, v));
		// TODO FINISH THIS
	}
	int max_pref(int u, int v, auto pred){
		static_assert(HAS_PATH_QUERY);
		ASSERT(0 <= min(u, v) && max(u, v) < n && connected(u, v));
		// TODO FINISH THIS
	}
	int max_suff(int u, int v, auto pred){
		static_assert(HAS_PATH_QUERY);
		ASSERT(0 <= min(u, v) && max(u, v) < n && connected(u, v));
		reroot(v), _access(u);
		// TODO FINISH THIS
	}
#undef ASSERT
#undef ifPQ
#undef ifPU
#undef ifSQ
#undef ifSU
#undef ifNC
#undef ifPQSQ
#undef ifPUSU
};

// TODO TEST

template<class T>
auto make_LCT(){
	using U = int;
	auto TT = [&](const T &, const T &){ return T{}; };
	using F1 = decltype(TT);
	T T_id = {};
	auto Tinv = [&](const T &){ return T{}; };
	using F2 = decltype(Tinv);
	auto UU = [&](const U &, const U &){ return U{}; };
	using F3 = decltype(UU);
	U U_id = {};
	auto Uinv = [&](const U &){ return U{}; };
	using F4 = decltype(Uinv);
	auto UT = [&](const U &, const T &){ return T{}; };
	using F5 = decltype(UT);
	auto FlipT = [&](const T &){ return T{}; };
	using F6 = decltype(FlipT);
	return link_cut_trees_base<true, false, false, false, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, UU, U_id, Uinv, UT, FlipT);
}
// Supports
// - path query
template<class T, class F1, class F6>
auto make_PQ_LCT(F1 TT, T T_id, F6 FlipT){
	using U = int;
	auto Tinv = [&](const T &){ return T{}; };
	using F2 = decltype(Tinv);
	auto UU = [&](const U &, const U &){ return U{}; };
	using F3 = decltype(UU);
	U U_id = {};
	auto Uinv = [&](const U &){ return U{}; };
	using F4 = decltype(Uinv);
	auto UT = [&](const U &, const T &){ return T{}; };
	using F5 = decltype(UT);
	return link_cut_trees_base<true, false, false, false, false, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, UU, U_id, Uinv, UT, FlipT);
}
// Supports
// - path query (commutative)
template<class T, class F1>
auto make_cPQ_LCT(F1 TT, T T_id){
	using U = int;
	auto Tinv = [&](const T &){ return T{}; };
	using F2 = decltype(Tinv);
	auto UU = [&](const U &, const U &){ return U{}; };
	using F3 = decltype(UU);
	U U_id = {};
	auto Uinv = [&](const U &){ return U{}; };
	using F4 = decltype(Uinv);
	auto UT = [&](const U &, const T &){ return T{}; };
	using F5 = decltype(UT);
	auto FlipT = [&](const T &){ return T{}; };
	using F6 = decltype(FlipT);
	return link_cut_trees_base<true, false, false, false, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, UU, U_id, Uinv, UT, FlipT);
}
// Supports
// - subtree query (commutative & invertible)
template<class T, class F1, class F2>
auto make_SQ_LCT(F1 TT, T T_id, F2 Tinv){
	using U = int;
	auto UU = [&](const U &, const U &){ return U{}; };
	using F3 = decltype(UU);
	U U_id = {};
	auto Uinv = [&](const U &){ return U{}; };
	using F4 = decltype(Uinv);
	auto UT = [&](const U &, const T &){ return T{}; };
	using F5 = decltype(UT);
	auto FlipT = [&](const T &){ return T{}; };
	using F6 = decltype(FlipT);
	return link_cut_trees_base<false, false, true, false, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, UU, U_id, Uinv, UT, FlipT);
}
// Supports
// - path query
// - path update
template<class T, class U, class F1, class F3, class F5, class F6>
auto make_PQPU_LCT(F1 TT, T T_id, F3 UU, U U_id, F5 UT, F6 FlipT){
	auto Tinv = [&](const T &){ return T{}; };
	using F2 = decltype(Tinv);
	auto Uinv = [&](const U &){ return U{}; };
	using F4 = decltype(Uinv);
	return link_cut_trees_base<true, true, false, false, false, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, UU, U_id, Uinv, UT, FlipT);
}
// Supports
// - path query (commutative)
// - path update
template<class T, class U, class F1, class F3, class F5>
auto make_cPQPU_LCT(F1 TT, T T_id, F3 UU, U U_id, F5 UT){
	auto Tinv = [&](const T &){ return T{}; };
	using F2 = decltype(Tinv);
	auto Uinv = [&](const U &){ return U{}; };
	using F4 = decltype(Uinv);
	auto FlipT = [&](const T &){ return T{}; };
	using F6 = decltype(FlipT);
	return link_cut_trees_base<true, true, false, false, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, UU, U_id, Uinv, UT, FlipT);
}
// Supports
// - subtree query (commutative & invertible)
// - subtree update (commutative & invertible)
template<class T, class U, class F1, class F2, class F3, class F4, class F5>
auto make_SQSU_LCT(F1 TT, T T_id, F2 Tinv, F3 UU, U U_id, F4 Uinv, F5 UT){
	auto FlipT = [&](const T &){ return T{}; };
	using F6 = decltype(FlipT);
	return link_cut_trees_base<false, false, true, true, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, UU, U_id, Uinv, UT, FlipT);
}
// Supports
// - path query + subtree query (commutative & invertible)
// - path update + subtree update (commutative & invertible)
template<class T, class U, class F1, class F2, class F3, class F4, class F5>
auto make_PQPUSQSU_LCT(F1 TT, T T_id, F2 Tinv, F3 UU, U U_id, F4 Uinv, F5 UT){
	auto FlipT = [&](const T &){ return T{}; };
	using F6 = decltype(FlipT);
	return link_cut_trees_base<true, true, true, true, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, UU, U_id, Uinv, UT, FlipT);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>link_cut_trees</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
