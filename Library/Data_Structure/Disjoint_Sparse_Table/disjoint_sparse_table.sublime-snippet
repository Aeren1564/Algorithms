<snippet>
	<content><![CDATA[
template<class T, class F>
struct disjoint_sparse_table{
#ifdef LOCAL
	#define ASSERT(x) assert(x)
#else
	#define ASSERT(x) 42
#endif
	int n, size, log;
	vector<vector<T>> data;
	F TT; // monoid operation (always adjacent)
	T T_id; // monoid identity
	disjoint_sparse_table(F TT, T T_id): TT(TT), T_id(T_id){ }
	disjoint_sparse_table &operator=(const disjoint_sparse_table &st){
		n = st.n;
		size = st.size;
		log = st.log;
		data = st.data;
		return *this;
	}
	// O(n * log(n)) time and space
	void build(const vector<T> &a){
		n = (int)a.size();
		log = __lg(max(n - 1, 1)) + 1, size = 1 << log;
		data.assign(log + 1, vector<T>(size, T_id));
		copy(a.begin(), a.end(), data[0].begin());
		for(auto h = 1, len = 2, half = 1; len <= size; ++ h, len <<= 1, half <<= 1) for(auto m = half; m < size; m += len){
			data[h][m - 1] = data[0][m - 1], data[h][m] = data[0][m];
			for(auto i = m - 2; i >= m - half; -- i) data[h][i] = TT(data[0][i], data[h][i + 1]);
			for(auto i = m + 1; i < m + half; ++ i) data[h][i] = TT(data[h][i - 1], data[0][i]);
		}
	}
	// Returns the sum of a[i] over i \in [ql, qr)
	// O(1)
	T query(int ql, int qr) const{
		if(ql >= qr) return T_id;
		if(qr - ql == 1) return data[0][ql];
		int h = __lg(ql ^ qr - 1) + 1;
		return TT(data[h][ql], data[h][qr - 1]);
	}
#undef ASSERT
};
template<class T, class F>
auto make_disjoint_sparse_table(F TT, T T_id){
	return disjoint_sparse_table(TT, T_id);
}
template<class T>
auto make_rminq(T inf = numeric_limits<T>::max()){
	return disjoint_sparse_table([&](const T &x, const T &y){ return min(x, y); }, inf);
}
template<class T>
auto make_rmaxq(T minf = numeric_limits<T>::min()){
	return disjoint_sparse_table([&](const T &x, const T &y){ return max(x, y); }, minf);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>disjoint_sparse_table</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
