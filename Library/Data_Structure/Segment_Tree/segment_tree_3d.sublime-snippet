<snippet>
	<content><![CDATA[
template<class T, class F>
struct segment_tree_3d{
	int n, m, l;
	vector<vector<vector<T>>> data;
	F TT; // commutative monoid operation
	T T_id; // commutative monoid identity
	// O(n * m * l)
	segment_tree_3d(int n, int m, int l, F TT, T T_id): n(n), m(m), l(l), TT(TT), T_id(T_id), data(n << 1, vector<vector<T>>(m << 1, vector<T>(l << 1, T_id))){ }
	// O(n * m * l)
	segment_tree_3d(int n, int m, int l, T x, F TT, T T_id): segment_tree_3d(vector<vector<vector<T>>>(n, vector<vector<T>>(m, vector<T>(l, x)))){ }
	// O(n * m * l)
	segment_tree_3d(const vector<vector<vector<T>>> &a, F TT, T T_id): n((int)a.size()), m((int)a[0].size()), l((int)a[0][0].size()), TT(TT), T_id(T_id), data(n << 1, vector<vector<T>>(m << 1, vector<T>(l << 1, T_id))){
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j < m; ++ j) for(auto k = 0; k < l; ++ k) data[i + n][j + m][k + l] = a[i][j][k];
		for(auto i = n - 1; i > 0; -- i) for(auto j = 0; j < m; ++ j) for(auto k = 0; k < l; ++ k) data[i][j + m][k + l] = TT(data[i << 1][j + m][k + l], data[i << 1 | 1][j + m][k + l]);
		for(auto i = 1; i < n << 1; ++ i) for(auto j = m - 1; j > 0; -- j) for(auto k = 0; k < l; ++ k) data[i][j][k + l] = TT(data[i][j << 1][k + l], data[i][j << 1 | 1][k + l]);
		for(auto i = 1; i < n << 1; ++ i) for(auto j = 1; j < m << 1; ++ j) for(auto k = l - 1; k > 0; -- k) data[i][j][k] = TT(data[i][j][k << 1], data[i][j][k << 1 | 1]);
	}
	// a[p][q][r] := x
	// O(log n * log m * log l)
	void set(int p, int q, int r, T x){
		data[p += n][q += m][r += l] = x;
		for(auto k = r; k >>= 1; ) data[p][q][k] = TT(data[p][q][k << 1], data[p][q][k << 1 | 1]);
		for(auto j = q; j >>= 1; ){
			data[p][j][r] = TT(data[p][j << 1][r], data[p][j << 1 | 1][r]);
			for(auto k = r; k >>= 1; ) data[p][j][k] = TT(data[p][j][k << 1], data[p][j][k << 1 | 1]);
		}
		for(auto i = p; i >>= 1; ){
			data[i][q][r] = TT(data[i << 1][q][r], data[i << 1 | 1][q][r]);
			for(auto k = r; k >>= 1; ) data[i][q][k] = TT(data[i][q][k << 1], data[i][q][k << 1 | 1]);
			for(auto j = q; j >>= 1; ){
				data[i][j][r] = TT(data[i][j << 1][r], data[i][j << 1 | 1][r]);
				for(auto k = r; k >>= 1; ) data[i][j][k] = TT(data[i][j][k << 1], data[i][j][k << 1 | 1]);
			}
		}
	}
	// Returns a[p][q][r]
	// O(1)
	T query(int p, int q, int r){
		return data[p + n][q + m][r + l];
	}
	// Returns the sum of a[i][j][k] on [xl, xr) X [yl, yr) X [zl, zr)
	// O(log n * log m * log l)
	T query(int xl, int xr, int yl, int yr, int zl, int zr){
		if(xl >= xr || yl >= yr || zl >= zr) return T_id;
		T res = T_id;
		xl += n, xr += n, yl += m, yr += m, zl += l, zr += l;
		for(auto il = xl, ir = xr; il < ir; il >>= 1, ir >>= 1){
			if(il & 1){
				for(auto jl = yl, jr = yr; jl < jr; jl >>= 1, jr >>= 1){
					if(jl & 1){
						for(auto kl = zl, kr = zr; kl < kr; kl >>= 1, kr >>= 1){
							if(kl & 1) res = TT(res, data[il][jl][kl ++]);
							if(kr & 1) res = TT(res, data[il][jl][-- kr]);
						}
						++ jl;
					}
					if(jr & 1){
						-- jr;
						for(auto kl = zl, kr = zr; kl < kr; kl >>= 1, kr >>= 1){
							if(kl & 1) res = TT(res, data[il][jr][kl ++]);
							if(kr & 1) res = TT(res, data[il][jr][-- kr]);
						}
					}
				}
				++ il;
			}
			if(ir & 1){
				-- ir;
				for(auto jl = yl, jr = yr; jl < jr; jl >>= 1, jr >>= 1){
					if(jl & 1){
						for(auto kl = zl, kr = zr; kl < kr; kl >>= 1, kr >>= 1){
							if(kl & 1) res = TT(res, data[ir][jl][kl ++]);
							if(kr & 1) res = TT(res, data[ir][jl][-- kr]);
						}
						++ jl;
					}
					if(jr & 1){
						-- jr;
						for(auto kl = zl, kr = zr; kl < kr; kl >>= 1, kr >>= 1){
							if(kl & 1) res = TT(res, data[ir][jr][kl ++]);
							if(kr & 1) res = TT(res, data[ir][jr][-- kr]);
						}
					}
				}
			}
		}
		return res;
	}
	template<class output_stream>
	friend output_stream &operator<<(output_stream &out, const segment_tree_3d<T, F> &seg){
		for(auto i = 0; i < seg.n; ++ i){
			out << "\n[";
			for(auto j = 0; j < seg.m; ++ j){
				for(auto k = 0; k < seg.l; ++ k){
					out << seg.query(i, j, k);
					if(k != seg.l - 1) out << ", ";
				}
			}
			out << "]";
		}
		return out << "\n";
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segment_tree_3d</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
