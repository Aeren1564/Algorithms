<snippet>
	<content><![CDATA[
template<class T, class Compare = less<>>
struct mergesort_tree{
	int n;
	Compare cmp;
	vector<vector<T>> data;
	// O(n * log(n))
	mergesort_tree(const vector<T> &a, Compare cmp = less<>()): n((int)a.size()), data(n << 1), cmp(cmp){
		for(auto i = n; i < n << 1; ++ i) data[i] = {a[i - n]};
		for(auto i = n - 1; i > 0; -- i) merge(data[i << 1].begin(), data[i << 1].end(), data[i << 1 | 1].begin(), data[i << 1 | 1].end(), back_inserter(data[i]), cmp);
	}
	// O(log^2(n))
	int count_less(int l, int r, T k) const{
		assert(0 <= l && l <= r && r <= n);
		int res = 0;
		for(l += n, r += n; l < r; l >>= 1, r >>= 1){
			if(l & 1) res += lower_bound(data[l].begin(), data[l].end(), k, cmp) - data[l].begin(), ++ l;
			if(r & 1) -- r, res += lower_bound(data[r].begin(), data[r].end(), k, cmp) - data[r].begin();
		}
		return res;
	}
	// O(log^2(n))
	int count_equal_or_less(int l, int r, T k) const{
		assert(0 <= l && l <= r && r <= n);
		int res = 0;
		for(l += n, r += n; l < r; l >>= 1, r >>= 1){
			if(l & 1) res += upper_bound(data[l].begin(), data[l].end(), k, cmp) - data[l].begin(), ++ l;
			if(r & 1) -- r, res += upper_bound(data[r].begin(), data[r].end(), k, cmp) - data[r].begin();
		}
		return res;
	}
	// O(log^2(n))
	int count_greater(int l, int r, T k) const{
		assert(0 <= l && l <= r && r <= n);
		int res = 0;
		for(l += n, r += n; l < r; l >>= 1, r >>= 1){
			if(l & 1) res += data[l].end() - upper_bound(data[l].begin(), data[l].end(), k, cmp), ++ l;
			if(r & 1) -- r, res += data[r].end() - upper_bound(data[r].begin(), data[r].end(), k, cmp);
		}
		return res;
	}
	// O(log^2(n))
	int count_equal_or_greater(int l, int r, T k) const{
		assert(0 <= l && l <= r && r <= n);
		int res = 0;
		for(l += n, r += n; l < r; l >>= 1, r >>= 1){
			if(l & 1) res += data[l].end() - lower_bound(data[l].begin(), data[l].end(), k, cmp), ++ l;
			if(r & 1) -- r, res += data[r].end() - lower_bound(data[r].begin(), data[r].end(), k, cmp);
		}
		return res;
	}
	// O(log^2(n))
	int count_within(int l, int r, T kl, T kr) const{
		assert(0 <= l && l <= r && r <= n);
		int res = 0;
		for(l += n, r += n; l < r; l >>= 1, r >>= 1){
			if(l & 1) res += lower_bound(data[l].begin(), data[l].end(), kr, cmp) - lower_bound(data[l].begin(), data[l].end(), kl, cmp), ++ l;
			if(r & 1) -- r, res += lower_bound(data[r].begin(), data[r].end(), kr, cmp) - lower_bound(data[r].begin(), data[r].end(), kl, cmp);
		}
		return res;
	}
	// O(SZ * log(n)) where SZ is the size of the answer
	vector<T> get_sorted_list(int l, int r) const{
		assert(0 <= l && l <= r && r <= n);
		vector<T> res;
		for(l += n, r += n; l < r; l >>= 1, r >>= 1){
			if(auto sz = (int)res.size(); l & 1) res.insert(res.end(), data[l].begin(), data[l].end()), inplace_merge(res.begin(), res.begin() + sz, res.end(), cmp), ++ l;
			if(auto sz = (int)res.size(); r & 1) -- r, res.insert(res.begin(), data[r].begin(), data[r].end()), inplace_merge(res.begin(), res.end() - sz, res.end(), cmp);
		}
		return res;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>mergesort_tree</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
