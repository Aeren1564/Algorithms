<snippet>
	<content><![CDATA[
// Sliding-Window Aggregation based deque
template<class T, class F>
struct swag_deque{
#ifdef LOCAL
	#define ASSERT(x) assert(x)
#else
	#define ASSERT(x) 42
#endif
	vector<array<T, 2>> fstack, bstack;
	F TT;
	T T_id;
	swag_deque(F TT, T T_id): TT(TT), T_id(T_id){ }
	void _rebalance(){
		ASSERT(fstack.empty() || bstack.empty());
		if(fstack.empty() && bstack.empty()) return;
		if(fstack.empty()){
			int size = (int)bstack.size();
			for(auto i = size / 2 - 1; i >= 0; -- i) fstack.emplace_back(bstack[i][0], fstack.empty() ? bstack[i][0] : TT(bstack[i][0], fstack.back()[1]));
			bstack.erase(bstack.begin(), bstack.begin() + size / 2);
			for(auto i = 0; i < (int)bstack.size(); ++ i) bstack[i][1] = i == 0 ? bstack[i][0] : TT(bstack[i - 1][1], bstack[i][0]);
		}
		else{
			int size = (int)fstack.size();
			for(auto i = size / 2 - 1; i >= 0; -- i) bstack.emplace_back(fstack[i][0], bstack.empty() ? fstack[i][0] : TT(bstack.back()[1], fstack[i][0]));
			fstack.erase(fstack.begin(), fstack.begin() + size / 2);
			for(auto i = 0; i < (int)fstack.size(); ++ i) fstack[i][1] = i == 0 ? fstack[i][0] : TT(fstack[i][0], fstack[i - 1][1]);
		}
	}
	// O(1)
	bool empty() const{ return fstack.empty() && bstack.empty(); }
	// O(1)
	int size() const{ return fstack.size() + bstack.size(); }
	// O(1)
	T evaluate() const{
		if(empty()) return T_id;
		else if(fstack.empty()) return bstack.back()[1];
		else if(bstack.empty()) return fstack.back()[1];
		else return TT(fstack.back()[1], bstack.back()[1]);
	}
	// O(1)
	void push_front(T x){
		fstack.emplace_back(x, fstack.empty() ? x : TT(x, fstack.back()[1]));
	}
	// O(1)
	void push_back(T x){
		bstack.emplace_back(x, bstack.empty() ? x : TT(bstack.back()[1], x));
	}
	// Amortized O(1)
	T front(){
		ASSERT(!empty());
		if(fstack.empty()) _rebalance();
		return fstack.back()[0];
	}
	// Amortized O(1)
	T pop_front(){
		ASSERT(!empty());
		if(fstack.empty()) _rebalance();
		T x = fstack.back()[0];
		fstack.pop_back();
		return x;
	}
	// Amortized O(1)
	T back(){
		ASSERT(!empty());
		if(bstack.empty()) _rebalance();
		return bstack.back()[0];
	}
	// Amortized O(1)
	T pop_back(){
		ASSERT(!empty());
		if(bstack.empty()) _rebalance();
		T x = bstack.back()[0];
		bstack.pop_back();
		return x;
	}
	T operator[](int i) const{
		ASSERT(0 <= i && i < size());
		return i < (int)fstack.size() ? fstack[(int)fstack.size() - 1 - i][0] : bstack[i - (int)fstack.size()][0];
	}
#undef LOCAL
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>swag_deque</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
