<snippet>
	<content><![CDATA[
// Requires sqrt_decomposition_heavy_point_update_light_range_query_commutative_group and mo_sweepline
template<int BX>
struct range_inversion_query_solver_offline{
	int n;
	vector<int> data;
	mo_sweepline_base<BX, long long, plus<>, minus<>> mo;
	template<class T, class Compare = less<>>
	range_inversion_query_solver_offline(const vector<T> &a, Compare cmp = less<>()): n((int)a.size()), data((int)a.size()), mo(n, plus<>(), 0LL, minus<>()){
		vector<T> temp = a;
		sort(temp.begin(), temp.end(), cmp);
		for(auto i = 0; i < n; ++ i) data[i] = lower_bound(temp.begin(), temp.end(), a[i]) - temp.begin();
	}
	void query(int qi, int ql, int qr){
		mo.query(qi, ql, qr);
	}
	// O(n*BX + qn*BX + n^2/BX)
	vector<long long> solve() const{
		sqrt_decomposition_heavy_point_update_light_range_query_commutative_group<BX, int, plus<>, minus<>> sqrtdecomp(n, plus<>(), 0, minus<>());
		auto insert = [&](int i)->void{
			sqrtdecomp.update(data[i], 1);
		};
		auto query_left = [&](int i)->int{
			return sqrtdecomp.query(0, data[i]);
		};
		auto query_right = [&](int i)->int{
			return sqrtdecomp.query(data[i] + 1, n);
		};
		return mo.solve(insert, query_left, query_right);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>range_inversion_query_solver_offline</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
