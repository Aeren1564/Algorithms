<snippet>
	<content><![CDATA[
template<class T, bool Force_Reduction = false>
struct field_of_fraction{
	T n, d;
	field_of_fraction(T n = 0, T d = 1): n(n), d(d){
		if(d < 0) this->n = -n, this->d = -d;
	}
	friend ostream &operator<<(ostream &out, const field_of_fraction &x){
		return out << x.n << "/" << x.d;
	}
	friend istream &operator>>(istream &in, field_of_fraction &x){
		in >> x.n, x.d = 1;
		return in;
	}
	field_of_fraction &reduce(){
		T g = gcd(n, d);
		n /= g, d /= g;
		return *this;
	}
	field_of_fraction reduced() const{
		return field_of_fraction(*this).reduce();
	}
	field_of_fraction &operator+=(const field_of_fraction &x){
		*this = {n * x.d + x.n * d, d * x.d};
		if constexpr(Force_Reduction) this->reduce();
		return *this;
	}
	field_of_fraction &operator+=(const T &x){
		*this = {n + d * x, d};
		if constexpr(Force_Reduction) this->reduce();
		return *this;
	}
	field_of_fraction &operator-=(const field_of_fraction &x){
		*this = {n * x.d - x.n * d, d * x.d};
		if constexpr(Force_Reduction) this->reduce();
		return *this;
	}
	field_of_fraction &operator-=(const T &x){
		*this = {n - d * x, d};
		if constexpr(Force_Reduction) this->reduce();
		return *this;
	}
	field_of_fraction &operator*=(const field_of_fraction &x){
		*this = {n * x.n, d * x.d};
		if constexpr(Force_Reduction) this->reduce();
		return *this;
	}
	field_of_fraction &operator*=(const T &x){
		*this = {n * x, d};
		if constexpr(Force_Reduction) this->reduce();
		return *this;
	}
	field_of_fraction &operator/=(const field_of_fraction &x){
		assert(x.n != T(0));
		*this = {n * x.d, d * x.n};
		if constexpr(Force_Reduction) this->reduce();
		return *this;
	}
	field_of_fraction &operator/=(const T &x){
		assert(x != T(0));
		*this = {n, d * x};
		if constexpr(Force_Reduction) this->reduce();
		return *this;
	}
	field_of_fraction operator+(const field_of_fraction &x) const{
		return field_of_fraction(*this) += x;
	}
	field_of_fraction operator+(const T &x) const{
		return field_of_fraction(*this) += x;
	}
	friend field_of_fraction operator+(const T &x, const field_of_fraction &f){
		return field_of_fraction(f) += x;
	}
	field_of_fraction operator+() const{
		return *this;
	}
	field_of_fraction operator-(const field_of_fraction &x) const{
		return field_of_fraction(*this) -= x;
	}
	field_of_fraction operator-(const T &x) const{
		return field_of_fraction(*this) -= x;
	}
	friend field_of_fraction operator-(const T &x, const field_of_fraction &f){
		field_of_fraction g = {x * f.d - f.n, f.d};
		if constexpr(Force_Reduction) g.reduce();
		return g;
	}
	field_of_fraction operator-() const{
		return {-n, d};
	}
	field_of_fraction operator*(const field_of_fraction &x) const{
		return field_of_fraction(*this) *= x;
	}
	field_of_fraction operator*(const T &x) const{
		return field_of_fraction(*this) *= x;
	}
	friend field_of_fraction operator*(const T &x, const field_of_fraction &f){
		return field_of_fraction(f) *= x;
	}
	field_of_fraction operator/(const field_of_fraction &x) const{
		return field_of_fraction(*this) /= x;
	}
	field_of_fraction operator/(const T &x) const{
		return field_of_fraction(*this) /= x;
	}
	friend field_of_fraction operator/(const T &x, const field_of_fraction &f){
		auto g = field_of_fraction(x * f.d, f.n);
		if constexpr(Force_Reduction) g.reduce();
		return g;
	}
	field_of_fraction &operator++(){
		n += d;
		return *this;
	}
	field_of_fraction operator++(int){
		auto res = *this;
		n += d;
		return res;
	}
	field_of_fraction &operator--(){
		n -= d;
		return *this;
	}
	field_of_fraction operator--(int){
		auto res = *this;
		n -= d;
		return res;
	}
#define OP(c)\
bool operator c(const field_of_fraction &x) const{\
	return n * x.d c x.n * d;\
}
OP(==) OP(!=) OP(<) OP(<=) OP(>) OP(>=)
#undef OP
#define OP(c)\
bool operator c(const T &x) const{\
	return n c d * x;\
}
OP(==) OP(!=) OP(<) OP(<=) OP(>) OP(>=)
#undef OP
#define OP(c)\
friend bool operator c(const T &x, const field_of_fraction &f){\
	return f.d * x c f.n;\
}
OP(==) OP(!=) OP(<) OP(<=) OP(>) OP(>=)
#undef OP
	explicit operator double() const{
		return 1.0 * n / d;
	}
	explicit operator long double() const{
		return 1.0l * n / d;
	}
	friend double sqrt(const field_of_fraction &f){
		return sqrt((double)f);
	}
	friend long double sqrtl(const field_of_fraction &f){
		return sqrtl((long double)f);
	}
	friend field_of_fraction abs(const field_of_fraction &f){
		return f < 0 ? -f : f;
	}
};
namespace std{
	template<class T> struct numeric_limits<field_of_fraction<T>>{
		static field_of_fraction<T> min(){ return {-1, 0}; };
		static field_of_fraction<T> max(){ return {1, 0}; };
	};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>field_of_fraction</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
