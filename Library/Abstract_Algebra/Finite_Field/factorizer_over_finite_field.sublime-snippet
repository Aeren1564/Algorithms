<snippet>
	<content><![CDATA[
// Requires finite_field and power_series_naive
template<class FF>
struct factorizer_over_finite_field{
	using P = power_series_naive_base<FF, _quadratic<FF>>;
	static void _reduce_and_monicify(P &p){
		p.inplace_reduce();
		assert(p);
		FF x = p.back();
		if(x != FF{1}){
			x = 1 / x;
			for(auto &y: p) y *= x;
		}
	}
	// Given p,
	// find factorization p = \prod{f^e} where f is square-free
	static vector<pair<P, int>> factorize_square_free(P p){
		_reduce_and_monicify(p);
		if((int)p.size() == 1) return {};
		if(!p.derivative()){
			assert(((int)p.size() - 1) % FF::characteristic == 0);
			P q(((int)p.size() - 1) / FF::characteristic + 1);
			for(auto i = 0; i < (int)q.size(); ++ i) q[i] = p[FF::characteristic * i];
			auto fact = factorize_square_free(q);
			for(auto &[_, e]: fact) e *= FF::characteristic;
			return fact;
		}
		P g = gcd(p, p.derivative());
		_reduce_and_monicify(g);
		if((int)g.size() == 1) return {{p, 1}};
		auto fact_left = factorize_square_free(g);
		auto fact_right = factorize_square_free(p / g);
		fact_left.insert(fact_left.end(), fact_right.begin(), fact_right.end());
		return fact_left;
	}
	// Given square-free p,
	// find factorization p = \prod{f} where f is a product of irreducible polynomials of equal degree d
	static vector<pair<P, int>> factorize_distinct_degree(P p){
		_reduce_and_monicify(p);
		vector<pair<P, int>> res;
		for(auto i = 1; 2 * i <= (int)p.size() - 1; ++ i){
			P q{0, 1};
			for(auto j = 1; j <= i; ++ j) q.inplace_power_mod(FF::size, p);
			q -= P{0, 1};
			P g = gcd(p, q);
			_reduce_and_monicify(g);
			if((int)g.size() != 1){
				res.push_back({g, i});
				(p /= g).inplace_reduce();
			}
		}
		if((int)p.size() >= 2) res.push_back({p, (int)p.size() - 1});
		return res;
	}
	// WARNING: Success rate 1/ground_field_size for finite fields of order 2^{2k+1}
	// For fiels of order 2^{2k}, success rate is 1/3, and for odd characteristics, 1/2
	// Given square-free p which is a product of irreducible polynomials of equal degree d,
	// find factorization of it into irreducible polynomials
	static vector<P> factorize_equal_degree(int d, P p){
		assert(d >= 1);
		_reduce_and_monicify(p);
		assert(((int)p.size() - 1) % d == 0);
		if((int)p.size() == 1) return {};
		int obj = ((int)p.size() - 1) / d;
		vector<P> res{p}, res_next;
		for(mt19937 rng(1564); (int)res.size() < obj; ){
			P q((int)p.size());
			for(auto &x: q) x = FF::generate(rng);
			P g = gcd(p, q);
			_reduce_and_monicify(g);
			if((int)g.size() == 1){
				if(FF::characteristic >= 3){
					P base = q.power_mod((FF::size - 1) / 2, p);
					g = base;
					for(auto i = 0; i < d - 1; ++ i) (g = g.power_mod(FF::size, p) * base % p).inplace_reduce();
					++ g;
				}
				else{
					if(FF::dimension % 2 == 0){
						P base = q.power_mod((FF::size - 1) / 3, p);
						g = base;
						for(auto i = 0; i < d - 1; ++ i) (g = g.power_mod(FF::size, p) * base % p).inplace_reduce();
						++ g;
					}
					else{
						// TODO: Success rate for this part is 1/field_size
						// Improve it to 1/3 by factorizing over quadratic extension and merging conjugates
						g = q;
						for(auto i = 0; i < d - 1; ++ i) g = q + g.power_mod(FF::size, p);
						(g %= p).inplace_reduce();
					}
				}
			}
			res_next.clear();
			for(auto p: res){
				_reduce_and_monicify(p);
				if((int)p.size() == d + 1){
					res_next.push_back(p);
					continue;
				}
				P h = gcd(g, p);
				if((int)h.size() == 1 || (int)h.size() == (int)p.size()){
					res_next.push_back(p);
					continue;
				}
				_reduce_and_monicify(h);
				res_next.insert(res_next.end(), {h, p / h});
			}
			swap(res, res_next);
		}
		return res;
	}
	static vector<pair<P, int>> factorize(P p){
		_reduce_and_monicify(p);
		vector<pair<P, int>> res;
		auto fact_square_free = factorize_square_free(p);
		for(auto [f0, e]: fact_square_free){
			auto fact_distinct_degree = factorize_distinct_degree(f0);
			for(auto &[f1, d]: fact_distinct_degree){
				auto fact_equal_degree = factorize_equal_degree(d, f1);
				for(auto &f2: fact_equal_degree) res.push_back({f2, e});
			}
		}
		sort(res.begin(), res.end());
		auto temp = res;
		res.clear();
		for(auto [f, e]: temp){
			_reduce_and_monicify(f);
			if(res.empty() || res.back().first != f) res.push_back({f, e});
			else res.back().second += e;
		}
		return res;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>factorizer_over_finite_field</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
