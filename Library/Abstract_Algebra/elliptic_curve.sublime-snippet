<snippet>
	<content><![CDATA[
template<class T>
struct elliptic_curve{
	static bool setup_flag;
	// Y^2 = X^3 + aX + b
	// Assumes that the characteristic of the field T is not 2 or 3.
	static T a, b;
	static void setup(T _a, T _b){
		setup_flag = true;
		a = _a, b = _b;
		assert(T{4} * a * a * a + T{27} * b * b != T{0});
	}
	static optional<elliptic_curve> make(T x = 0, T y = 1, T z = 0){
		assert(setup_flag);
		if((z == T{0} && (x != T{0} || y == T{0})) || x * x * x + z * (-y * y + z * (a * x + z * b)) != T{0}) return {};
		if(z < T{0}) x = -x, y = -y, z = -z;
		return elliptic_curve{x, y, z};
	}
	static optional<elliptic_curve> make(const array<T, 3> &a = {0, 1, 0}){
		return make(a[0], a[1], a[2]);
	}
	// Assumes T is of modular type
	template<class U>
	static elliptic_curve sample(auto &&rng, U low, U high, auto optional_sqrt){
		assert(setup_flag);
		assert(low < high);
		uniform_int_distribution<U> rint(low, high - 1);
		while(true){
			T x = rint(rng);
			if(auto yptr = optional_sqrt(x * x * x + a * x + b)){
				T y = *yptr;
				if(y == 0){
					if(rng() & 1) return elliptic_curve();
					else return elliptic_curve(x, y, 1);
				}
				else return elliptic_curve(x, y * (rng() & 1 ? 1 : -1), 1);
			}
		}
	}
	T x = 0, y = 1, z = 0;
	elliptic_curve(){ assert(setup_flag); }
private:
	// use elliptic_curve<T>::make instead to construct a point
	elliptic_curve(T x, T y, T z): x(x), y(y), z(z){ }
public:
	elliptic_curve &reduce(){
		if(z == T{0}) return *this = elliptic_curve();
		else return *this = elliptic_curve{x / z, y / z, T{1}};
	}
	elliptic_curve reduced() const{
		return elliptic_curve(*this).reduce();
	}
	friend ostream &operator<<(ostream &out, const elliptic_curve &p){
		return out << "{" << p.x << ", " << p.y << ", " << p.z << "}";
	}
	operator bool() const{
		return z != T{0};
	}
	bool operator==(const elliptic_curve &p) const{
		return x * p.z == p.x * z && y * p.z == p.y * z;
	}
	elliptic_curve &double_up(){
		if(!*this) return *this;
		T t = T{3} * x * x + a * z * z, u = T{2} * y * z;
		T v = T{2} * u * x * y, w = t * t - T{2} * v;
		return *this = {u * w, t * (v - w) - 2 * u * u * y * y, u * u * u};
	}
	elliptic_curve doubled_up() const{
		return elliptic_curve(*this).double_up();
	}
	// source: https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates
	elliptic_curve &operator+=(const elliptic_curve &p){
		if(!p) return *this;
		if(!*this) return *this = p;
		T u0 = x * p.z, u1 = p.x * z, t0 = y * p.z, t1 = p.y * z;
		if(u0 == u1){
			if(t0 + t1 == T{0}) return *this = {};
			return double_up();
		}
		else{
			T t = t0 - t1, u = u0 - u1;
			T u2 = u * u, v = z * p.z, w = t * t * v - u2 * (u0 + u1), u3 = u * u2;
			return *this = {u * w, t * (u0 * u2 - w) - t0 * u3, u3 * v};
		}
	}
	elliptic_curve &operator-=(const elliptic_curve &p){
		return *this += -p;
	}
	template<class U> elliptic_curve &operator*=(U e){
		if(e < 0){
			*this = -*this;
			e = -e;
		}
		elliptic_curve res{};
		for(; e; e >>= 1, this->double_up()) if(e & 1) res += *this;
		return *this = res;
	}
	bool operator!=(const elliptic_curve &p) const{
		return !(*this == p);
	}
	bool operator<(const elliptic_curve &p) const{
		if(z == T{0}) return false;
		if(p.z == T{0}) return true;
		auto a = x / z, b = p.x / p.z;
		return a != b ? a < b : y / z < p.y / p.z;
	}
	elliptic_curve operator+(const elliptic_curve &p) const{
		return elliptic_curve(*this) += p;
	}
	elliptic_curve operator+() const{
		return *this;
	}
	elliptic_curve operator-(const elliptic_curve &p) const{
		return elliptic_curve(*this) -= p;
	}
	elliptic_curve operator-() const{
		return {x, -y, z};
	}
	template<class U> elliptic_curve operator*(U e) const{
		return elliptic_curve(*this) *= e;
	}
	template<class U> friend elliptic_curve operator*(U e, const elliptic_curve &p){
		return elliptic_curve(p) *= e;
	}
};
template<class T> bool elliptic_curve<T>::setup_flag = false;
template<class T> T elliptic_curve<T>::a;
template<class T> T elliptic_curve<T>::b;

using EC = elliptic_curve<modular>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>elliptic_curve</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>