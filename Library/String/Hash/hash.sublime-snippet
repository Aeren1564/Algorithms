<snippet>
	<content><![CDATA[
// Requires modular
template<class modular_t, class len_t, bool ALLOW_BINEXP>
struct hash_base{
#ifdef LOCAL
	#define ASSERT(c) assert(c)
#else
	#define ASSERT(c) 42
#endif
	static modular_t _base, _inv_base;
	template<class T = int>
	static void setup(T base = 0){
		if constexpr(modular_t::VARIATE_MOD_FLAG) modular_t::setup((unsigned long long)1e18 + 9);
		if(!base) base = mt19937(chrono::high_resolution_clock::now().time_since_epoch().count())() % 100'000'000 + 100'000'000;
		_base = base, _inv_base = modular_t(1) / base;
	}
	static vector<modular_t> _power, _inv_power;
	static void setup_power(size_t len){
		if(_power.empty()) _power.push_back(1), _inv_power.push_back(1);
		while((int)_power.size() <= len){
			_power.push_back(_power.back() * _base);
			_inv_power.push_back(_inv_power.back() * _inv_base);
		}
	}
	static modular_t power(len_t e){
		assert(e >= 0);
		if constexpr(ALLOW_BINEXP) return e < (int)_power.size() ? _power[e] : _base.power(e);
		else{
			if((int)_power.size() <= e) setup_power(e);
			return _power[e];
		}
	}
	static modular_t inv_power(len_t e){
		assert(e >= 0);
		if constexpr(ALLOW_BINEXP) return e < (int)_inv_power.size() ? _inv_power[e] : _inv_base.power(e);
		else{
			if((int)_power.size() <= e) setup_power(e);
			return _inv_power[e];
		}
	}
	hash_base(){ ASSERT(_base >= 1); }
	hash_base(const modular_t &x, len_t len): data(x), len(len){ ASSERT(_base >= 1); }
	template<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>
	hash_base(T x): data(x), len(1){ ASSERT(_base >= 1); }
	template<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>
	hash_base(const vector<T> &s){
		ASSERT(_base >= 1);
		for(auto c: s) *this += hash_base(c);
	}
	hash_base(const string &s){
		ASSERT(_base >= 1);
		for(auto c: s) *this += hash_base(c);
	}
	hash_base &operator=(const hash_base &x){
		data = x.data, len = x.len;
		return *this;
	}
	hash_base &operator+=(const hash_base &x){
		data = power(x.len) * data + x.data;
		len += x.len;
		return *this;
	}
	hash_base operator+(const hash_base &x) const{ return hash_base(*this) += x; }
	hash_base &inplace_append_right(const hash_base &x){ return *this += x; }
	hash_base append_right(const hash_base &x) const{ return hash_base(*this).inplace_append_right(x); }
	hash_base &inplace_append_left(const hash_base &x){
		data += power(len) * x.data;
		len += x.len;
		return *this;
	}
	hash_base append_left(const hash_base &x) const{ return hash_base(*this).inplace_append_left(x); }
	hash_base &inplace_pop_right(const hash_base &x){
		assert(len >= x.len);
		data = inv_power(x.len) * (data - x.data);
		len -= x.len;
		return *this;
	}
	hash_base pop_right(const hash_base &x) const{ return hash_base(*this).inplace_pop_right(x); }
	hash_base &inplace_pop_left(const hash_base &x){
		assert(len >= x.len);
		data -= power(len - x.len) * x.data;
		len -= x.len;
		return *this;
	}
	hash_base pop_left(const hash_base &x) const{ return hash_base(*this).inplace_pop_left(x); }
	template<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>
	hash_base &inplace_update(len_t pos, T x){
		assert(0 <= pos && pos < len);
		data += power(len - pos - 1) * x;
		return *this;
	}
	template<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>
	hash_base update(len_t pos, T x) const{ return hash_base(*this).inplace_update(pos, x); }
	hash_base &inplace_update(len_t pos, const hash_base &x){
		assert(0 <= pos && pos + x.len <= len);
		data += power(len - pos - x.len) * x.data;
		return *this;
	}
	hash_base update(len_t pos, const hash_base &x) const{ return hash_base(*this).inplace_update(pos, x); }
#define COMPARE_OP(op)\
bool operator op(const hash_base &x) const{ return data op x.data; }
	COMPARE_OP(==) COMPARE_OP(!=) COMPARE_OP(<) COMPARE_OP(<=) COMPARE_OP(>) COMPARE_OP(>=)
#undef COMPARE_OP
	template<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>
	hash_base &operator*=(T x){
		assert(x >= 0);
		if(x == 0) return *this = {};
		if(x == 1) return *this;
		hash_base res{};
		for(auto e = x; e; e >>= 1){
			if(e & 1) res += *this;
			*this += *this;
		}
		return *this = res;
	}
	template<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>
	hash_base operator*(T x) const{ return hash_base(*this) *= x; }
	template<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>
	friend hash_base operator*(T x, const hash_base &h){ return hash_base(h) *= x; }
	friend ostream &operator<<(ostream &out, const hash_base &x){ return out << "{" << x.data << ", " << x.len << "}"; }
	modular_t data = 0;
	len_t len = 0;
#undef ASSERT
};
template<class modular_t, class len_t, bool ALLOW_BINEXP> modular_t hash_base<modular_t, len_t, ALLOW_BINEXP>::_base;
template<class modular_t, class len_t, bool ALLOW_BINEXP> modular_t hash_base<modular_t, len_t, ALLOW_BINEXP>::_inv_base;
template<class modular_t, class len_t, bool ALLOW_BINEXP> vector<modular_t> hash_base<modular_t, len_t, ALLOW_BINEXP>::_power{1};
template<class modular_t, class len_t, bool ALLOW_BINEXP> vector<modular_t> hash_base<modular_t, len_t, ALLOW_BINEXP>::_inv_power{1};

using hash_t = hash_base<modular_fixed_base<unsigned long long, (unsigned long long)1e18 + 9>, int, false>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hash</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
