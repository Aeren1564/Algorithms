<snippet>
	<content><![CDATA[
// Returns the number of distinct non-empty common substrings
// O(m)
// Requires suffix_automaton
template<class Char_Type, class Adjacency_Type>
long long count_common_substrings(const suffix_automaton<Char_Type, Adjacency_Type> &aut_s, const vector<Char_Type> &t, const suffix_automaton<Char_Type, Adjacency_Type> &aut_t){
	int m = (int)aut_t.size();
	static vector<int> req;
	req.assign(m, 0);
	int u = 0, v = 0, len = 0;
	for(auto c: t){
		while(u && !aut_s.next[u][c]){
			u = aut_s.link[u];
			len = aut_s.len[u];
			while(v && aut_t.max_len[aut_t.link[v]] >= len) v = aut_t.link[v];
		}
		if(aut_s.next[u][c]){
			u = aut_s.next[u][c];
			++ len;
			v = aut_t.next[v][c];
		}
		req[v] = max(req[v], len);
	}
	long long res = 0;
	for(auto t = m - 1; t > 0; -- t){
		int u = aut_t.order[t];
		if(req[u]){
			int v = aut_t.link[u];
			res += req[u] - aut_t.max_len[v];
			req[v] = max(req[v], aut_t.max_len[v]);
		}
	}
	req.clear();
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>count_common_substrings</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
