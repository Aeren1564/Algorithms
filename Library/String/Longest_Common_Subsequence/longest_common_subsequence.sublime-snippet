<snippet>
	<content><![CDATA[
// Hirschburg's space optimization of LCS dp
// O(n m / w) time (with about twice the constant factor)
// O(n + m + Lim * m / w) space
// Requires longest_common_subsequence_lengths
template<class Char_Type, int Lim>
vector<Char_Type> longest_common_subsequence(const vector<Char_Type> &s, const vector<Char_Type> &t){
	if(s.empty() || t.empty()) return {};
	int n = (int)s.size(), m = (int)t.size();
	vector<Char_Type> res;
	auto solve = [&](auto self, int il, int ir, int jl, int jr){
		if(jr - jl == 1){
			for(auto p = il; p < ir; ++ p) if(s[p] == t[jl]){
				res.push_back(s[p]);
				return;
			}
			return;
		}
		int jm = jl + (jr - jl >> 1);
		auto dp_left = longest_common_subsequence_lengths<Char_Type, Lim>({s.begin() + il, s.begin() + ir}, {t.begin() + jl, t.begin() + jm});
		auto dp_right = longest_common_subsequence_lengths<Char_Type, Lim>({s.rend() - ir, s.rend() - il}, {t.rend() - jr, t.rend() - jm});
		array<int, 2> pos{dp_left[0] + dp_right[ir - il], 0};
		for(auto l = 1; l <= ir - il; ++ l) pos = max(pos, array{dp_left[l] + dp_right[ir - il - l], l});
		int im = pos[1] + il;
		self(self, il, im, jl, jm), self(self, im, ir, jm, jr);
	};
	solve(solve, 0, n, 0, m);
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>longest_common_subsequence</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
