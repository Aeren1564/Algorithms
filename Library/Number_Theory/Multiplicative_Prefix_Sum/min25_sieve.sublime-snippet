<snippet>
	<content><![CDATA[
// f is a multiplicative function satisfying
// 0. f(1) = 1
// 1. f(p) = coef[0] + coef[1] * p + ... + coef[deg - 1] * p^(deg - 1) and
// 2. f(p^e) = eval(p, e)
// for prime p and integer e >= 1
template<class T, class F1>
struct min25_sieve{
	long long n_th;
	vector<T> coef;
	F1 eval;
	vector<int> prime;
	min25_sieve(long long n_th, const vector<T> &coef, F1 eval): n_th(n_th), coef(coef), eval(eval){
		assert(0 <= n_th && n_th <= 1e15);
		int sq = sqrtl(n_th);
		prime = {2, 3};
		vector<bool> is_prime(sq + 1, true);
		for(auto p = 5, delta = 2; p <= sq; p += delta, delta = 6 - delta) if(is_prime[p]){
			prime.push_back(p);
			for(auto q = 3 * p; q <= sq; q += 2 * p) is_prime[q] = false;
		}
	}
	template<class U, class V>
	long long _div(U x, V y){ return double(x) / y; }
	// Returns 0^d + ... + (base-1)^d
	// O(d * log(d) + inverse_in_T())
	T _power_sum(long long base, int d){
		assert(d >= 0);
		static vector<T> value, pref, suff;
		value.resize(d + 2), pref.resize(d + 3, 1), suff.resize(d + 3, 1);
		for(auto x = 0; x <= d; ++ x){
			T temp = x;
			value[x + 1] = 1;
			for(auto e = d; e; e >>= 1, temp *= temp) if(e & 1) value[x + 1] *= temp;
			value[x + 1] += value[x];
			pref[x + 1] = pref[x] * (base - x) / (x + 1);
		}
		for(auto x = d + 1; x >= 1; -- x) suff[x] = suff[x + 1] * (base - x) / (d + 2 - x);
		T res = 0;
		for(auto x = 0; x <= d + 1; ++ x) res += value[x] * pref[x] * suff[x + 1] * (d + 1 - x & 1 ? -1 : 1);
		return res;
	}
	// list of floor(n/k) at all distinct value of floor(n/k) in increasing order of k
	vector<long long> block;
	int cut, prime_th, nb;
	void _prepare(long long n){
		prime_th = partition_point(prime.begin(), prime.end(), [&](int p){ return 1LL * p * p <= n; }) - prime.begin();
		cut = sqrtl(n);
		block.clear();
		block.reserve(2 * cut + 2);
		for(auto low = 1LL, high = 0LL; low <= n; low = high + 1){
			long long q = n / low;
			high = n / q;
			block.push_back(q);
		}
		nb = (int)block.size();
	}
	vector<T> s, res;
	// Returns the sum of f(p) for prime p <= block[i] for each block index i
	// O(n^3/4 / log(n))
	const vector<T> &query_block_prime_prefix_sum(long long n){
		assert(1 <= n && n <= n_th);
		_prepare(n);
		res.assign(nb, T{0});
		if(coef.empty()) return res;
		s.resize(nb);
		if(coef[0]){
			for(auto i = 0; i < nb; ++ i) s[i] = block[i] - 1;
			T prime_power_prefix = 0;
			for(auto j = 0; j < prime_th; ++ j){
				int p = prime[j];
				long long sqp = 1LL * p * p;
				int imax = min<long long>(cut, _div(n, sqp));
				long long ip = p;
				for(auto i = 0; i < imax; ++ i, ip += p) s[i] -= (ip <= cut ? s[ip - 1] : s[nb - _div(n, ip)]) - prime_power_prefix;
				for(auto i = imax; i < nb && block[i] >= sqp; ++ i) s[i] -= s[nb - _div(block[i], p)] - prime_power_prefix;
				++ prime_power_prefix;
			}
			for(auto i = 0; i < nb; ++ i) res[i] += coef[0] * s[i];
		}
		vector<T> prime_power(prime.begin(), prime.begin() + prime_th);
		for(auto d = 1; d < (int)coef.size(); ++ d){
			if(coef[d]){
				if(d == 1){
					T inv = T{1} / 2;
					for(auto i = 0; i < cut; ++ i){
						T x = block[i];
						s[i] = x * (x + 1) * inv - 1;
					}
					for(auto i = nb - 2; i >= cut; -- i) s[i] = s[i + 1] + (nb - i);
				}
				else for(auto i = 0; i < nb; ++ i) s[i] = _power_sum(block[i] + 1, d) - (d == 0 ? T{2} : T{1});
				T prime_power_prefix = 0;
				for(auto j = 0; j < prime_th; ++ j){
					int p = prime[j];
					long long sqp = 1LL * p * p;
					int imax = min<long long>(cut, _div(n, sqp));
					long long ip = p;
					for(auto i = 0; i < imax; ++ i, ip += p) s[i] -= prime_power[j] * (s[ip <= cut ? ip - 1 : nb - _div(n, ip)] - prime_power_prefix);
					for(auto i = imax; i < nb && block[i] >= sqp; ++ i) s[i] -= prime_power[j] * (s[nb - _div(block[i], p)] - prime_power_prefix);
					prime_power_prefix += prime_power[j];
				}
				for(auto i = 0; i < nb; ++ i) res[i] += coef[d] * s[i];
			}
			if(d + 1 < (int)coef.size()) for(auto i = 0; i < (int)prime_power.size(); ++ i) prime_power[i] *= prime[i];
		}
		return res;
	}
	// Returns the sum of f(x) for 1 <= x <= block[i] for each block index i
	// Unsure about complexity
	const vector<T> &query_block_prefix_sum(long long n){
		assert(1 <= n && n <= n_th);
		query_block_prime_prefix_sum(n);
		s = res;
		for(auto j = prime_th - 1; j >= 0; -- j){
			int p = prime[j];
			long long sqp = 1LL * p * p;
			for(auto i = 0; i < nb && block[i] >= sqp; ++ i){
				long long x = block[i];
				for(auto c = 2; p <= (x = _div(x, p)); ++ c) res[i] += eval(p, c - 1) * (res[x <= cut ? nb - x : _div(n, x) - 1] - s[nb - p]) + eval(p, c);
			}
		}
		for(auto &x: res) ++ x;
		return res;
	}
	long long _n;
	// _dfs returns the sum of integer x > prod, such that
	// 1. v_prime[j](x) = v_prime[j](prod) for all 0 <= j < i and
	// 2. v_prime[i](x) >= c
	// largest prime factor of prod is always prime[i]
	// v_prime[i](prod) is always c
	// cur is always f(prod / prime[i]^c)
	// \omega(n^(1-eps)) for all eps>0, and o(n)
	T _dfs(int i, int c, long long prod, T cur){
		T ans = cur * eval(prime[i], c + 1);
		long long th = _div(_n, prod);
		if(th >= 1LL * prime[i] * prime[i]) ans += _dfs(i, c + 1, prod * prime[i], cur);
		ans += (cur *= eval(prime[i], c)) * (res[th <= cut ? nb - th : prod - 1] - res[prime[i] <= cut ? nb - prime[i] : _div(_n, prime[i]) - 1]);
		for(++ i; i < prime_th && prime[i] < 1 << 21 && 1LL * prime[i] * prime[i] * prime[i] <= th; ++ i) ans += _dfs(i, 1, prod * prime[i], cur);
		for(; i < prime_th && 1LL * prime[i] * prime[i] <= th; ++ i){
			long long x = _div(th, prime[i]);
			ans += cur * (eval(prime[i], 2) + eval(prime[i], 1) * (res[x <= cut ? nb - x : prod * prime[i] - 1] - res[nb - prime[i]]));
		}
		return ans;
	}
	// Returns the sum of f(x) for 1 <= x <= n
	// \omega(n^(1-eps)) for all eps>0, and o(n)
	T query_prefix_sum(long long n){
		assert(1 <= n && n <= n_th);
		query_block_prime_prefix_sum(n);
		T ans = res[0] + 1;
		_n = n;
		for(auto i = 0; i < prime_th; ++ i) ans += _dfs(i, 1, prime[i], T{1});
		return ans;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>min25_sieve</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
