<snippet>
	<content><![CDATA[
// either p = 2 or p must be a prime congruent to 1 mod 4
// T must be able to hold the square of p
// Return two positive integers a, b with p=a^2+b^2
// O(log(p))
template<class T>
array<T, 2> solve_fermat_two_square(T p){
	assert(p == 2 || p >= 5 && p % 4 == 1);
	if(p == 2) return {1, 1};
	using ull = unsigned long long;
	auto mod_mul = [&](ull a, ull b, ull M)->ull{
		long long res = a * b - M * ull(1.L / M * a * b);
		return res + M * (res < 0) - M * (res >= (long long)M);
	};
	auto mod_pow = [&](ull b, ull e, ull mod)->ull{
		ull res = 1;
		for(; e; b = mod_mul(b, b, mod), e >>= 1) if(e & 1) res = mod_mul(res, b, mod);
		return res;
	};
	auto is_prime = [&](ull n){
		if(n < 2 || n % 6 % 4 != 1) return (n | 1) == 3;
		ull s = __builtin_ctzll(n - 1), d = n >> s;
		for(ull a: {2, 325, 9375, 28178, 450775, 9780504, 1795265022}){
			ull p = mod_pow(a, d, n), i = s;
			while(p != 1 && p != n - 1 && a % n && i --) p = mod_mul(p, p, n);
			if(p != n - 1 && i != s) return false;
		}
		return true;
	};
	assert(is_prime(p));
	mt19937 rng(0);
	T im;
	while(true){
		T x = rng() % (p - 1) + 1;
		if(mod_pow(x, (p - 1) / 2, p) == p - 1){
			im = mod_pow(x, (p - 1) / 4, p);
			if(2 * im > p) im = p - im;
			break;
		}
	}
	assert(im * im % p == p - 1);
	T a = im, b = 1, c = p, d = 0, e, f, norm;
	while(c != 0 || d != 0){
		norm = c * c + d * d;
		e = (a * c + b * d + norm / 2) / norm - (2 * ((a * c + b * d) - norm * e) <= -norm);
		f = (b * c - a * d + norm / 2) / norm - (2 * ((b * c - a * d) - norm * f) <= -norm);
		tie(a, b, c, d) = tuple{c, d, a - (c * e - d * f), b - (c * f + d * e)};
	}
	assert(a * a + b * b == p);
	return {a >= 0 ? a : -a, b >= 0 ? b : -b};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>solve_fermat_two_square</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
