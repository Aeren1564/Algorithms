<snippet>
	<content><![CDATA[
template<class data_t, data_t _mod, class wider_data_t>
struct montgomery_modular_fixed_base{
#define IS_INTEGRAL(T) (is_integral_v<T> || is_same_v<T, __int128_t> || is_same_v<T, __uint128_t>)
#define IS_UNSIGNED(T) (is_unsigned_v<T> || is_same_v<T, __uint128_t>)
	static_assert(IS_UNSIGNED(data_t) && IS_UNSIGNED(wider_data_t));
	static_assert(sizeof(wider_data_t) == 2 * sizeof(data_t));
	static_assert(1 <= _mod && _mod < data_t(1) << 8 * sizeof(data_t) - 1);
	static_assert(_mod % 2 == 1);
	static constexpr bool VARIATE_MOD_FLAG = false;
	static constexpr data_t mod(){
		return _mod;
	}
	static constexpr data_t _get_r(){
		data_t ret = _mod;
		for(auto i = 0; i < 4; ++ i) ret *= 2 - _mod * ret;
		return ret;
	}
	static constexpr data_t _r = _get_r();
	static constexpr data_t _n2 = -wider_data_t(_mod) % _mod;
	static_assert(_r * _mod == 1);
	static constexpr data_t _reduce(const wider_data_t &x){
		return (x + wider_data_t(data_t(x) * data_t(-_r)) * _mod) >> 8 * sizeof(data_t);
	}
	template<class T>
	static vector<montgomery_modular_fixed_base> precalc_power(T base, int SZ){
		vector<montgomery_modular_fixed_base> res(SZ + 1, 1);
		for(auto i = 1; i <= SZ; ++ i) res[i] = res[i - 1] * base;
		return res;
	}
	template<class T>
	static vector<montgomery_modular_fixed_base> precalc_geometric_sum(T base, int SZ){
		vector<montgomery_modular_fixed_base> res(SZ + 1);
		for(auto i = 1; i <= SZ; ++ i) res[i] = res[i - 1] * base + base;
		return res;
	}
	static vector<montgomery_modular_fixed_base> _INV;
	static void precalc_inverse(int SZ){
		if(_INV.empty()) _INV.assign(2, 1);
		for(auto x = _INV.size(); x <= SZ; ++ x) _INV.push_back(_mod / x * -_INV[_mod % x]);
	}
	// _mod must be a prime
	static montgomery_modular_fixed_base _primitive_root;
	static montgomery_modular_fixed_base primitive_root(){
		if(_primitive_root) return _primitive_root;
		if(_mod == 998244353) return _primitive_root = 3;
		data_t divs[20] = {};
		divs[0] = 2;
		int cnt = 1;
		data_t x = (_mod - 1) / 2;
		while(x % 2 == 0) x /= 2;
		for(auto i = 3; 1LL * i * i <= x; i += 2){
			if(x % i == 0){
				divs[cnt ++] = i;
				while(x % i == 0) x /= i;
			}
		}
		if(x > 1) divs[cnt ++] = x;
		for(auto g = 2; ; ++ g){
			bool ok = true;
			for(auto i = 0; i < cnt; ++ i){
				if(montgomery_modular_fixed_base(g).power((_mod - 1) / divs[i]) == 1){
					ok = false;
					break;
				}
			}
			if(ok) return _primitive_root = g;
		}
	}
	constexpr montgomery_modular_fixed_base(){ }
	constexpr montgomery_modular_fixed_base(const double &x): montgomery_modular_fixed_base(llround(x)){ }
	constexpr montgomery_modular_fixed_base(const long double &x): montgomery_modular_fixed_base(llround(x)){ }
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>
	constexpr montgomery_modular_fixed_base(const T &x){
		if constexpr(sizeof(T) <= sizeof(data_t)) _data = _reduce(wider_data_t(make_signed_t<wider_data_t>{x} % _mod + _mod) * _n2);
		else _data = _reduce(wider_data_t(x % _mod + _mod) * _n2);
	}
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr> constexpr operator T() const{ return data(); }
	constexpr montgomery_modular_fixed_base &operator+=(const montgomery_modular_fixed_base &otr){ if(make_signed_t<data_t>(_data += otr._data - 2 * _mod) < 0) _data += 2 * _mod; return *this; }
	constexpr montgomery_modular_fixed_base &operator-=(const montgomery_modular_fixed_base &otr){ if(make_signed_t<data_t>(_data -= otr._data) < 0) _data += 2 * _mod; return *this; }
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr> constexpr montgomery_modular_fixed_base &operator+=(const T &otr){ return *this += montgomery_modular_fixed_base(otr); }
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr> constexpr montgomery_modular_fixed_base &operator-=(const T &otr){ return *this -= montgomery_modular_fixed_base(otr); }
	constexpr montgomery_modular_fixed_base &operator++(){ return *this += 1; }
	constexpr montgomery_modular_fixed_base &operator--(){ return *this += _mod - 1; }
	constexpr montgomery_modular_fixed_base operator++(int){ montgomery_modular_fixed_base result(*this); *this += 1; return result; }
	constexpr montgomery_modular_fixed_base operator--(int){ montgomery_modular_fixed_base result(*this); *this += _mod - 1; return result; }
	constexpr montgomery_modular_fixed_base operator-() const{ return montgomery_modular_fixed_base{} - *this; }
	constexpr montgomery_modular_fixed_base &operator*=(const montgomery_modular_fixed_base &rhs){
		_data = _reduce(wider_data_t(_data) * rhs._data);
		return *this;
	}
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>
	constexpr montgomery_modular_fixed_base &inplace_power(T e){
		if(e == 0) return *this = 1;
		if(data() == 0) return *this = {};
		if(data() == 1 || e == 1) return *this;
		if(data() == mod() - 1) return e % 2 ? *this : *this = -*this;
		if(e < 0) *this = 1 / *this, e = -e;
		if(e == 1) return *this;
		montgomery_modular_fixed_base res = 1;
		for(; e; *this *= *this, e >>= 1) if(e & 1) res *= *this;
		return *this = res;
	}
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>
	constexpr montgomery_modular_fixed_base power(T e) const{
		return montgomery_modular_fixed_base(*this).inplace_power(e);
	}
	// c + c * x + ... + c * x^{e-1}
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>
	constexpr montgomery_modular_fixed_base &inplace_geometric_sum(T e, montgomery_modular_fixed_base c = 1){
		if(e == 0) return *this = {};
		if(*this == 0) return *this = {};
		if(*this == 1) return *this = c * e;
		if(e == 1) return *this = c;
		if(*this == mod() - 1) return *this = c * abs(e % 2);
		montgomery_modular_fixed_base res = 0;
		if(e < 0) return *this = geometric_sum(-e + 1, -*this) - 1;
		if(e == 1) return *this = c * *this;
		for(; e; c *= 1 + *this, *this *= *this, e >>= 1) if(e & 1) res += c, c *= *this;
		return *this = res;
	}
	// c + c * x + ... + c * x^{e-1}
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>
	constexpr montgomery_modular_fixed_base geometric_sum(T e, montgomery_modular_fixed_base c = 1) const{
		return montgomery_modular_fixed_base(*this).inplace_geometric_sum(e, c);
	}
	// Returns the minimum integer e>0 with b^e=*this, if it exists
	// O(sqrt(mod)) applications of hashmap
	constexpr optional<data_t> log(const montgomery_modular_fixed_base &b) const{
		data_t m = mod(), n = sqrtl(m) + 1, j = 1;
		montgomery_modular_fixed_base e = 1, f = 1;
		unordered_map<data_t, data_t> A;
		while(j <= n && (f = e *= b) != *this) A[(e * *this).data()] = j ++;
		if(e == *this) return j;
		if(gcd(mod(), e.data()) == gcd(mod(), data())) for(auto i = 2; i < n + 2; ++ i) if(A.count((e *= f).data())) return n * i - A[e.data()];
		return {};
	}
	constexpr optional<montgomery_modular_fixed_base> inverse() const{
		make_signed_t<data_t> a = data(), m = _mod, u = 0, v = 1;
		if(a < _INV.size()) return _INV[a];
		while(a){
			make_signed_t<data_t> t = m / a;
			m -= t * a; swap(a, m);
			u -= t * v; swap(u, v);
		}
		if(m != 1) return {};
		return montgomery_modular_fixed_base{u};
	}
	constexpr montgomery_modular_fixed_base &operator/=(const montgomery_modular_fixed_base &otr){
		return *this = *this * *otr.inverse();
	}
#define ARITHMETIC_OP(op, apply_op)\
constexpr montgomery_modular_fixed_base operator op(const montgomery_modular_fixed_base &x) const{ return montgomery_modular_fixed_base(*this) apply_op x; }\
template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>\
constexpr montgomery_modular_fixed_base operator op(const T &x) const{ return montgomery_modular_fixed_base(*this) apply_op montgomery_modular_fixed_base(x); }\
template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>\
constexpr friend montgomery_modular_fixed_base operator op(const T &x, const montgomery_modular_fixed_base &y){ return montgomery_modular_fixed_base(x) apply_op y; }
	ARITHMETIC_OP(+, +=) ARITHMETIC_OP(-, -=) ARITHMETIC_OP(*, *=) ARITHMETIC_OP(/, /=)
#undef ARITHMETIC_OP
#define COMPARE_OP(op)\
constexpr bool operator op(const montgomery_modular_fixed_base &x) const{ return data() op x.data(); }\
template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>\
constexpr bool operator op(const T &x) const{ return data() op montgomery_modular_fixed_base(x).data(); }\
template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>\
constexpr friend bool operator op(const T &x, const montgomery_modular_fixed_base &y){ return montgomery_modular_fixed_base(x).data() op y.data(); }
	COMPARE_OP(==) COMPARE_OP(!=) COMPARE_OP(<) COMPARE_OP(<=) COMPARE_OP(>) COMPARE_OP(>=)
#undef COMPARE_OP
	friend istream &operator>>(istream &in, montgomery_modular_fixed_base &number){
		long long x;
		in >> x;
		number = montgomery_modular_fixed_base{x};
		return in;
	}
	friend ostream &operator<<(ostream &out, const montgomery_modular_fixed_base &number){
		out << number.data();
#ifdef LOCAL
		cerr << "(";
		for(auto d = 1; ; ++ d){
			if((number * d).data() <= 1000000){
				cerr << (number * d).data();
				if(d != 1) cerr << "/" << d;
				break;
			}
			else if((-number * d).data() <= 1000000){
				cerr << "-" << (-number * d).data();
				if(d != 1) cerr << "/" << d;
				break;
			}
		}
		cerr << ")";
#endif
		return out;
	}
	data_t _data = 0;
	data_t data() const{
		data_t x = _reduce(_data);
		return x >= _mod ? x - _mod : x;
	}
#undef IS_INTEGRAL
#undef IS_UNSIGNED
};
template<class data_t, data_t _mod, class wider_data_t> vector<montgomery_modular_fixed_base<data_t, _mod, wider_data_t>> montgomery_modular_fixed_base<data_t, _mod, wider_data_t>::_INV;
template<class data_t, data_t _mod, class wider_data_t> montgomery_modular_fixed_base<data_t, _mod, wider_data_t> montgomery_modular_fixed_base<data_t, _mod, wider_data_t>::_primitive_root;

constexpr unsigned int mod = (119 << 23) + 1; // 998244353
// constexpr unsigned int mod = 1e9 + 7; // 1000000007
// constexpr unsigned int mod = 1e9 + 9; // 1000000009
// constexpr unsigned long long mod = (unsigned long long)1e18 + 9;
using modular = montgomery_modular_fixed_base<
	decay_t<decltype(mod)>,
	mod,
	conditional_t<
		is_same_v<decay_t<decltype(mod)>, unsigned int>,
		unsigned long long,
		conditional_t<
			std::is_same_v<decay_t<decltype(mod)>, unsigned long long>,
			__uint128_t,
			void
		>
	>
>;
constexpr modular operator""_m(const char *x){ return stoll(x); }
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>montgomery_modular_fixed</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
