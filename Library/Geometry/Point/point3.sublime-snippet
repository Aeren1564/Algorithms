<snippet>
	<content><![CDATA[
template<class T>
struct point3{
	T x{}, y{}, z{};
	point3(){ }
	template<class U> point3(const point3<U> &otr): x(otr.x), y(otr.y), z(otr.z){ }
	template<class U, class V, class W> point3(U x, V y, W z): x(x), y(y), z(z){ }
	template<class U> point3(const array<U, 3> &p): x(p[0]), y(p[1]), z(p[2]){ }
	friend istream &operator>>(istream &in, point3 &p){
		return in >> p.x >> p.y >> p.z;
	}
	friend ostream &operator<<(ostream &out, const point3 &p){
		return out << "{" << p.x << ", " << p.y << ", " << p.z << "}";
	}
	template<class U> operator array<U, 3>() const{
		return {x, y, z};
	}
	T operator*(const point3 &otr) const{
		return x * otr.x + y * otr.y + z * otr.z;
	}
	point3 operator^(const point3 &otr) const{
		return {y * otr.z - z * otr.y, z * otr.x - x * otr.z, x * otr.y - y * otr.x};
	}
	point3 operator+(const point3 &otr) const{
		return {x + otr.x, y + otr.y, z + otr.z};
	}
	point3 &operator+=(const point3 &otr){
		return *this = *this + otr;
	}
	point3 operator-(const point3 &otr) const{
		return {x - otr.x, y - otr.y, z - otr.z};
	}
	point3 &operator-=(const point3 &otr){
		return *this = *this - otr;
	}
	point3 operator-() const{
		return {-x, -y, -z};
	}
#define scalarop_l(op) friend point3 operator op(const T &c, const point3 &p){ return {c op p.x, c op p.y, c op p.z}; }
	scalarop_l(+) scalarop_l(-) scalarop_l(*) scalarop_l(/)
#define scalarop_r(op) point3 operator op(const T &c) const{ return {x op c, y op c, z op c}; }
	scalarop_r(+) scalarop_r(-) scalarop_r(*) scalarop_r(/)
#define scalarapply(applyop, op) point3 &operator applyop(const T &c){ return *this = *this op c; }
	scalarapply(+=, +) scalarapply(-=, -) scalarapply(*=, *) scalarapply(/=, /)
#define compareop(op) bool operator op(const point3 &otr) const{ return tuple(x, y, z) op tuple(otr.x, otr.y, otr.z); }
	compareop(>) compareop(<) compareop(>=) compareop(<=) compareop(==) compareop(!=)
#undef scalarop_l
#undef scalarop_r
#undef scalarapply
#undef compareop
	double norm() const{
		return sqrt(x * x + y * y + z * z);
	}
	double norm_l() const{
		return sqrtl(x * x + y * y + z * z);
	}
	T squared_norm() const{
		return x * x + y * y + z * z;
	}
	point3<double> unit() const{
		return point3<double>(x, y, z) / norm();
	}
	point3<long double> unit_l() const{
		return point3<long double>(x, y, z) / norm_l();
	}
	point3 reflect_x() const{
		return {x, -y, -z};
	}
	point3 reflect_y() const{
		return {-x, y, -z};
	}
	point3 reflect_z() const{
		return {-x, -y, z};
	}
	point3 reflect_xy() const{
		return {x, y, -z};
	}
	point3 reflect_yz() const{
		return {-x, y, z};
	}
	point3 reflect_zx() const{
		return {x, -y, z};
	}
	point3 reflect(const point3 &o = {}) const{
		return {2 * o.x - x, 2 * o.y - y, 2 * o.z - z};
	}
	bool parallel_to(const point3 &q) const{
		if constexpr(is_floating_point_v<T>) return (*this ^ q).norm() <= 1e-9;
		else return (*this ^ q).norm() == 0;
	}
};
template<class T, class U>
point3<double> lerp(const point3<T> &p, const point3<U> &q, double t){
	return point3<double>(p) * (1 - t) + point3<double>(q) * t;
}
template<class T, class U>
point3<long double> lerp_l(const point3<T> &p, const point3<U> &q, long double t){
	return point3<long double>(p) * (1 - t) + point3<long double>(q) * t;
}
template<class T>
double distance(const point3<T> &p, const point3<T> &q){
	return (p - q).norm();
}
template<class T>
long double distance_l(const point3<T> &p, const point3<T> &q){
	return (p - q).norm_l();
}
template<class T>
T squared_distance(const point3<T> &p, const point3<T> &q){
	return (p - q).squared_norm();
}
template<class T>
T quadruple_of_squared_area(const point3<T> &p, const point3<T> &q, const point3<T> &r){
	return (q - p ^ r - p).squared_norm();
}
template<class T>
T sextupled_volume(const point3<T> &p, const point3<T> &q, const point3<T> &r, const point3<T> &s){
	return (q - p) * (r - p ^ s - p);
}
template<class T>
double angle(const point3<T> &p, const point3<T> &q){
	auto a = atan2((p ^ q).norm(), p * q);
	if(a < 0) a += 2 * acos(-1);
	return a;
}
template<class T>
long double angle_l(const point3<T> &p, const point3<T> &q){
	auto a = atan2l((p ^ q).norml(), p * q);
	if(a < 0) a += 2 * acosl(-1);
	return a;
}
template<class T>
bool positively_oriented(const point3<T> &p, const point3<T> &q, const point3<T> &r, const point3<T> &s){
	return sextupled_volume(p, q, r, s) > 0;
}
template<class T>
bool negatively_oriented(const point3<T> &p, const point3<T> &q, const point3<T> &r, const point3<T> &s){
	return sextupled_volume(p, q, r, s) < 0;
}
template<class T>
bool colinear(const point3<T> &p, const point3<T> &q, const point3<T> &r){
	return (q - p ^ r - p) == point3<T>{};
}
template<class T>
bool colinear(const point3<T> &a){
	int i = 1;
	while(i < (int)a.size() && a[0] == a[i]) ++ i;
	if(i == (int)a.size()) return true;
	for(auto j = i + 1; j < (int)a.size(); ++ j) if(!colinear(a[0], a[i], a[j])) return false;
	return true;
}
template<class T>
bool coplanar(const point3<T> &p, const point3<T> &q, const point3<T> &r, const point3<T> &s){
	return sextupled_volume(p, q, r, s) == 0;
}
template<class T>
bool coplanar(const vector<point3<T>> &a){
	int i = 1;
	while(i < (int)a.size() && a[0] == a[i]) ++ i;
	if(i == (int)a.size()) return true;
	int j = i + 1;
	while(j < (int)a.size() && colinear(a[0], a[i], a[j])) ++ j;
	if(j == (int)a.size()) return true;
	for(auto k = j + 1; k < (int)a.size(); ++ k) if(!coplanar(a[0], a[i], a[j], a[k])) return false;
	return true;
}

using point3int = point3<int>;
using point3ll = point3<long long>;
using point3lll = point3<__int128_t>;
using point3d = point3<double>;
using point3ld = point3<long double>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>point3</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
