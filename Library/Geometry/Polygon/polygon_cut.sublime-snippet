<snippet>
	<content><![CDATA[
// Returns the polygon on the left of line p->q
// Requires point
template<class T>
vector<point<double>> polygon_cut(const vector<point<T>> &a, const point<T> &p, const point<T> &q){
	vector<point<double>> res;
	auto d = q - p;
	for(auto i = 0; i < (int)a.size(); ++ i){
		auto cur = a[i], prev = i ? a[i - 1] : a.back();
		bool side = doubled_signed_area(p, q, cur) > 0;
		if(side != (doubled_signed_area(p, q, prev) > 0)){
			res.push_back(point<double>(p) + 1.0 * (cur - p ^ prev - cur) / (d ^ prev - cur) * point<double>(d));
		}
		if(side) res.push_back(cur);
	}
	return res;
}
template<class T>
vector<point<long double>> polygon_cutl(const vector<point<T>> &a, const point<T> &p, const point<T> &q){
	vector<point<long double>> res;
	auto d = q - p;
	for(auto i = 0; i < (int)a.size(); ++ i){
		auto cur = a[i], prev = i ? a[i - 1] : a.back();
		bool side = doubled_signed_area(p, q, cur) > 0;
		if(side != (doubled_signed_area(p, q, prev) > 0)){
			res.push_back(point<long double>(p) + 1.0l * (cur - p ^ prev - cur) / (d ^ prev - cur) * point<long double>(d));
		}
		if(side) res.push_back(cur);
	}
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>polygon_cut</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
