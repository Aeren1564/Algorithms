<snippet>
	<content><![CDATA[
// Given a polygonal region bounded by outer polygon and a set of inner polygonal holes strictly contained in the outer polygon, where none of the polygons intersect, find all triangles in a triangulation.
// The outer polygon is given in CCW while the inner ones are in CW.
// Returns the list of triangles
// where a triangle given by the tuple {{i0, j0}, {i1, j1}, {i2, j2}} is defined by three vertices P(i0, j0), P(i1, j1), P(i2, j2) where P(i, j) is the j-th vertex of the i-th polygon (i=0 denotes the outer one).
// O(n * log(n)) where n is the total number of vertices
// Requires point
template<class T>
vector<array<array<int, 2>, 3>> triangular_decomposition(const vector<vector<point<T>>> &a){
	assert(!a.empty());
	assert(doubled_signed_area(a[0]) >= 0);
	for(auto i = 1; i < (int)a.size(); ++ i) assert(doubled_signed_area(a[i]) <= 0);
	vector<array<int, 2>> order;
	for(auto i = 0; i < (int)a.size(); ++ i) for(auto j = 0; j < (int)a[i].size(); ++ j) order.push_back({i, j});
	sort(order.begin(), order.end(), [&](auto i, auto j){ return a[i[0]][i[1]] < a[j[0]][j[1]]; });
	T sweep;
	struct key_type{ // stores the line p-q
		mutable point<T> p, q;
	};
	auto cmp = [&](const key_type &a, const key_type &b)->bool{
		auto ya = a.p.x == a.q.x ? array{max(a.p.y, a.q.y), T(1)} : array{a.p.y * (a.q.x - sweep) + a.q.y * (sweep - a.p.x), a.q.x - a.p.x};
		auto yb = b.p.x == b.q.x ? array{min(b.p.y, b.q.y), T(1)} : array{b.p.y * (b.q.x - sweep) + b.q.y * (sweep - b.p.x), b.q.x - b.p.x};
		if(ya[1] < 0) ya = {-ya[0], -ya[1]};
		if(yb[1] < 0) yb = {-yb[0], -yb[1]};
		return ya[0] * yb[1] < yb[0] * ya[1];
	};
	struct mapped_type{
		array<int, 2> endpoint, helper;
	};
	map<key_type, mapped_type, decltype(cmp)> events(cmp);
	vector<array<int, 2>> roots, id;
	vector<int> next;
	auto new_node = [&](int i, int j)->int{
		id.push_back({i, j}), next.push_back(-1);
		return (int)id.size() - 1;
	};
	// partition polygon into monotone polygons
	for(auto [i, j]: order){
		auto &b = a[i];
		sweep = b[j].x;
		int pj = (j + (int)b.size() - 1) % (int)b.size();
		int nj = (j + 1) % (int)b.size();
		if(b[j] < b[pj] && b[j] < b[nj]){
			if(doubled_signed_area(b[pj], b[j], b[nj]) > 0){ // Start
				int u = new_node(i, j), v = new_node(i, j);
				events.insert({{b[j], b[pj]}, {{u, v}, {u, -1}}});
				roots.insert(roots.end(), {u, v});
			}
			else{ // Split
				auto it = events.lower_bound({b[j], b[j]});
				int u = new_node(i, j), v = new_node(i, j);
				if(~it->second.helper[0] && ~it->second.helper[1]){
					next[it->second.helper[0]] = u;
					next[it->second.helper[1]] = v;
					events.insert({{b[j], b[pj]}, {{it->second.endpoint[0], u}, {-1, u}}});
					it->second = {{v, it->second.endpoint[1]}, {v, -1}};
				}
				else if(~it->second.helper[0]){
					int k = it->second.helper[0];
					int w1 = new_node(id[k][0], id[k][1]);
					int w2 = new_node(id[k][0], id[k][1]);
					roots.push_back({w1, w2});
					next[w2] = u;
					next[it->second.endpoint[0]] = v;
					events.insert(it, {{b[j], b[pj]}, {{w1, u}, {-1, u}}});
					it->second = {{v, it->second.endpoint[1]}, {v, -1}};
				}
				else{
					int k = it->second.helper[1];
					int w1 = new_node(id[k][0], id[k][1]);
					int w2 = new_node(id[k][0], id[k][1]);
					roots.push_back({w1, w2});
					next[w1] = v;
					next[it->second.endpoint[1]] = u;
					events.insert(it, {{b[j], b[pj]}, {{it->second.endpoint[0], u}, {-1, u}}});
					it->first.p = a[id[k][0]][id[k][1]], it->first.q = a[id[k][0]][(id[k][1] + (int)a[id[k][0]].size() - 1) % (int)a[id[k][0]].size()];
					it->second = {{v, w2}, {v, -1}};
				}
			}
		}
		else if(b[j] > b[pj] && b[j] > b[nj]){ 
			if(doubled_signed_area(b[pj], b[j], b[nj]) > 0){ // End
				auto it = events.lower_bound({b[j], b[j]});
				int u = new_node(i, j);
				for(auto v: it->second.endpoint) next[v] = u;
				for(auto v: it->second.helper) if(~v) next[v] = u;
				events.erase(it);
			}
			else{ // Merge
				auto l = events.lower_bound({b[j], b[j]}), r = std::next(l);
				int u = new_node(i, j), v = new_node(i, j);
				if(~l->second.helper[0] && ~l->second.helper[1]){
					int w = new_node(i, j);
					next[l->second.helper[0]] = u;
					next[l->second.helper[1]] = w;
					next[l->second.endpoint[1]] = w;
				}
				else next[l->second.endpoint[1]] = u;
				if(~r->second.helper[0] && ~r->second.helper[1]){
					int w = new_node(i, j);
					next[r->second.endpoint[0]] = w;
					next[r->second.helper[0]] = w;
					next[r->second.helper[1]] = v;
				}
				else next[r->second.endpoint[0]] = v;
				r->second = {{l->second.endpoint[0], r->second.endpoint[1]}, {u, v}};
				events.erase(l);
			}
		}
		else{ // Regular
			auto it = events.lower_bound({b[j], b[j]});
			int u = new_node(i, j);
			if(b[pj] < b[j]){ // Left
				if(~it->second.helper[0] && ~it->second.helper[1]){
					int v = new_node(i, j);
					next[it->second.endpoint[0]] = v;
					next[it->second.helper[0]] = v;
					next[it->second.helper[1]] = u;
				}
				else{
					next[it->second.endpoint[0]] = u;
				}
				it->second = {{u, it->second.endpoint[1]}, {u, -1}};
			}
			else{ // Right
				if(~it->second.helper[0] && ~it->second.helper[1]){
					int v = new_node(i, j);
					next[it->second.helper[0]] = u;
					next[it->second.helper[1]] = v;
					next[it->second.endpoint[1]] = v;
				}
				else{
					next[it->second.endpoint[1]] = u;
				}
				it->first.p = b[j], it->first.q = b[pj];
				it->second = {{it->second.endpoint[0], u}, {-1, u}};
			}
		}
	}
	// triangulate each monotone polygons
	vector<array<array<int, 2>, 3>> res;
	for(auto [p, q]: roots){
		bool stack_type;
		vector<array<int, 2>> stack{id[p]};
		auto push = [&](bool side, array<int, 2> i)->void{
			if((int)stack.size() == 1){
				stack.push_back(i);
				stack_type = side;
				return;
			}
			auto last = stack.back(), j = last;
			stack.pop_back();
			while(!stack.empty() && doubled_signed_area(a[stack.back()[0]][stack.back()[1]], stack_type ? a[i[0]][i[1]] : a[j[0]][j[1]], stack_type ? a[j[0]][j[1]] : a[i[0]][i[1]]) > 0){
				res.push_back({stack.back(), stack_type ? i : j, stack_type ? j : i});
				j = stack.back();
				stack.pop_back();
			}
			stack.insert(stack.end(), {side == stack_type ? j : last, i});
			stack_type = side;
		};
		p = next[p], q = next[q];
		while(p != q){
			bool side;
			array<int, 2> i;
			if(a[id[p][0]][id[p][1]] < a[id[q][0]][id[q][1]]) side = false, i = id[p], p = next[p];
			else side = true, i = id[q], q = next[q];
			push(side, i);
		}
		push(!stack_type, id[p]);
	}
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>triangular_decomposition</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
