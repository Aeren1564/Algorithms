<snippet>
	<content><![CDATA[
// For each of n items, return the first states which pred0 returns false and pred1 returns false
// Binary search state lies within [low, high)
// init(): set the state to low
// advance(): increase the state by one
// pred(i): check if item i satisfies the pred for current state (must be T, T, ..., T, F, ..., F)
// O(log(high - low)) init() calls
// O((high - low) * log(high - low)) advance() calls
// O(n * log(high - low)) pred() calls
array<vector<int>, 2> double_parallel_binary_search(int n, int low, int high, auto init, auto advance, auto pred0, auto pred1){
	assert(low <= high);
	vector<int> l0(n, low), r0(n, high);
	vector<vector<int>> update0(high - low);
	vector<int> l1(n, low), r1(n, high);
	vector<vector<int>> update1(high - low);
	init();
	for(auto i = 0; i < n; ++ i){
		if(!pred0(i)) r0[i] = low;
		if(!pred1(i)) r1[i] = low;
	}
	while(true){
		bool done = true;
		for(auto i = 0; i < n; ++ i){
			if(r0[i] - l0[i] >= 2){
				done = false;
				update0[l0[i] + (r0[i] - l0[i] >> 1) - low].push_back(i);
			}
			if(r1[i] - l1[i] >= 2){
				done = false;
				update1[l1[i] + (r1[i] - l1[i] >> 1) - low].push_back(i);
			}
		}
		if(done) break;
		for(auto s = low; s < high; ++ s){
			for(auto i: update0[s - low]) (pred0(i) ? l0 : r0)[i] = s;
			update0[s - low].clear();
			for(auto i: update1[s - low]) (pred1(i) ? l1 : r1)[i] = s;
			update1[s - low].clear();
			if(s + 1 < high) advance(s);
		}
		init();
	}
	return {r0, r1};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>double_parallel_binary_search</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
