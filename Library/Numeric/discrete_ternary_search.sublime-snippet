<snippet>
	<content><![CDATA[
// Assumes there exists p, q in [low, high) such that
// f(i) > f(i+1) if i<p,
// f(i) = f(i+1) if p<=i<q
// f(i) < f(i+1) if q<=i
// Returns a point in [p,q]
// O(log(high - low))
template<class T, class Compare = less<>>
T discrete_ternary_search(T low, T high, auto f, Compare cmp = less<>()){
	assert(low < high);
	while(high - low >= 3){
		T mid = low + (high - low >> 1);
		cmp(f(mid), f(mid + 1)) ? high = mid + 1 : low = mid;
	}
	T res = low;
	auto val = f(res);
	for(auto x = low + 1; x < high; ++ x) if(auto xval = f(x); cmp(xval, val)) res = x, val = xval;
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>discrete_ternary_search</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
