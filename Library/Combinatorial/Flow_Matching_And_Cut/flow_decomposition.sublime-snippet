<snippet>
	<content><![CDATA[
// Requires flow_network
template<class T>
struct flow_decomposition{
	flow_network<T> &F;
	vector<vector<int>> paths;
	vector<T> path_flows;
	vector<vector<int>> cycles;
	vector<T> cycle_flows;
	flow_decomposition(flow_network<T> &F): F(F){ }
	void decompose(int source, int sink){
		vector<T> fs(F.edge.size());
		for(auto i = 0; i < (int)F.edge.size(); ++ i) fs[i] = F.edge[i].flow;
		paths.clear();
		path_flows.clear();
		cycles.clear();
		cycle_flows.clear();
		int n = F.n;
		static constexpr T eps = (T)1e-9;
		vector<int> ptr(n);
		for(auto i = 0; i < n; ++ i) ptr[i] = (int)F.adj[i].size() - 1;
		vector<int> was(n, -1);
		int start = source;
		for(auto iter = 0; ; ++ iter){
			bool found_start = false;
			while(true){
				if(ptr[start] >= 0){
					int id = F.adj[start][ptr[start]];
					if(fs[id] > eps){
						found_start = true;
						break;
					}
					-- ptr[start];
					continue;
				}
				start = (start + 1) % n;
				if(start == source) break;
			}
			if(!found_start) break;
			vector<int> path;
			bool is_cycle = false;
			int u = start;
			while(true){
				if(u == sink) break;
				if(was[u] == iter){
					bool found = false;
					for(auto i = 0; i < (int)path.size(); ++ i){
						int id = path[i];
						auto &e = F.edge[id];
						if(e.from == u){
							path.erase(path.begin(), path.begin() + i);
							found = true;
							break;
						}
					}
					assert(found);
					is_cycle = true;
					break;
				}
				was[u] = iter;
				bool found = false;
				while(ptr[u] >= 0){
					int id = F.adj[u][ptr[u]];
					if(fs[id] > eps){
						path.push_back(id);
						u = F.edge[id].to;
						found = true;
						break;
					}
					-- ptr[u];
				}
				assert(found);
			}
			T path_flow = numeric_limits<T>::max();
			for(auto id : path) path_flow = min(path_flow, fs[id]);
			for(auto id : path){
				fs[id] -= path_flow;
				fs[id ^ 1] += path_flow;
			}
			if(is_cycle){
				cycles.push_back(path);
				cycle_flows.push_back(path_flow);
			}
			else{
				paths.push_back(path);
				path_flows.push_back(path_flow);
			}
		}
		for(const auto &f: fs) assert(-eps <= f && f <= eps);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>flow_decomposition</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
