<snippet>
	<content><![CDATA[
// Requires matroid
template<class T>
struct minimum_cost_matroid_intersection_bellman_ford{
	int n;
	vector<int> state;
	minimum_cost_matroid_intersection_bellman_ford(int n): n(n), state(n), dist(n + 1), pv(n + 1){ }
	vector<pair<T, int>> dist;
	vector<tuple<int, int, T>> edge;
	vector<int> pv;
	template<class M1, class M2>
	bool augment(const vector<T> &cost, M1 &m1, M2 &m2){
		fill(dist.begin(), dist.end(), pair<T, int>{numeric_limits<T>::max() / 2, 0});
		edge.clear();
		fill(pv.begin(), pv.end(), -1);
		m1.clear();
		m2.clear();
		for(auto u = 0; u < n; ++ u) if(state[u]){
			m1.insert(u);
			m2.insert(u);
		}
		for(auto u = 0; u < n; ++ u) if(!state[u]){
			if(m1.check(u)) dist[pv[u] = u] = {cost[u], 0};
			if(m2.check(u)) edge.emplace_back(u, n, 0);
		}
		for(auto u = 0; u < n; ++ u) if(state[u]){
			m1.clear();
			m2.clear();
			for(auto v = 0; v < n; ++ v) if(u != v && state[v]){
				m1.insert(v);
				m2.insert(v);
			}
			for(auto v = 0; v < n; ++ v) if(!state[v]){
				if(m1.check(v)) edge.push_back({u, v, cost[v]});
				if(m2.check(v)) edge.push_back({v, u, -cost[u]});
			}
		}
		for(auto changed = true; changed; ){
			changed = false;
			for(auto [u, v, w]: edge){
				pair<T, int> dist_next{dist[u].first + w, dist[u].second + 1};
				if(~pv[u] && dist_next < dist[v]){
					dist[v] = dist_next;
					pv[v] = u;
					changed = true;
				}
			}
		}
		if(!~pv[n]) return false;
		for(auto u = pv[n]; ; u = pv[u]){
			state[u] ^= 1;
			if(pv[u] == u) break;
		}
		return true;
	}
	/*
	---------------------------------------------
	| # of member function calls where          |
	| r is the size of the answer and           |
	| N is the size of the ground set           |
	---------------------------------------------
	| Member Function | M1         | M2         |
	---------------------------------------------
	| insert()        | O(r^3)     | O(r^2 * n) |
	| check()         | O(r^2 * n) | O(r^2 * n) |
	| clear()         | O(r^2)     | O(r * n)   |
	---------------------------------------------
	*/
	template<class M1, class M2>
	vector<int> minimum_cost_maximum_common_independent_set(const vector<T> &cost, M1 m1, M2 m2){
		fill(state.begin(), state.end(), false);
		while(augment<M1, M2>(cost, m1, m2));
		vector<int> res;
		for(auto u = 0; u < n; ++ u) if(state[u]) res.push_back(u);
		return res;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>minimum_cost_matroid_intersection_bellman_ford</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
