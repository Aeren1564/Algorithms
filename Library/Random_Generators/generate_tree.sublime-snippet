<snippet>
	<content><![CDATA[
vector<array<int, 2>> generate_tree(auto &&rng, int n, optional<vector<int>> input_deg = {}){
	if(input_deg){
		assert((int)input_deg->size() == n);
		assert(accumulate(input_deg->begin(), input_deg->end(), 0) == 2 * n - 2);
		for(auto d: *input_deg) assert(1 <= d);
	}
	vector<array<int, 2>> res;
	if(n <= 3 || !input_deg && rng() & 1) for(auto u = 1; u < n; ++ u) res.push_back({int(rng() % u), u});
	else{
		vector<int> prufer(n - 2), deg(n, 1);
		if(input_deg){
			deg = *input_deg;
			prufer.clear();
			for(auto u = 0; u < n; ++ u) for(auto i = 0; i < deg[u] - 1; ++ i) prufer.push_back(u);
		}
		else for(auto &u: prufer) ++ deg[u = rng() % n];
		int leaf = find(deg.begin(), deg.end(), 1) - deg.begin(), u = leaf;
		for(auto v: prufer){
			res.push_back({min(leaf, v), max(leaf, v)});
			if(-- deg[v] == 1 && v < u) leaf = v;
			else{
				u = find(deg.begin() + u + 1, deg.end(), 1) - deg.begin();
				leaf = u;
			}
		}
		res.push_back({leaf, n - 1});
	}
	vector<int> label(n);
	iota(label.begin(), label.end(), 0);
	shuffle(label.begin(), label.end(), rng);
	for(auto &[u, v]: res){
		u = label[u], v = label[v];
		if(rng() & 1) swap(u, v);
	}
	shuffle(res.begin(), res.end(), rng);
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>generate_tree</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
