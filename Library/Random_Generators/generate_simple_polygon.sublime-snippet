<snippet>
	<content><![CDATA[
// T_large must be able to hold max_coordiate^4
// Requires point, line, line_intersection, quad_edge, delaunay_triangulation, and disjoint_set
template<class T, class T_large>
vector<point<T>> generate_simple_polygon(auto &&rng, int n, T low, T high){
	assert(n >= 3 && low < high);
	vector<point<T>> order;
	while(true){
		set<point<T>> used;
		for(auto i = 0; i < n; ++ i){
			while(true){
				T x = rng() % (high - low) + low, y = rng() % (high - low) + low;
				if(!used.count({x, y})){
					used.insert({x, y});
					break;
				}
			}
		}
		order = vector<point<T>>(used.begin(), used.end());
		for(auto i = 2; i < n; ++ i){
			if(!colinear(order[0], order[1], order[i])){
				goto DONE;
			}
		}
	}
	DONE:;
	shuffle(order.begin(), order.end(), rng);
	if(rng() & 1){
		vector<tuple<double, int, int>> edge;
		delaunay_triangulation<T, T_large>(order, [&](auto){  }, [&](int u, int v, int w){
			edge.push_back({distance(order[u], order[v]), u, v});
			edge.push_back({distance(order[v], order[w]), v, w});
			edge.push_back({distance(order[w], order[u]), w, u});
		});
		sort(edge.begin(), edge.end());
		disjoint_set dsu(n);
		vector<vector<int>> adj(n);
		for(auto [w, u, v]: edge){
			if(dsu.merge(u, v)){
				adj[u].push_back(v);
				adj[v].push_back(u);
			}
		}
		vector<array<int, 2>> q(n);
		q[0] = {0, -1};
		vector<point<T>> norder(n);
		for(auto beg = 0, end = 1; beg < end; ++ beg){
			auto [u, p] = q[beg];
			norder[beg] = order[u];
			for(auto v: adj[u]) if(v != p) q[end ++] = {v, u};
		}
		order = norder;
	}
	for(bool changed = true; changed; ){
		changed = false;
		for(auto u = 0; u < n; ++ u){
			int v = (u + 1) % n, w = (u + 2) % n;
			if((order[v] - order[u] ^ order[w] - order[v]) == 0 && (order[v] - order[u]) * (order[w] - order[v]) < 0){
				changed = true;
				if((order[w] - order[u]) * (order[v] - order[w]) > 0) swap(order[v], order[w]);
				else swap(order[u], order[v]);
			}
			line<T> L(order[u], order[v]);
			for(auto v = u + 2; v < n - !u; ++ v){
				if(intersect_closed_segments<T>(L, line<T>(order[v], order[(v + 1) % n]))){
					changed = true;
					reverse(order.begin() + u + 1, order.begin() + v + 1);
				}
			}
		}
	}
	if(doubled_signed_area(order) < 0) reverse(order.begin(), order.end());
	return order;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>generate_simple_polygon</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
