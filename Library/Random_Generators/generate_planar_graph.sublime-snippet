<snippet>
	<content><![CDATA[
// Requires point, line, and line_intersection
pair<vector<array<int, 2>>, vector<pointll>> generate_planar_graph(auto &&rng, int n, int m_max, int max_c = 1000000000){
	assert(0 <= n);
	vector<pointll> embedding(n);
	for(auto u = 0; u < n; ++ u){
		embedding[u].x = rng() % (max_c + 1);
		embedding[u].y = rng() % (max_c + 1);
	}
	vector<array<int, 2>> edge;
	for(auto rep = m_max; n && rep; -- rep){
		int u = rng() % (n - 1), v = rng() % (n - 1 - u) + u + 1;
		linell L(embedding[u], embedding[v]);
		bool fail = false;
		for(auto [w, x]: edge){
			linell M(embedding[w], embedding[x]);
			if(intersect_closed_segments(L, M)){
				fail = true;
				break;
			}
		}
		if(!fail) edge.push_back({u, v});
	}
	return {edge, embedding};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>generate_planar_graph</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
