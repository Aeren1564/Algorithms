<snippet>
	<content><![CDATA[
// Bron-Kerbosch algorithm
// Reads adjacency matrix represented with bitmask
// n must be equal or less than 64 (works under 100ms).
// O(3^(n/3))
vector<int> find_a_maximum_clique(const vector<unsigned long long> &input_adjm){
	int n = (int)input_adjm.size();
	assert(1 <= n && n <= 64);
	vector<int> deg(n), order(n), pos(n);
	for(auto u = 0; u < n; ++ u) deg[u] = __builtin_popcountll(input_adjm[u]);
	iota(order.begin(), order.end(), 0);
	sort(order.begin(), order.end(), [&](int u, int v){ return deg[u] < deg[v]; });
	for(auto t = 0; t < n; ++ t) pos[order[t]] = t;
	using ull = unsigned long long;
	vector<ull> adjm(n);
	for(auto u = 0; u < n; ++ u) for(auto v = u + 1; v < n; ++ v) if(input_adjm[u] & 1ull << v) adjm[pos[u]] ^= 1ull << pos[v], adjm[pos[v]] ^= 1ull << pos[u];
	ull res = 0;
	auto dfs = [&](auto self, ull r, ull p)->void{
		if(p == 0){
			if(__builtin_popcountll(r) > __builtin_popcountll(res)) res = r;
			return;
		}
		if(__builtin_popcountll(r | p) <= __builtin_popcountll(res)) return;
		int u = __builtin_ctzll(p);
		ull c = p & ~adjm[u];
		while(c){
			u = __builtin_ctzll(c);
			ull umask = 1ull << u;
			r |= umask;
			self(self, r, p & adjm[u]);
			r &= ~umask;
			p &= ~umask;
			c ^= umask;
		}
	};
	dfs(dfs, 0, (1ull << n) - 1);
	vector<int> clique;
	for(auto t = 0; t < n; ++ t) if(res & 1ull << t) clique.push_back(order[t]);
	sort(clique.begin(), clique.end());
	return clique;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>find_a_maximum_clique</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
