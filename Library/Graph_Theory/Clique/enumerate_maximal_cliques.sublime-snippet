<snippet>
	<content><![CDATA[
// Bron-Kerbosch algorithm for enumerating all maximum cliques.
// Reads adjacency matrix represented with bitmask
// n must be equal or less than 64 (works under 100ms).
// O(3^(n/3))
void enumerate_maximal_cliques(const vector<unsigned long long> &input_adjm, auto process_while){
	int n = (int)input_adjm.size();
	assert(n <= 64);
	if(n == 0) return;
	vector<int> deg(n), order(n), pos(n);
	for(auto u = 0; u < n; ++ u) deg[u] = __builtin_popcountll(input_adjm[u]);
	iota(order.begin(), order.end(), 0);
	sort(order.begin(), order.end(), [&](int u, int v){ return deg[u] < deg[v]; });
	for(auto t = 0; t < n; ++ t) pos[order[t]] = t;
	using ull = unsigned long long;
	vector<ull> adjm(n);
	for(auto u = 0; u < n; ++ u) for(auto v = u + 1; v < n; ++ v) if(input_adjm[u] & 1ull << v) adjm[pos[u]] ^= 1ull << pos[v], adjm[pos[v]] ^= 1ull << pos[u];
	auto dfs = [&](auto self, ull r, ull p)->bool{
		if(p == 0) return process_while(r);
		int u = __builtin_ctzll(p);
		ull c = p & ~adjm[u];
		while(c){
			u = __builtin_ctzll(c);
			ull umask = 1ull << u;
			r |= umask;
			if(!self(self, r, p & adjm[u])) return false;
			r &= ~umask;
			p &= ~umask;
			c ^= umask;
		}
		return true;
	};
	dfs(dfs, 0, (1ull << n) - 1);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>enumerate_maximal_cliques</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
