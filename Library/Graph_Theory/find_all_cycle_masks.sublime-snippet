<snippet>
	<content><![CDATA[
// act(mask_of_cycle, last_vertex, dp, adjmask) where
// dp[mask]: set of vertices where some cycle can end on
// O(n * 2^n)
// Requires graph
template<class T>
void find_all_cycle_masks(const graph<T> &g, auto act_while){
	int n = g.n;
	assert(n <= 30);
	vector<int> adjmask(n), checked(1 << n), dp(1 << n);
	for(auto u = 0; u < n; ++ u) for(auto id: g.adj[u]){
		if(g.ignore && g.ignore(id)) continue;
		adjmask[u] |= 1 << g(u, id);
	}
	for(auto s = n - 1; s >= 0; -- s){
		fill(dp.begin(), dp.begin() + (1 << s + 1), 0);
		dp[1 << s] = 1 << s;
		for(auto mask = 1; mask < 1 << s + 1; ++ mask){
			int neighbor = 0;
			for(auto u = 0; u <= s; ++ u) if(dp[mask] & 1 << u){
				if(!checked[mask] && adjmask[u] & 1 << s){
					checked[mask] = true;
					if(!act_while(mask, u, dp, adjmask)) return;
				}
				neighbor |= adjmask[u];
			}
			neighbor &= ~mask;
			for(auto u = 0; u <= s; ++ u) if(neighbor & 1 << u) dp[mask | 1 << u] |= 1 << u;
		}
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>find_all_cycle_masks</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
