<snippet>
	<content><![CDATA[
template<class T>
struct tree_diameter{
	int n;
	vector<int> q, pe;
	vector<T> dist;
	tree_diameter(int n): n(n), q(n), pe(n), dist(n){
		assert(n >= 1);
	}
	// The connected component containing s must be a tree.
	// Returns {diamter, {starting vertex, list of edges}}
	// O(size(component))
	// Requires graph
	template<class U>
	tuple<T, vector<int>> diameter(const graph<U> &g, int s){
		assert(g.n == n);
		auto bfs = [&](int s)->void{
			q[0] = s;
			pe[s] = -1;
			dist[s] = 0;
			for(auto qbeg = 0, qend = 1; qbeg < qend; ++ qbeg){
				int u = q[qbeg];
				for(auto id: g.adj[u]){
					if(g.ignore && g.ignore(id) || id == pe[u]) continue;
					int v = g(u, id);
					T w = g.edge[id].cost;
					q[qend ++] = v;
					pe[v] = id;
					dist[v] = dist[u] + w;
				}
			}
		};
		bfs(s);
		int x = max_element(dist.begin(), dist.end()) - dist.begin();
		bfs(x);
		int y = max_element(dist.begin(), dist.end()) - dist.begin();
		vector<int> diam;
		for(auto u = y; u != x; u = g(u, pe[u])) diam.push_back(pe[u]);
		diam.push_back(x);
		reverse(diam.begin(), diam.end());
		return {dist[y], diam};
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>tree_diameter</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
