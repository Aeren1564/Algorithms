<snippet>
	<content><![CDATA[
// Requires graph
struct small_to_large_on_forest{
	int n;
	vector<vector<int>> adj;
	vector<int> size, pv, pe, order, pos, end, root;
	small_to_large_on_forest(int n): n(n), adj(n), size(n), pv(n), pe(n), pos(n), end(n), root(n), was(n){ }
	int iter = 0;
	vector<int> was;
	void init(const graph<auto> &g){
		vector<int> roots(g.n);
		iota(roots.begin(), roots.end(), 0);
		init(g, roots);
	}
	void init(const graph<auto> &g, const vector<int> &roots){
		assert(n == g.n);
		order.clear();
		++ iter;
		auto dfs_size = [&](auto self, int u)->void{
			was[u] = iter;
			adj[u].clear();
			size[u] = 1;
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				auto &e = g.edge[id];
				int v = u ^ e.from ^ e.to;
				if(was[v] == iter) continue;
				pv[v] = u;
				pe[v] = id;
				root[v] = root[u];
				self(self, v);
				size[u] += size[v];
				adj[u].push_back(v);
				if(size[adj[u][0]] < size[v]) swap(adj[u].front(), adj[u].back());
			}
		};
		auto dfs = [&](auto self, int u)->void{
			pos[u] = (int)order.size();
			order.push_back(u);
			for(auto v: adj[u]) self(self, v);
			end[u] = (int)order.size();
		};
		for(auto u: roots) if(was[u] != iter){
			root[u] = u;
			pv[u] = pe[u] = -1;
			dfs_size(dfs_size, u);
			dfs(dfs, u);
		}
	}
	// insert_subtr(u): insert all vertices in the subtree of u into the state.
	// insert_root(u): insert vertex u into the state.
	// answer(u, flag): answer for the subtree of u, flag indicates whether u is included or not.
	// clear_subtr(u): erase every vertex in the subtree of u from the state.
	// Sum of subtree sizes of u over all insert_subtr(u) calls is O(n * log(n)).
	// insert_root(u), answer(u, false), and answer(u, true) are called once for each u.
	// Sum of subtree size of vertex u for all clear_subtr(u) calls is O(n).
	void run(auto insert_subtr, auto insert_root, auto clear_subtr, auto answer){
		for(auto r: order) if(root[r] == r) for(auto i = end[r] - 1; i >= pos[r]; -- i){
			int u = order[i];
			for(auto j = 1; j < (int)adj[u].size(); ++ j) insert_subtr(adj[u][j]);
			answer(u, false), insert_root(u), answer(u, true);
			if(!~pv[u] || adj[pv[u]][0] != u) clear_subtr(u);
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>small_to_large_on_forest</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
