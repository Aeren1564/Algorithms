<snippet>
	<content><![CDATA[
struct lca_solver{
	int n;
	vector<int> depth;
	vector<int> order;
	vector<int> pos;
	vector<int> end;
	vector<int> root_of;
	vector<vector<int>> rmq;
	vector<int> was;
	lca_solver(){ }
	template<class T>
	lca_solver(const graph<T> &g){
		vector<int> src(g.n);
		iota(src.begin(), src.end(), 0);
		*this = lca_solver(g, src);
	}
	template<class T>
	lca_solver(const graph<T> &g, const vector<int> &src){
		init(g.n);
		build(g, src);
	}
	void init(int n){
		this->n = n;
		depth.assign(n, -1);
		order.clear();
		pos.assign(n, -1);
		end.assign(n, -1);
		root_of.assign(n, -1);
		rmq.clear();
		was.assign(n, -2);
		attempt = -1;
	}
	int attempt;
	// O(n * log(n))
	template<class T>
	void build(const graph<T> &g, const vector<int> &src){
		assert(g.n <= n);
		++ attempt;
		order.clear();
		rmq = {{}};
		auto dfs = [&](auto self, int u, int pe)->void{
			assert(was[u] != attempt);
			was[u] = attempt;
			pos[u] = (int)order.size();
			order.push_back(u), rmq[0].push_back(pos[u]);
			for(auto id: g.adj[u]){
				if(id == pe || g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				depth[v] = depth[u] + 1;
				root_of[v] = root_of[u];
				self(self, v, id);
				order.push_back(u), rmq[0].push_back(pos[u]);
			}
			end[u] = (int)order.size();
		};
		for(auto r: src){
			if(was[r] == attempt) continue;
			depth[r] = 0;
			root_of[r] = r;
			dfs(dfs, r, -1);
		}
		for(auto p = 1, i = 1; p <= n; p <<= 1, ++ i){
			rmq.emplace_back((n << 1) - (p << 1) + 1);
			for(auto j = 0; j < (int)rmq[i].size(); ++ j) rmq[i][j] = min(rmq[i - 1][j], rmq[i - 1][j + p]);
		}
	}
	// Check if u is visited during the last build call
	bool visited(int u) const{
		assert(0 <= u && u < n);
		return was[u] == attempt;
	}
	// O(1)
	bool ancestor_of(int u, int v) const{
		assert(visited(u) && visited(v));
		return pos[u] <= pos[v] && end[v] <= end[u];
	}
	// Assumes u and v are on the same component
	// O(1)
	int lca(int u, int v) const{
		assert(visited(u) && visited(v) && root_of[u] == root_of[v]);
		if(u == v) return u;
		tie(u, v) = minmax(pos[u], pos[v]);
		int d = __lg(v - u);
		return order[min(rmq[d][u], rmq[d][v - (1 << d)])];
	}
	// Assumes u and v are on the same component
	// O(1)
	int steps(int u, int v, int w = -1) const{
		return -2 * depth[~w ? w : lca(u, v)] + depth[u] + depth[v];
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lca_solver</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
