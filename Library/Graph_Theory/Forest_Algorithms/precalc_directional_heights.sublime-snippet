<snippet>
	<content><![CDATA[
// Reads undirected forest
// O(|V|)
template<class T>
array<vector<int>, 2> precalc_directional_heights(const graph<T> &g, const vector<int> &roots){
	int n = g.n;
	vector<int> vis(n);
	vector<T> height_up(n), height_down(n);
	auto dfs_up = [&](auto self, int u)->void{
		vis[u] = true;
		for(auto id: g.adj[u]){
			if(g.ignore && g.ignore(id)) continue;
			auto &e = g.edge[id];
			int v = g(u, id);
			if(vis[v]) continue;
			self(self, v);
			height_up[u] = max(height_up[u], height_up[v] + e.cost);
		}
	};
	for(auto r: roots) if(!vis[r]) dfs_up(dfs_up, r);
	fill(vis.begin(), vis.end(), false);
	auto dfs_down = [&](auto self, int u)->void{
		vis[u] = true;
		array<int, 2> mx{height_down[u], 0};
		for(auto id: g.adj[u]){
			if(g.ignore && g.ignore(id)) continue;
			auto &e = g.edge[id];
			int v = g(u, id);
			if(vis[v]) continue;
			if(mx[0] < height_up[v] + e.cost) mx = {height_up[v] + e.cost, mx[0]};
			else if(mx[1] < height_up[v] + e.cost) mx[1] = height_up[v] + e.cost;
		}
		for(auto id: g.adj[u]){
			if(g.ignore && g.ignore(id)) continue;
			auto &e = g.edge[id];
			int v = g(u, id);
			if(vis[v]) continue;
			height_down[v] = height_up[v] + e.cost != mx[0] ? mx[0] + e.cost : mx[1] + e.cost;
			self(self, v);
		}
	};
	for(auto r: roots) if(!vis[r]) dfs_down(dfs_down, r);
	return {height_up, height_down};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>precalc_directional_heights</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
