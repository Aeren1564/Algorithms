<snippet>
	<content><![CDATA[
// Requires graph, lexicographical_bfs_forest, and recognize_chordal_graphs
template<class T>
pair<vector<vector<int>>, vector<array<int, 2>>> // bags, edges
tree_decomposition_chordal_graph(const graph<T> &g){
	int n = g.n;
	auto orderptr = recognize_chordal_graphs(g);
	assert(orderptr);
	auto order = *orderptr;
	vector<int> pos(n);
	for(auto i = 0; i < n; ++ i) pos[order[i]] = i;
	vector<vector<int>> bags;
	vector<array<int, 2>> edge;
	vector<int> label(n, -1);
	reverse(order.begin(), order.end());
	for(auto u: order){
		int i = (int)bags.size();
		label[u] = i;
		vector<int> bag{u};
		for(auto id: g.adj[u]){
			if(g.ignore && g.ignore(id)) continue;
			int v = g(u, id);
			if(pos[u] < pos[v]) bag.push_back(v);
		}
		if((int)bag.size() >= 2) edge.push_back({i, label[*min_element(bag.begin() + 1, bag.end(), [&](int u, int v){ return pos[u] < pos[v]; })]});
		sort(bag.begin(), bag.end());
		bags.push_back(bag);
	}
	return {bags, edge};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>tree_decomposition_chordal_graph</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
