<snippet>
	<content><![CDATA[
template<class T, T (*zero)(), T (*one)()>
struct basis_base{
	int width, count = 0;
	vector<vector<T>> data;
	vector<int> pivot;
	struct modifier_type{
		int type;
		// Type 0: row[to] += row[from] * val
		// Type 1: row[to] *= val
		// Type 2: insert row[from] into row[to]
		int from, to;
		T val;
	};
	vector<modifier_type> log;
	basis_base(int width, const vector<vector<T>> &a = {}): width(width){
		for(auto &v: a) insert(v);
	}
	// O(1)
	int rank() const{
		return (int)data.size();
	}
	// O(rank * width)
	vector<T> reduce(vector<T> v) const{
		assert((int)v.size() == width);
		for(auto i = 0; i < rank(); ++ i) if(v[pivot[i]] != zero()){
			T x = v[pivot[i]];
			for(auto j = 0; j <= pivot[i]; ++ j) v[j] -= x * data[i][j];
		}
		return v;
	}
	// Insert a row while maintaining the lower triangular form
	// O(rank * width + multiplicative_inverse())
	bool insert(vector<T> v){
		assert((int)v.size() == width);
		for(auto i = 0; i < rank(); ++ i) if(v[pivot[i]] != zero()){
			T x = v[pivot[i]];
			for(auto j = 0; j <= pivot[i]; ++ j) v[j] -= x * data[i][j];
			log.push_back({0, i, count, -x});
		}
		int p  = -1;
		for(auto j = width - 1; j >= 0; -- j) if(v[j] != zero()){
			p = j;
			break;
		}
		if(!~p) return ++ count, false;
		if(v[p] != one()){
			T inv = one() / v[p];
			for(auto j = 0; j <= p; ++ j) v[j] *= inv;
			log.push_back({1, -1, count, inv});
		}
		for(auto i = 0; i < rank(); ++ i) if(data[i][p] != zero()){
			T x = data[i][p];
			for(auto j = 0; j <= p; ++ j) data[i][j] -= x * v[j];
			log.push_back({0, count, i, -x});
		}
		int t = lower_bound(pivot.begin(), pivot.end(), p) - pivot.begin();
		pivot.insert(pivot.begin() + t, p);
		data.insert(data.begin() + t, v);
		log.push_back({2, count, t, zero()});
		++ count;
		return true;
	}
	// Returns {
	//  lexicographically_smallest_sol,
	//  sol_basis_vector_1,
	//  ...,
	//  sol_basis_vector_k
	// }
	// O(rank * width)
	template<bool construct_solution = true>
	optional<vector<vector<T>>> solve(vector<T> b) const{
		assert(count == (int)b.size());
		for(auto &m: log){
			if(m.type == 0) b[m.to] += b[m.from] * m.val;
			else if(m.type == 1) b[m.to] *= m.val;
			else rotate(b.begin() + m.to, b.begin() + m.from, b.begin() + m.from + 1);
		}
		for(auto i = rank(); i < count; ++ i) if(b[i] != zero()) return {};
		if(!construct_solution) return {{}};
		vector<vector<T>> res({vector<T>(width, zero())});
		vector<int> is_free(width, true);
		for(auto i = 0; i < rank(); ++ i) res[0][pivot[i]] = b[i], is_free[pivot[i]] = false;
		for(auto j = 0; j < width; ++ j) if(is_free[j]){
			vector<T> v(width, zero());
			v[j] = one();
			for(auto i = rank() - 1; i >= 0 && pivot[i] > j; -- i) v[pivot[i]] = -data[i][j];
			res.push_back(v);
		}
		return res;
	}
};

template<class T> T ZERO(){
	return 0;
}
template<class T> T ONE(){
	return 1;
}
template<class T> using basis = basis_base<T, ZERO<T>, ONE<T>>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>basis</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
