<snippet>
	<content><![CDATA[
// T must be of either integer or modular type
// Returns det(xI - a) if not flip otherwise det(a - xI)
// O(n^3 + n^2 * log(MAXVAL))
template<class T>
vector<T> characteristic_polynomial(vector<vector<T>> M, bool flip = false){
	if(M.empty()) return {1};
	int n = (int)M.size();
	assert(n == (int)M[0].size());
	// Transform the matrix into a similar upper Hessenberg matrix
	vector<int> c(n);
	iota(c.begin(), c.end(), 0);
	for(auto i = 0; i < n; ++ i) for(auto j = i + 2; j < n; ++ j) while(M[j][c[i]]){
			T t;
		if constexpr(is_integral<T>::value) t = M[i + 1][c[i]] / M[j][c[i]];
		else t = M[i + 1][c[i]].data / M[j][c[i]].data;
		swap(M[j], M[i + 1]);
		swap(c[i + 1], c[j]);
		for(auto k = i; k < n; ++ k) M[j][c[k]] -= M[i + 1][c[k]] * t;
		for(auto k = 0; k < n; ++ k) M[k][c[i + 1]] += M[k][c[j]] * t;
	}
	vector<vector<T>> dp(n + 1);
	dp[0] = {1};
	dp[1] = {-M[0][0], 1};
	for(auto i = 1; i < n; ++ i){
		dp[i + 1] = dp[i];
		dp[i + 1].insert(dp[i + 1].begin(), 0);
		for(auto j = 0; j <= i; ++ j) dp[i + 1][j] -= dp[i][j] * M[i][c[i]];
		T pref = 1, coef;
		for(auto j = i; j > 0; -- j){
			pref *= -M[j][c[j - 1]];
			coef = pref * -M[j - 1][c[i]] * (j - i & 1 ? 1 : -1);
			for(auto k = 0; k < j; ++ k) dp[i + 1][k] += coef * dp[j - 1][k];
		}
	}
	auto res = dp[n];
	if(flip && n & 1) for(auto &x: res) x *= -1;
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>characteristic_polynomial</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
