<snippet>
	<content><![CDATA[
// Implementation of "Determinant: Combinatorics, Algorithms, and Complexity" by Meena Mahajan
// Returns det(xI - a) if not flip otherwise det(a - xI)
// T must be a commutative ring
// O(n^4)
template<class T>
vector<T> characteristic_polynomial_commutative_ring(const vector<vector<T>> &M, T T_id_add = 0, T T_id_mul = 1, bool flip = false){
	if(M.empty()) return {T_id_mul};
	int n = (int)M.size();
	assert((int)M[0].size() == n);
	vector<vector<T>> dp(n, vector<T>(n, T_id_add));
	auto dp_next = dp;
	vector<T> res(n + 1, T_id_add);
	res[n] = n & 1 ? -T_id_mul : T_id_mul;
	for(auto i = 0; i < n; ++ i) dp[i][i] = n & 1 ? T_id_mul : -T_id_mul;
	for(auto l = 0; ; ++ l){
		for(auto i = 0; i < n; ++ i) for(auto j = i; j < n; ++ j) res[n - 1 - l] += dp[i][j] * M[j][i];
		if(l == n - 1) break;
		for(auto &r: dp_next) fill(r.begin(), r.end(), T_id_add);
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j <= i; ++ j){
			T x = dp[j][i];
			for(auto k = j + 1; k < n; ++ k) dp_next[j][k] += x * M[i][k];
			if(j + 1 < n) dp_next[j + 1][j + 1] -= dp[j][i] * M[i][j];
		}
		for(auto i = 0; i < n - 1; ++ i) dp_next[i + 1][i + 1] += dp_next[i][i];
		swap(dp, dp_next);
	}
	if(!flip && n & 1) for(auto &x: res) x = -x;
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>characteristic_polynomial_commutative_ring</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
