<snippet>
	<content><![CDATA[
template<class T>
struct grid_dijkstra{
	int n, nr;
	vector<int> ncs;
	vector<vector<int>> index;
	vector<array<int, 2>> locate;
	vector<array<int, 2>> dr = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
	vector<T> dist;
	vector<int> pv;
	vector<int> order;
	vector<int> pos;
	vector<int> root_of;
	vector<int> root;
	vector<int> depth;
	vector<int> was;
	void init(int nr, int nc){
		assert(0 <= nr && 0 <= nc);
		init(nr, vector(nr, nc));
	}
	void init(int nr, const vector<int> &ncs){
		assert(nr == (int)ncs.size());
		this->n = accumulate(ncs.begin(), ncs.end(), 0);
		this->nr = nr;
		this->ncs = ncs;
		index.assign(nr, {});
		for(auto x = 0; x < nr; ++ x){
			int nc = ncs[x];
			assert(0 <= nc);
			index[x].assign(nc, -1);
			for(auto y = 0; y < nc; ++ y){
				index[x][y] = (int)locate.size();
				locate.push_back({x, y});
			}
		}
		dist.assign(n, T{});
		pv.assign(n, -1);
		order.clear();
		pos.assign(n, -1);
		root_of.assign(n, -1);
		root.clear();
		depth.assign(n, -1);
		was.assign(n, -2);
		attempt = -1;
	}
	void init_dr(const vector<array<int, 2>> &dr){
		this->dr = dr;
	}
	void init_dr_8(){
		this->dr = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
	}
	void init_dr_diag(){
		this->dr = {{1, 1}, {-1, 1}, {-1, -1}, {1, -1}};
	}
	int attempt;
	priority_queue<pair<T, int>, vector<pair<T, int>>, greater<pair<T, int>>> pq;
	// O((# of reachable cells) * size(dr) * log((# of reachable cells) * size(dir)))
	template<class Container, class Weight>
	void _run(const vector<Container> &grid, const vector<vector<Weight>> &cell_weight, const vector<int> &src){
		for(auto u: src){
			if(was[u] == attempt) continue;
			was[u] = attempt;
			pq.push({dist[u] = cell_weight[locate[u][0]][locate[u][1]], u});
			depth[u] = 0;
			root_of[u] = u;
			root.push_back(u);
			pv[u] = -1;
		}
		while(!pq.empty()){
			auto [d, u] = pq.top();
			pq.pop();
			if(d != dist[u]) continue;
			pos[u] = (int)order.size();
			order.push_back(u);
			auto [x, y] = locate[u];
			for(auto [dx, dy]: dr){
				int xn = x + dx, yn = y + dy;
				if(!(0 <= xn && xn < (int)grid.size() && 0 <= yn && yn <= (int)grid[xn].size()) || grid[x][y] != grid[xn][yn]) continue;
				int v = index[xn][yn];
				if(was[v] != attempt || dist[u] + cell_weight[xn][yn] < dist[v]){
					was[v] = attempt;
					depth[v] = depth[u] + 1;
					pv[v] = u;
					root_of[v] = root_of[u];
					pq.push({dist[v] = dist[u] + cell_weight[xn][yn], v});
				}
			}
		}
	}
	// O((# of reachable cells) * size(dr) * log((# of reachable cells) * size(dir)))
	template<class Container, class Weight>
	void run(const vector<Container> &grid, const vector<vector<Weight>> &cell_weight, const vector<array<int, 2>> &src){
		assert((int)grid.size() <= nr && (int)grid.size() == (int)cell_weight.size());
		for(auto x = 0; x < nr; ++ x){
			assert((int)grid[x].size() <= ncs[x] && (int)grid[x].size() == (int)cell_weight[x].size());
			for(auto y = 0; y < (int)grid[x].size(); ++ y) assert(0 <= cell_weight[x][y]);
		}
		root.clear(), order.clear();
		++ attempt;
		vector<int> src_index((int)src.size());
		for(auto i = 0; i < (int)src.size(); ++ i){
			auto [x, y] = src[i];
			assert(0 <= x && x < (int)grid.size());
			assert(0 <= y && y < (int)grid[x].size());
			src_index[i] = index[x][y];
		}
		_run(grid, cell_weight, src_index);
	}
	// Check if (x, y) is visited during the last dijkstra-like call.
	bool visited(int x, int y) const{
		return was[index[x][y]] == attempt;
	}
	// Check if u is visited during the last dijkstra-like call.
	bool visited(int u) const{
		return was[u] == attempt;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>grid_dijkstra</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
