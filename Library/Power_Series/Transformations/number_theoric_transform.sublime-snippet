<snippet>
	<content><![CDATA[
// Source: https://github.com/atcoder/ac-library/blob/master/atcoder/convolution.hpp
// T must be of modular type
// mod must be a prime
// Requires modular
template<class T>
struct number_theoric_transform_wrapper{
	static vector<T> root; // root[i]^(2^i) = 1
	static vector<T> invroot;
	static vector<T> rate2;
	static vector<T> invrate2;
	static vector<T> rate3;
	static vector<T> invrate3;
	static void init(){
		if(!root.empty()) return;
		const int rank = __builtin_ctzll(T::mod() - 1);
		root.resize(rank + 1);
		invroot.resize(rank + 1);
		rate2.resize(rank + 1);
		invrate2.resize(rank + 1);
		rate3.resize(rank + 1);
		invrate3.resize(rank + 1);
		root[rank] = T::primitive_root().power(T::mod() - 1 >> rank);
		invroot[rank] = T{1} / root[rank];
		for(auto i = rank - 1; i >= 0; -- i){
			root[i] = root[i + 1] * root[i + 1];
			invroot[i] = invroot[i + 1] * invroot[i + 1];
		}
		T prod = T{1}, invprod = T{1};
		for(auto i = 0; i < rank - 1; ++ i){
			rate2[i] = root[i + 2] * prod;
			invrate2[i] = invroot[i + 2] * invprod;
			prod *= invroot[i + 2];
			invprod *= root[i + 2];
		}
		prod = T{1}, invprod = T{1};
		for(auto i = 0; i < rank - 2; ++ i){
			rate3[i] = root[i + 3] * prod;
			invrate3[i] = invroot[i + 3] * invprod;
			prod *= invroot[i + 3];
			invprod *= root[i + 3];
		}
	}
	static vector<T> buffer0, buffer1, buffer2, buffer3, buffer4;
	// n must be a power of two
	// p must have next n memories allocated
	// transform(p)[i] = \sum_{j=0}^{n-1} (w_n)^{bitrev(i)*j}*p[j]
	// inverse_transform(p)[i] = 1/n * \sum_{j=0}^{n-1} (w_n)^{-i*bitrev(j)}*p[j]
	// O(n * log(n))
	template<class T_ptr>
	static void transform(int n, T_ptr p, bool invert = false){
		assert(n && __builtin_popcount(n) == 1 && (T::mod() - 1) % n == 0);
		init();
		int h = __lg(n);
		if(invert == false){
			for(auto len = 0; len < h; ){ // p[i, i+(n>>len), i+2*(n>>len), ..] is transformed
				if(h - len == 1){
					int power = 1 << h - len - 1;
					modular rot = 1;
					for(auto s = 0; s < 1 << len; ++ s){
						int offset = s << h - len;
						for(auto i = 0; i < power; ++ i){
							auto l = p[i + offset];
							auto r = p[i + offset + power] * rot;
							p[i + offset] = l + r;
							p[i + offset + power] = l - r;
						}
						if(s + 1 != 1 << len) rot *= rate2[__builtin_ctz(s + 1)];
					}
					++ len;
				}
				else{
					// 4-base
					int power = 1 << h - len - 2;
					modular rot = 1, imag = root[2];
					for(auto s = 0; s < 1 << len; ++ s){
						modular rot2 = rot * rot;
						modular rot3 = rot2 * rot;
						int offset = s << (h - len);
						for(auto i = 0; i < power; ++ i){
							auto mod2 = 1ull * modular::mod() * modular::mod();
							auto a0 = 1ull * p[i + offset].data;
							auto a1 = 1ull * p[i + offset + power].data * rot.data;
							auto a2 = 1ull * p[i + offset + 2 * power].data * rot2.data;
							auto a3 = 1ull * p[i + offset + 3 * power].data * rot3.data;
							auto a1na3imag = 1ull * modular(a1 + mod2 - a3).data * imag.data;
							auto na2 = mod2 - a2;
							p[i + offset] = a0 + a2 + a1 + a3;
							p[i + offset + 1 * power] = a0 + a2 + (2 * mod2 - (a1 + a3));
							p[i + offset + 2 * power] = a0 + na2 + a1na3imag;
							p[i + offset + 3 * power] = a0 + na2 + (mod2 - a1na3imag);
						}
						if(s + 1 != 1 << len) rot *= rate3[__builtin_ctz(s + 1)];
					}
					len += 2;
				}
			}
		}
		else{
			for(auto len = h; len; ){ // p[i, i+(n>>len), i+2*(n>>len), ..] is transformed
				if(len == 1){
					int power = 1 << h - len;
					modular invrot = 1;
					for(auto s = 0; s < 1 << len - 1; ++ s){
						int offset = s << h - len + 1;
						for(auto i = 0; i < power; ++ i){
							auto l = p[i + offset];
							auto r = p[i + offset + power];
							p[i + offset] = l + r;
							p[i + offset + power] = (unsigned long long)(modular::mod() + l.data - r.data) * invrot.data;
						}
						if(s + 1 != 1 << len - 1) invrot *= invrate2[__builtin_ctz(s + 1)];
					}
					-- len;
				}else{
					// 4-base
					int power = 1 << h - len;
					modular invrot = 1, iimag = invroot[2];
					for(auto s = 0; s < 1 << len - 2; ++ s){
						modular invrot2 = invrot * invrot;
						modular invrot3 = invrot2 * invrot;
						int offset = s << h - len + 2;
						for(auto i = 0; i < power; ++ i){
							auto a0 = 1ull * p[i + offset + 0 * power].data;
							auto a1 = 1ull * p[i + offset + 1 * power].data;
							auto a2 = 1ull * p[i + offset + 2 * power].data;
							auto a3 = 1ull * p[i + offset + 3 * power].data;
							auto a2na3iimag = 1ull * modular((modular::mod() + a2 - a3) * iimag.data).data;
							p[i + offset] = a0 + a1 + a2 + a3;
							p[i + offset + 1 * power] = (a0 + (modular::mod() - a1) + a2na3iimag) * invrot.data;
							p[i + offset + 2 * power] = (a0 + a1 + (modular::mod() - a2) + (modular::mod() - a3)) * invrot2.data;
							p[i + offset + 3 * power] = (a0 + (modular::mod() - a1) + (modular::mod() - a2na3iimag)) * invrot3.data;
						}
						if(s + 1 != 1 << len - 2) invrot *= invrate3[__builtin_ctz(s + 1)];
					}
					len -= 2;
				}
			}
			T inv = T{1} / n;
			for(auto i = 0; i < n; ++ i) p[i] *= inv;
		}
	}
	// Double the length of the ntt array
	// n must be a power of two
	// p must have next 2n memories allocated
	// O(n * log(n))
	template<class T_ptr>
	static void double_up(int n, T_ptr p){
		assert(n && __builtin_popcount(n) == 1 && (T().mod() - 1) % (n << 1) == 0);
		buffer0.resize(n << 1);
		for(auto i = 0; i < n; ++ i) buffer0[i] = p[i];
		transform(n, p, true);
		T power = 1, r = root[__builtin_ctz(n) + 1];
		for(auto i = 0; i < n; ++ i, power *= r) p[i] *= power;
		transform(n, p);
		for(auto i = 0; i < n; ++ i) buffer0[n + i] = p[i];
		copy(buffer0.begin(), buffer0.begin() + 2 * n, p);
	}
	static vector<T> res;
	// O(n * m)
	template<class T_ptr_l, class T_ptr_r>
	static void _convolve_naive(int n, const T_ptr_l p, int m, const T_ptr_r q){
		res.assign(max(0, n + m - 1), T{0});
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j < m; ++ j) res[i + j] += p[i] * q[j];
	}
	// O((n + m) * log(n + m))
	template<class T_ptr_l, class T_ptr_r>
	static void convolve(int n, const T_ptr_l p, int m, const T_ptr_r q){
		if(min(n, m) < 55){
			_convolve_naive(n, p, m, q);
			return;
		}
		int len = n + m - 1, clen = 1 << __lg(len) + (__builtin_popcount(len) != 1);
		buffer0.assign(clen, T{0});
		copy(p, p + n, buffer0.begin());
		transform(buffer0);
		buffer1.assign(clen, T{0});
		copy(q, q + m, buffer1.begin());
		transform(buffer1);
		for(auto i = 0; i < clen; ++ i) buffer0[i] *= buffer1[i];
		transform(buffer0, true);
		res.resize(len);
		copy(buffer0.begin(), buffer0.begin() + len, res.begin());
	}
	template<class T_ptr_l, class T_ptr_r>
	static void _convolve_2d_naive(int n0, int n1, const T_ptr_l p, int m0, int m1, const T_ptr_r q){
		res.assign(max(0, n0 + m0 - 1) * max(0, n1 + m1 - 1), T{0});
		for(auto i0 = 0; i0 < n0; ++ i0) for(auto i1 = 0; i1 < n1; ++ i1) for(auto j0 = 0; j0 < m0; ++ j0) for(auto j1 = 0; j1 < m1; ++ j1) res[max(0, n1 + m1 - 1) * (i0 + j0) + (i1 + j1)] += p[n1 * i0 + i1] * q[m1 * j0 + j1];
	}
	template<class T_ptr_l, class T_ptr_r>
	static void convolve_2d(int n0, int n1, const T_ptr_l p, int m0, int m1, const T_ptr_r q){
		if(min(n0 + n1, m0 + m1) < 55){
			_convolve_2d_naive(n0, n1, p, m0, m1, q);
			return;
		}
		int len0 = n0 + m0 - 1, clen0 = 1 << __lg(len0) + (__builtin_popcount(len0) != 1);
		int len1 = n1 + m1 - 1, clen1 = 1 << __lg(len1) + (__builtin_popcount(len1) != 1);
		buffer0.assign(clen0 * clen1, T{0});
		buffer1.assign(clen0 * clen1, T{0});
		for(auto i = 0; i < n0; ++ i){
			copy(p + n1 * i, p + n1 * (i + 1), buffer0.begin() + clen1 * i);
			transform(clen1, buffer0.begin() + clen1 * i);
		}
		for(auto j = 0; j < clen1; ++ j){
			buffer2.assign(clen0, T{0});
			for(auto i = 0; i < n0; ++ i) buffer2[i] = buffer0[clen1 * i + j];
			transform(clen0, buffer2.begin());
			for(auto i = 0; i < clen0; ++ i) buffer0[clen1 * i + j] = buffer2[i];
		}
		for(auto i = 0; i < m0; ++ i){
			copy(q + m1 * i, q + m1 * (i + 1), buffer1.begin() + clen1 * i);
			transform(clen1, buffer1.begin() + clen1 * i);
		}
		for(auto j = 0; j < clen1; ++ j){
			buffer2.assign(clen0, T{0});
			for(auto i = 0; i < m0; ++ i) buffer2[i] = buffer1[clen1 * i + j];
			transform(clen0, buffer2.begin());
			for(auto i = 0; i < clen0; ++ i) buffer1[clen1 * i + j] = buffer2[i];
		}
		for(auto i = 0; i < clen0; ++ i) for(auto j = 0; j < clen1; ++ j) buffer0[clen1 * i + j] *= buffer1[clen1 * i + j];
		for(auto j = 0; j < clen1; ++ j){
			buffer2.assign(clen0, T{0});
			for(auto i = 0; i < clen0; ++ i) buffer2[i] = buffer0[clen1 * i + j];
			transform(clen0, buffer2.begin(), true);
			for(auto i = 0; i < len0; ++ i) buffer0[clen1 * i + j] = buffer2[i];
		}
		res.resize(len0 * len1);
		for(auto i = 0; i < len0; ++ i){
			transform(clen1, buffer0.begin() + clen1 * i, true);
			for(auto j = 0; j < len1; ++ j) res[len1 * i + j] = buffer0[clen1 * i + j];
		}
	}
	// O(n * m)
	template<class T_ptr_l, class T_ptr_r>
	static void _cross_correlation_naive(int n, const T_ptr_l p, int m, const T_ptr_r q){
		assert(n >= m);
		res.assign(n - m + 1, T{0});
		for(auto i = 0; i <= n - m; ++ i) for(auto j = 0; j < m; ++ j) res[i] += p[i + j] * q[j];
	}
	// O(m * log(m))
	template<class T_ptr_l, class T_ptr_r>
	static void cross_correlation(int n, const T_ptr_l p, int m, const T_ptr_r q){
		assert(n >= m);
		if(m < 55){
			_cross_correlation_naive(n, p, m, q);
			return;
		}
		int len = n, clen = 1 << __lg(len) + (__builtin_popcount(len) != 1);
		buffer0.assign(clen, T{0});
		copy(p, p + n, buffer0.begin());
		transform(buffer0);
		buffer1.assign(clen, T{0});
		copy(q, q + m, buffer1.begin());
		reverse(buffer1.begin(), buffer1.begin() + m);
		transform(buffer1);
		for(auto i = 0; i < clen; ++ i) buffer0[i] *= buffer1[i];
		transform(buffer0, true);
		res.resize(n - m + 1);
		copy(buffer0.begin() + m - 1, buffer0.begin() + n, res.begin());
	}
	// O((n + m) * log(n + m))
	template<class T_ptr>
	static void square(int n, const T_ptr p){
		if(n < 40){
			convolve_naive(n, p, n, p);
			return;
		}
		int len = 2 * n - 1, clen = 1 << __lg(len) + 1;
		buffer0.assign(clen, T{0});
		copy(p, p + n, buffer0.begin());
		transform(buffer0);
		for(auto i = 0; i < clen; ++ i) buffer0[i] *= buffer0[i];
		transform(buffer0, true);
		res.resize(len);
		copy(buffer0.begin(), buffer0.begin() + len, res.begin());
	}
	static void transform(vector<T> &p, bool invert = false){
		transform((int)p.size(), p.data(), invert);
	}
	static void double_up(vector<T> &p){
		int n = (int)p.size();
		p.resize(n << 1);
		double_up(n, p.data());
	}
	// O((n + m) * log(n + m))
	static vector<T> convolve(const vector<T> &p, const vector<T> &q){
		convolve((int)p.size(), p.data(), (int)q.size(), q.data());
		return res;
	}
	static vector<vector<T>> convolve_2d(const vector<vector<T>> &p, const vector<vector<T>> &q){
		if(p.empty() || q.empty()) return {};
		buffer3.resize((int)p.size() * (int)p[0].size());
		for(auto i = 0; i < (int)p.size(); ++ i) for(auto j = 0; j < (int)p[0].size(); ++ j) buffer3[(int)p[0].size() * i + j] = p[i][j];
		buffer4.resize((int)q.size() * (int)q[0].size());
		for(auto i = 0; i < (int)q.size(); ++ i) for(auto j = 0; j < (int)q[0].size(); ++ j) buffer4[(int)q[0].size() * i + j] = q[i][j];
		convolve_2d((int)p.size(), (int)p[0].size(), buffer3.data(), (int)q.size(), (int)q[0].size(), buffer4.data());
		vector<vector<T>> res_2d(max(0, (int)p.size() + (int)q.size() - 1), vector<T>(max(0, (int)p[0].size() + (int)q[0].size() - 1)));
		for(auto i = 0; i < (int)res_2d.size(); ++ i) for(auto j = 0; j < (int)res_2d[0].size(); ++ j) res_2d[i][j] = res[(int)res_2d[0].size() * i + j];
		return res_2d;
	}
	// O(m * log(m))
	static vector<T> cross_correlation(const vector<T> &p, const vector<T> &q){
		assert((int)p.size() >= (int)q.size());
		cross_correlation((int)p.size(), p.data(), (int)q.size(), q.data());
		return res;
	}
	// O((n + m) * log(n + m))
	static vector<T> square(const vector<T> &p){
		square((int)p.size(), p.data(), (int)p.size(), p.data());
		return res;
	}
	// O((n + m) * log(n + m))
	static vector<T> arbitrarily_convolve(const vector<T> &p, const vector<T> &q){
		using modular0 = modular_fixed_base<unsigned int, 880803841>;
		using modular1 = modular_fixed_base<unsigned int, 897581057>;
		using modular2 = modular_fixed_base<unsigned int, 998244353>;
		using ntt0 = number_theoric_transform_wrapper<modular0>;
		using ntt1 = number_theoric_transform_wrapper<modular1>;
		using ntt2 = number_theoric_transform_wrapper<modular2>;
		vector<modular0> p0((int)p.size()), q0((int)q.size());
		for(auto i = 0; i < (int)p.size(); ++ i) p0[i] = p[i].data;
		for(auto i = 0; i < (int)q.size(); ++ i) q0[i] = q[i].data;
		auto xy0 = ntt0::convolve(p0, q0);
		vector<modular1> p1((int)p.size()), q1((int)q.size());
		for(auto i = 0; i < (int)p.size(); ++ i) p1[i] = p[i].data;
		for(auto i = 0; i < (int)q.size(); ++ i) q1[i] = q[i].data;
		auto xy1 = ntt1::convolve(p1, q1);
		vector<modular2> p2((int)p.size()), q2((int)q.size());
		for(auto i = 0; i < (int)p.size(); ++ i) p2[i] = p[i].data;
		for(auto i = 0; i < (int)q.size(); ++ i) q2[i] = q[i].data;
		auto xy2 = ntt2::convolve(p2, q2);
		static const modular1 r01 = 1 / modular1(modular0::mod());
		static const modular2 r02 = 1 / modular2(modular0::mod());
		static const modular2 r12 = 1 / modular2(modular1::mod());
		static const modular2 r02r12 = r02 * r12;
		static const T w1 = modular0::mod();
		static const T w2 = w1 * modular1::mod();
		int n = (int)p.size() + (int)q.size() - 1;
		vector<T> res(n);
		for(auto i = 0; i < n; ++ i){
			using ull = unsigned long long;
			ull a = xy0[i].data;
			ull b = (xy1[i].data + modular1::mod() - a) * r01.data % modular1::mod();
			ull c = ((xy2[i].data + modular2::mod() - a) * r02r12.data + (modular2::mod() - b) * r12.data) % modular2::mod();
			res[i] = xy0[i].data + w1 * b + w2 * c;
		}
		return res;
	}
};
template<class T> vector<T> number_theoric_transform_wrapper<T>::root;
template<class T> vector<T> number_theoric_transform_wrapper<T>::invroot;
template<class T> vector<T> number_theoric_transform_wrapper<T>::rate2;
template<class T> vector<T> number_theoric_transform_wrapper<T>::invrate2;
template<class T> vector<T> number_theoric_transform_wrapper<T>::rate3;
template<class T> vector<T> number_theoric_transform_wrapper<T>::invrate3;
template<class T> vector<T> number_theoric_transform_wrapper<T>::buffer0;
template<class T> vector<T> number_theoric_transform_wrapper<T>::buffer1;
template<class T> vector<T> number_theoric_transform_wrapper<T>::buffer2;
template<class T> vector<T> number_theoric_transform_wrapper<T>::buffer3;
template<class T> vector<T> number_theoric_transform_wrapper<T>::buffer4;
template<class T> vector<T> number_theoric_transform_wrapper<T>::res;

using ntt = number_theoric_transform_wrapper<modular>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>number_theoric_transform</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
