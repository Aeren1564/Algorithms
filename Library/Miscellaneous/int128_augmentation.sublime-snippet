<snippet>
	<content><![CDATA[
istream &operator>>(istream &in, __int128_t &x){
	char s[40];
	in >> s;
	x = 0;
	for(int i = s[0] == '-'; s[i]; ++ i) x = x * 10 + s[i] - '0';
	if(s[0] == '-') x = -x;
	return in;
}
ostream &operator<<(ostream &out, __int128_t x){
	if(!x) return out << 0;
	if(x < 0) out << "-", x = -x;
	constexpr int block = 1e9;
	array<int, 6> a{};
	int it = 0;
	for(; x; x /= block) a[it ++] = x % block;
	for(-- it; it >= 0; -- it) out << a[it];
	return out;
}
__int128_t abs(__int128_t x){
	return x >= 0 ? x : -x;
}
istream &operator>>(istream &in, __uint128_t &x){
	char s[40];
	in >> s;
	x = 0;
	for(int i = s[0] == '-'; s[i]; ++ i) x = x * 10 + s[i] - '0';
	if(s[0] == '-') x = -x;
	return in;
}
ostream &operator<<(ostream &out, __uint128_t x){
	if(!x) return out << 0;
	constexpr int block = 1e9;
	array<int, 6> a{};
	int it = 0;
	for(; x; x /= block) a[it ++] = x % block;
	for(-- it; it >= 0; -- it) out << a[it];
	return out;
}
__int128_t gcd(__int128_t x, __int128_t y){
	for(x = abs(x), y = abs(y); y; swap(x, y)) x %= y;
	return x;
}
__int128_t lcm(__int128_t x, __int128_t y){
	return x / gcd(x, y) * y;
}
__uint128_t gcd(__uint128_t x, __uint128_t y){
	for(; y; swap(x, y)) x %= y;
	return x;
}
__uint128_t lcm(__uint128_t x, __uint128_t y){
	return x / gcd(x, y) * y;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>int128_augmentation</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
