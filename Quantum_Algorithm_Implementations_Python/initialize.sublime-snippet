<snippet>
	<content><![CDATA[
from qiskit import QuantumCircuit, QuantumRegister
from qiskit.circuit.library import ZGate
from math import sqrt, acos, pi

def solve(n: int, L: int)->QuantumCircuit:
	qc = QuantumCircuit(n)
	if L == 1 << n:
		qc.z(0)
		qc.x(0)
		qc.z(0)
		qc.x(0)
		return qc
	controlled = []
	ctrl_state = ""
	for bit in range(n - 1, -1, -1):
		if (L >> bit & 1) == 1:
			qc.x(bit)
			if len(controlled) == 0:
				qc.z(bit)
			else:
				qc.append(ZGate().control(len(controlled), ctrl_state = ctrl_state), controlled + [bit])
			qc.x(bit)
		controlled = [bit] + controlled
		ctrl_state += chr(ord('0') + (L >> bit & 1))
	return qc

def _check(n: int, L: int, qc: QuantumCircuit)->bool:
	eps = 1e-12
	mat = _qc_to_matrix(qc)
	for i in range(1 << n):
		for j in range(1 << n):
			if i != j and abs(mat[i][j]) > eps:
				return False
			if i == j:
				if i < L and abs(mat[i][j] + 1) > eps:
					return False
				if i >= L and abs(mat[i][j] - 1) > eps:
					return False
	return True

def _qc_to_matrix(qc: QuantumCircuit):
	import qiskit.quantum_info as qi
	import numpy as np
	np.set_printoptions(linewidth=np.inf)
	return np.array(qi.Operator(qc))

def _simulate(qc: QuantumCircuit):
	from qiskit import Aer, execute
	simulator = Aer.get_backend("statevector_simulator")
	statevector = execute(qc, simulator).result().get_statevector(qc)
	print(statevector)

def _print_circuit_info(qc: QuantumCircuit):
	mat = _qc_to_matrix(qc)
	print(qc.draw("text"))
	print(mat)
	print("depth = ", qc.depth())
	_simulate(qc)

def keep_running():
	import sys
	input = sys.stdin.readline
	while True:
		n, L = map(int,input().split())
		qc = solve(n, L)
		_print_circuit_info(qc)

def stress_test():
	for n in range(1, 11):
		for L in range(1, 1 << n | 1):
			qc = solve(n, L)
			if not _check(n, L, qc):
				print(f"WA, n = {n}, L = {L}")
				_print_circuit_info(qc)
				exit(0)
			print(f"AC, n = {n}, L = {L}")
	print("AC")

keep_running()
#stress_test()

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>initialize</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.python</scope> -->
</snippet>
