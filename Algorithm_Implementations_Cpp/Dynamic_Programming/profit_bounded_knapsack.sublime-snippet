<snippet>
	<content><![CDATA[
// given threshold and pairs of {profit, bound}, profit >= 0 and bound >= 0,
// find the maximum profit obtainable equal or less than the threshold
// O(n * th) time
// O(n * th) memory if recover_choices, otherwise O(th)
pair<int, vector<int>>
profit_bounded_knapsack(int th, const vector<array<int, 2>> &items, bool recover_choices = false){
	int n = (int)items.size();
	if(recover_choices){
		vector<vector<bool>> dp(n + 1);
		dp[0] = {true};
		for(auto i = 0; i < n; ++ i){
			auto [profit, bound] = items[i];
			if(!profit || !bound || profit > th){
				dp[i + 1] = dp[i];
				continue;
			}
			long long len = 1LL * profit * bound;
			int cth = (int)dp[i].size() - 1, ncth = min<long long>(th, cth + len);
			dp[i + 1].resize(ncth + 1);
			for(auto rem = 0; rem < profit; ++ rem){
				int sum = 0;
				for(auto x = rem; x <= ncth; x += profit){
					if(x <= cth) sum += dp[i][x];
					dp[i + 1][x] = sum;
					if(len <= x) sum -= dp[i][x - len];
				}
			}
		}
		int mxprofit = min(th, (int)dp[n].size() - 1);
		while(!dp[n][mxprofit]) -- mxprofit;
		vector<int> counts(n);
		for(auto i = n - 1, cth = mxprofit; i >= 0; -- i) while(cth >= (int)dp[i].size() || !dp[i][cth]) cth -= items[i][0], ++ counts[i];
		return {mxprofit, counts};
	}
	else{
		vector<bool> dp{true};
		for(auto i = 0; i < n; ++ i){
			auto [profit, bound] = items[i];
			if(!profit || !bound || profit > th) continue;
			long long len = 1LL * profit * bound;
			int cth = (int)dp.size() - 1, ncth = min<long long>(th, cth + len);
			vector<bool> dp_next(ncth + 1);
			for(auto rem = 0; rem < profit; ++ rem){
				int sum = 0;
				for(auto x = rem; x <= ncth; x += profit){
					if(x <= cth) sum += dp[x];
					dp_next[x] = sum;
					if(len <= x) sum -= dp[x - len];
				}
			}
			swap(dp, dp_next);
		}
		int mxprofit = min(th, (int)dp.size() - 1);
		while(!dp[mxprofit]) -- mxprofit;
		return {mxprofit, {}};
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>profit_bounded_knapsack</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
