<snippet>
	<content><![CDATA[
// (f*g)[mask] = sum{x and y = 0, x or y = mask}(f(x)g(y))
// O(n * log(n)^2)
// Requires fast_walsh_hadamard_transform
template<class T>
vector<T> convolve_subset_slow(const vector<T> &p, const vector<T> &q){
	int n = (int)p.size();
	assert(q.size() == n && __builtin_popcount(n) == 1);
	int w = __lg(n) + 1;
	vector a(w, vector<T>(n)), b(a);
	for(auto i = 0; i < n; ++ i) a[__builtin_popcount(i)][i] = p[i];
	for(auto i = 0; i < n; ++ i) b[__builtin_popcount(i)][i] = q[i];
	for(auto bit = 0; bit < w; ++ bit){
		fast_walsh_hadamard_transform<T, '|'>(a[bit]);
		fast_walsh_hadamard_transform<T, '|'>(b[bit]);
	}
	vector<T> res(n);
	for(auto bit = 0; bit < w; ++ bit){
		static vector<T> c;
		c.assign(n, 0);
		for(auto lbit = 0; lbit <= bit; ++ lbit) for(auto i = 0; i < n; ++ i) c[i] += a[lbit][i] * b[bit - lbit][i];
		fast_walsh_hadamard_transform<T, '|'>(c, true);
		for(auto i = 0; i < n; ++ i) if(__builtin_popcount(i) == bit) res[i] = c[i];
	}
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>convolve_subset_slow</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
