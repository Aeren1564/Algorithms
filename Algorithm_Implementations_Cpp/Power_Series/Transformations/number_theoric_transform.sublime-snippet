<snippet>
	<content><![CDATA[
// T must be of modular type
// mod must be a prime
// Requires modular
template<class T>
struct number_theoric_transform_wrapper{
	// i \in [2^k, 2^{k+1}) holds w_{2^k+1}^{i-2^k}
	static vector<T> root, buffer1, buffer2;
	static void adjust_root(int n){
		if(root.empty()) root = {1, 1};
		for(auto k = (int)root.size(); k < n; k <<= 1){
			root.resize(n, 1);
			T w = T::primitive_root().power((T::mod() - 1) / (k << 1));
			for(auto i = k; i < k << 1; ++ i) root[i] = i & 1 ? root[i >> 1] * w : root[i >> 1];
		}
	}
	// n must be a power of two
	// p must have next n memories allocated
	// O(n * log(n))
	template<class T_ptr>
	static void transform(int n, T_ptr p, bool invert = false){
		assert(n && __builtin_popcount(n) == 1 && (T::mod() - 1) % n == 0);
		for(auto i = 1, j = 0; i < n; ++ i){
			int bit = n >> 1;
			for(; j & bit; bit >>= 1) j ^= bit;
			j ^= bit;
			if(i < j) swap(p[i], p[j]);
		}
		adjust_root(n);
		for(auto len = 1; len < n; len <<= 1) for(auto i = 0; i < n; i += len << 1) for(auto j = 0; j < len; ++ j){
			T x = p[i + j], y = p[len + i + j] * root[len + j];
			p[i + j] = x + y, p[len + i + j] = x - y;
		}
		if(invert){
			reverse(p + 1, p + n);
			T inv_n = T(1) / n;
			for(auto i = 0; i < n; ++ i) p[i] *= inv_n;
		}
	}
	// Double the length of the ntt array
	// n must be a power of two
	// p must have next 2n memories allocated
	// O(n * log(n))
	template<class T_ptr>
	static void double_up(int n, T_ptr p){
		assert(n && __builtin_popcount(n) == 1 && (T().mod() - 1) % (n << 1) == 0);
		buffer1.resize(n << 1);
		for(auto i = 0; i < n; ++ i) buffer1[i << 1] = p[i];
		transform(n, p, true);
		adjust_root(n << 1);
		for(auto i = 0; i < n; ++ i) p[i] *= root[n | i];
		transform(n, p);
		for(auto i = 0; i < n; ++ i) buffer1[i << 1 | 1] = p[i];
		copy(buffer1.begin(), buffer1.begin() + 2 * n, p);
	}
	static vector<T> res;
	// O(n * m)
	template<class T_ptr_l, class T_ptr_r>
	static void _convolute_naive(int n, const T_ptr_l p, int m, const T_ptr_r q){
		res.assign(max(0, n + m - 1), T{0});
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j < m; ++ j) res[i + j] += p[i] * q[j];
	}
	// O((n + m) * log(n + m))
	template<class T_ptr_l, class T_ptr_r>
	static void convolute(int n, const T_ptr_l p, int m, const T_ptr_r q){
		if(min(n, m) < 55){
			_convolute_naive(n, p, m, q);
			return;
		}
		int len = n + m - 1, clen = 1 << __lg(len) + (__builtin_popcount(len) != 1);
		buffer1.assign(clen, 0);
		copy(p, p + n, buffer1.begin());
		transform(buffer1);
		buffer2.assign(clen, 0);
		copy(q, q + m, buffer2.begin());
		transform(buffer2);
		for(auto i = 0; i < clen; ++ i) buffer1[i] *= buffer2[i];
		transform(buffer1, true);
		res.resize(len);
		copy(buffer1.begin(), buffer1.begin() + len, res.begin());
	}
	// O(n * m)
	template<class T_ptr_l, class T_ptr_r>
	static void _cross_correlation_naive(int n, const T_ptr_l p, int m, const T_ptr_r q){
		assert(n >= m);
		res.assign(n - m + 1, T{0});
		for(auto i = 0; i <= n - m; ++ i) for(auto j = 0; j < m; ++ j) res[i] += p[i + j] * q[j];
	}
	// O(m * log(m))
	template<class T_ptr_l, class T_ptr_r>
	static void cross_correlation(int n, const T_ptr_l p, int m, const T_ptr_r q){
		assert(n >= m);
		if(m < 55){
			_cross_correlation_naive(n, p, m, q);
			return;
		}
		int len = n, clen = 1 << __lg(len) + (__builtin_popcount(len) != 1);
		buffer1.assign(clen, 0);
		copy(p, p + n, buffer1.begin());
		transform(buffer1);
		buffer2.assign(clen, 0);
		copy(q, q + m, buffer2.begin());
		reverse(buffer2.begin(), buffer2.begin() + m);
		transform(buffer2);
		for(auto i = 0; i < clen; ++ i) buffer1[i] *= buffer2[i];
		transform(buffer1, true);
		res.resize(n - m + 1);
		copy(buffer1.begin() + m - 1, buffer1.begin() + n, res.begin());
	}
	// O((n + m) * log(n + m))
	template<class T_ptr>
	static void square(int n, const T_ptr p){
		if(n < 40){
			convolute_naive(n, p, n, p);
			return;
		}
		int len = 2 * n - 1, clen = 1 << __lg(len) + 1;
		buffer1.assign(clen, 0);
		copy(p, p + n, buffer1.begin());
		transform(buffer1);
		for(auto i = 0; i < clen; ++ i) buffer1[i] *= buffer1[i];
		transform(buffer1, true);
		res.resize(len);
		copy(buffer1.begin(), buffer1.begin() + len, res.begin());
	}
	static void transform(vector<T> &p, bool invert = false){
		transform((int)p.size(), p.data(), invert);
	}
	static void double_up(vector<T> &p){
		int n = (int)p.size();
		p.resize(n << 1);
		double_up(n, p.data());
	}
	// O((n + m) * log(n + m))
	static vector<T> convolute(const vector<T> &p, const vector<T> &q){
		convolute((int)p.size(), p.data(), (int)q.size(), q.data());
		return res;
	}
	// O(m * log(m))
	static vector<T> cross_correlation(const vector<T> &p, const vector<T> &q){
		assert((int)p.size() >= (int)q.size());
		cross_correlation((int)p.size(), p.data(), (int)q.size(), q.data());
		return res;
	}
	// O((n + m) * log(n + m))
	static vector<T> square(const vector<T> &p){
		square((int)p.size(), p.data(), (int)p.size(), p.data());
		return res;
	}
	// O((n + m) * log(n + m))
	static vector<T> arbitrarily_convolute(const vector<T> &p, const vector<T> &q){
		using modular0 = modular_fixed_base<unsigned int, 880803841>;
		using modular1 = modular_fixed_base<unsigned int, 897581057>;
		using modular2 = modular_fixed_base<unsigned int, 998244353>;
		using ntt0 = number_theoric_transform_wrapper<modular0>;
		using ntt1 = number_theoric_transform_wrapper<modular1>;
		using ntt2 = number_theoric_transform_wrapper<modular2>;
		vector<modular0> p0((int)p.size()), q0((int)q.size());
		for(auto i = 0; i < (int)p.size(); ++ i) p0[i] = p[i].data;
		for(auto i = 0; i < (int)q.size(); ++ i) q0[i] = q[i].data;
		auto xy0 = ntt0::convolute(p0, q0);
		vector<modular1> p1((int)p.size()), q1((int)q.size());
		for(auto i = 0; i < (int)p.size(); ++ i) p1[i] = p[i].data;
		for(auto i = 0; i < (int)q.size(); ++ i) q1[i] = q[i].data;
		auto xy1 = ntt1::convolute(p1, q1);
		vector<modular2> p2((int)p.size()), q2((int)q.size());
		for(auto i = 0; i < (int)p.size(); ++ i) p2[i] = p[i].data;
		for(auto i = 0; i < (int)q.size(); ++ i) q2[i] = q[i].data;
		auto xy2 = ntt2::convolute(p2, q2);
		static const modular1 r01 = 1 / modular1(modular0::mod());
		static const modular2 r02 = 1 / modular2(modular0::mod());
		static const modular2 r12 = 1 / modular2(modular1::mod());
		static const modular2 r02r12 = r02 * r12;
		static const T w1 = modular0::mod();
		static const T w2 = w1 * modular1::mod();
		int n = (int)p.size() + (int)q.size() - 1;
		vector<T> res(n);
		for(auto i = 0; i < n; ++ i){
			using ull = unsigned long long;
			ull a = xy0[i].data;
			ull b = (xy1[i].data + modular1::mod() - a) * r01.data % modular1::mod();
			ull c = ((xy2[i].data + modular2::mod() - a) * r02r12.data + (modular2::mod() - b) * r12.data) % modular2::mod();
			res[i] = xy0[i].data + w1 * b + w2 * c;
		}
		return res;
	}
};
template<class T> vector<T> number_theoric_transform_wrapper<T>::root;
template<class T> vector<T> number_theoric_transform_wrapper<T>::buffer1;
template<class T> vector<T> number_theoric_transform_wrapper<T>::buffer2;
template<class T> vector<T> number_theoric_transform_wrapper<T>::res;

using ntt = number_theoric_transform_wrapper<modular>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>number_theoric_transform</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
