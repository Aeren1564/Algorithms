<snippet>
	<content><![CDATA[
// Returns p(X-d)
// O(n * log(n))
// Requires modular and number_theoric_transform
template<class T, class FFT = ntt>
vector<T> taylor_shift(const vector<T> &p, T d){
	if((int)p.size() <= 1) return p;
	int n = (int)p.size();
	vector<T> fact(n, 1), invfact(n, 1);
	for(auto i = 2; i < n; ++ i) fact[i] = fact[i - 1] * i;
	invfact[n - 1] = 1 / fact[n - 1];
	for(auto i = n - 2; i >= 2; -- i) invfact[i] = invfact[i + 1] * (i + 1);
	vector<T> f = p, g(n);
	T pow = 1;
	for(auto i = 0; i < n; ++ i){
		f[i] *= fact[i];
		g[i] = pow * invfact[i];
		pow *= -d;
	}
	reverse(g.begin(), g.end());
	f = FFT::convolve(f, g);
	f.erase(f.begin(), f.begin() + n - 1);
	for(auto i = 0; i < n; ++ i) f[i] *= invfact[i];
	return f;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>taylor_shift</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
