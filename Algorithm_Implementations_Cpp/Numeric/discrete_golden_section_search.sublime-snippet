<snippet>
	<content><![CDATA[
// Assumes there exists p, q in [low, high) such that
// f(i) > f(i+1) if i<p,
// f(i) = f(i+1) if p<=i<q
// f(i) < f(i+1) if q<=i
// Returns a point in [p,q]
// O(log (high - low))
// Minimizes the # of function calls
template<class T, class Compare = less<>>
T discrete_golden_section_search(T low, T high, auto f, Compare cmp = less<>()){
	assert(low < high);
	if(high - low >= 10){
		double phi = (sqrt(5) - 1) / 2;
		T mid1 = high - (high - low) * phi, mid2 = low + (high - low) * phi;
		auto val1 = f(mid1), val2 = f(mid2);
		while(high - low >= 10){
			if(cmp(val1, val2)){
				high = mid2, mid2 = mid1, val2 = val1;
				mid1 = high - (high - low) * phi, val1 = f(mid1);
			}
			else{
				low = mid1, mid1 = mid2, val1 = val2;
				mid2 = low + (high - low) * phi, val2 = f(mid2);
			}
		}
	}
	T res = low;
	auto val = f(res);
	for(auto x = low + 1; x < high; ++ x) if(auto xval = f(x); cmp(xval, val)) res = x, val = xval;
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>discrete_golden_section_search</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
