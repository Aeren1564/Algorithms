<snippet>
	<content><![CDATA[
// Returns the list of intersection points
// In case of two intersections, the direction of list[0]->list[1] is equal to the direction you get after rotating c1->c2 by pi/4
template<class T>
pair<int, array<point<double>, 2>> circle_intersection(const circle<T> &c1, const circle<T> &c2){
	assert(c1 != c2);
	T d_sq = squared_distance(c1.center, c2.center);
	T l = (c1.radius - c2.radius) * (c1.radius - c2.radius);
	T r = (c1.radius + c2.radius) * (c1.radius + c2.radius);
	if(d_sq < l || r < d_sq) return {};
	if(l == d_sq) return {1, {(c2.radius * point<double>(c1.center) - c1.radius * point<double>(c2.center)) / (c2.radius - c1.radius)}};
	if(r == d_sq) return {1, {(c2.radius * point<double>(c1.center) + c1.radius * point<double>(c2.center)) / (c2.radius + c1.radius)}};
	double d = sqrt(d_sq);
	double x = (c1.radius * c1.radius - c2.radius * c2.radius + d * d) / (2 * d);
	double y = d - x;
	double h = sqrt(max(0.0, c1.radius * c1.radius - x * x));
	pointd m = (y * point<double>(c1.center) + x * point<double>(c2.center)) / (x + y);
	pointd p = (c2.center - c1.center).perp().unit() * h;
	return {2, {m - p, m + p}};
}
template<class T>
pair<int, array<point<long double>, 2>> circle_intersectionl(const circle<T> &c1, const circle<T> &c2){
	assert(c1 != c2);
	T d_sq = squared_distance(c1.center, c2.center);
	T l = (c1.radius - c2.radius) * (c1.radius - c2.radius);
	T r = (c1.radius + c2.radius) * (c1.radius + c2.radius);
	if(d_sq < l || r < d_sq) return {};
	if(l == d_sq) return {1, {(c2.radius * point<long double>(c1.center) - c1.radius * point<long double>(c2.center)) / (c2.radius - c1.radius)}};
	if(r == d_sq) return {1, {(c2.radius * point<long double>(c1.center) + c1.radius * point<long double>(c2.center)) / (c2.radius + c1.radius)}};
	long double d = sqrtl(d_sq);
	long double x = (c1.radius * c1.radius - c2.radius * c2.radius + d * d) / (2 * d);
	long double y = d - x;
	long double h = sqrtl(max(0.0L, c1.radius * c1.radius - x * x));
	pointd m = (y * point<long double>(c1.center) + x * point<long double>(c2.center)) / (x + y);
	pointd p = (c2.center - c1.center).perp().unit() * h;
	return {2, {m - p, m + p}};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>circle_intersection</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
