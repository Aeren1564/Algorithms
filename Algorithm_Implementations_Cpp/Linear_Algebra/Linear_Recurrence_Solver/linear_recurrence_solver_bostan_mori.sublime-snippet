<snippet>
	<content><![CDATA[
// Store the linear recurrence relation of form \sum_{t<=i<t+n} coef[i-t] * init[i] = init[t+n]
// T must be of modular type
// Requires modular, number_theoric_transform, and rational_polynomial_single_term_extraction
template<class T, class ntt>
struct linear_recurrence_solver_bostan_mori{
	int n;
	vector<T> init, coef, p, q;
	linear_recurrence_solver_bostan_mori(const vector<T> &init, const vector<T> &coef): n((int)coef.size()), init(init), coef(coef), p(n), q(n + 1, 1){
		assert(coef.size() == init.size());
		for(auto i = 0; i < n; ++ i) q[n - i] = -coef[i];
		p = ntt::convolve(init, q);
		p.resize(n);
	}
	// Berlekamp Massey Algorithm
	// Find a minimum linear recurrence relation
	// T must ba a field
	// O(n^2 + n * log(mod)))
	linear_recurrence_solver_bostan_mori(const vector<T> &s){
		int sz = (int)size(s);
		vector<T> b = {-1};
		coef = {-1};
		T y = 1;
		for(auto t = 1; t <= sz; ++ t){
			int l = (int)coef.size(), m = (int)b.size();
			T x = 0;
			for(auto i = 0; i < l; ++ i) x += coef[i] * s[t - l + i];
			b.push_back(0);
			++ m;
			if(x == 0) continue;
			T freq = x / y;
			if(l < m){
				auto tmp = coef;
				coef.insert(coef.begin(), m - l, 0);
				for(auto i = 0; i < m; ++ i) coef[m - 1 - i] -= freq * b[m - 1 - i];
				b = tmp;
				y = x;
			}
			else for(auto i = 0; i < m; ++ i) coef[l - 1 - i] -= freq * b[m - 1 - i];
		}
		coef.pop_back();
		*this = linear_recurrence_solver_bostan_mori(vector<T>(s.begin(), s.begin() + coef.size()), coef);
	}
	// O(n * log(n) * log(i))
	template<class U>
	T operator[](U i) const{
		assert(0 <= i);
		if(i < n) return init[i];
		return rational_polynomial_single_term_extraction<T, U, ntt>(p, q, i);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>linear_recurrence_solver_bostan_mori</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
