<snippet>
	<content><![CDATA[
// Requires kdarray
// O(K * Product(n)) processing, O(2^K) per query
template<class T, class BO = plus<>, class IO = minus<>>
struct kdsum{
	BO bin_op;
	IO inv_op;
	T id;
	kdarray<T> val;
	template<class U>
	kdsum(const kdarray<U> &arr, BO bin_op = plus<>{}, IO inv_op = minus<>{}, T id = 0LL): val(arr), bin_op(bin_op), inv_op(inv_op), id(id){
		vector<int> cur, from;
		for(int t = 0, ncnt; t < val.K; ++ t){
			cur.assign(val.K, 0), from.assign(val.K, 0), -- from[t], ncnt = 1;
			while(1){
				T &c = val[cur];
				c = bin_op(c, ncnt ? id : val[from]);
				for(int i = val.K - 1; i >= 0; -- i){
					if(from[i] < 0) -- ncnt;
					if(++ from[i], ++ cur[i] < val.n[i]) break;
					if(!i) goto ESCAPE;
					cur[i] = 0, ncnt += (i == t) - (from[i] < 0), from[i] = (i != t) - 1;
				}
			}
			ESCAPE:;
		}
	}
	T query(const vector<int> &low, const vector<int> &high){
		T res = id;
		static vector<int> cur; cur.assign(val.K, 0);
		for(int mask = 0, ncnt = 0; mask < 1 << val.K; ++ mask){
			for(int bit = 0; bit < val.K; ++ bit){
				if(mask & 1 << bit){
					ncnt += !low[bit] - !~cur[bit], cur[bit] = low[bit] - 1;
					break;
				}
				else ncnt += !high[bit] - !~cur[bit], cur[bit] = high[bit] - 1;
			}
			res = __builtin_popcount(mask) & 1 ? inv_op(res, ncnt ? id : val[cur]) : bin_op(res, ncnt ? id : val[cur]);
		}
		return res;
	}
	T query(vector<int> high){
		for(int d = 0; d < val.K; ++ d){
			if(high[d]) -- high[d];
			else return id;
		}
		return val[high];
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>kdsum</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
