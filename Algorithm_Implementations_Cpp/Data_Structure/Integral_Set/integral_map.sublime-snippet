<snippet>
	<content><![CDATA[
// Efficient map when only the keys are integers in range [offset, offset + len)
template<class T, class U>
struct integral_map{
	int _size = 0;
	T len, offset, maxval;
	vector<int> freq;
	vector<int> data_key;
	vector<U> data_value;
	integral_map(int len, T offset = {}): len(len), offset(offset), maxval(offset + len), freq(len), data_key(len), data_value(len){ }
	integral_map(const vector<pair<T, U>> &init, int len, T offset = 0): offset(offset), maxval(offset + len), freq(len), data_value(len), _size((int)init.size()){
		for(auto [x, y]: init){
			assert(offset <= x && x < maxval);
			data_value[x - offset] = y;
			assert(!freq[x - offset]);
			++ freq[x - offset];
		}
		data_key = freq;
		for(auto i = 1; i <= len; ++ i) if(i + (i & -i) <= len) data_key[i + (i & -i) - 1] += data_key[i - 1];
	}
	integral_map(const integral_map &otr): _size(otr._size), offset(otr.offset), maxval(otr.maxval), freq(otr.freq), data_key(otr.data_key), data_value(otr.data_value){
	}
	vector<pair<T, U>> to_array(){
		vector<pair<T, U>> res;
		for(auto x = offset; x < maxval; ++ x) if(freq[x - offset]) res.push_back({x, data_value[x - offset]});
		return res;
	}
	friend ostream &operator<<(ostream &out, const integral_map &ms){
		auto a = ms.to_array();
		out << "{";
		for(auto i = 0; i < (int)a.size(); ++ i){
			out << "{" << a[i].first << ", " << a[i].second << "}";
			if(i + 1 < (int)a.size()) out << ", ";
		}
		return out << "}";
	}
	// O(1)
	int size() const{
		return _size;
	}
	// O(1)
	bool empty() const{
		return !_size;
	}
	// O(1)
	bool contains(T x) const{
		assert(offset <= x && x < maxval);
		return freq[x - offset];
	}
	// O(log(len))
	bool insert(T x, U y){
		assert(offset <= x && x < maxval);
		if(!freq[x - offset]){
			++ _size;
			++ freq[x - offset];
			for(auto p = x - offset + 1; p <= len; p += p & -p) ++ data_key[p - 1];
			data_value[x - offset] = y;
			return true;
		}
		return false;
	}
	// O(log(len)) if true, O(1) otherwise
	bool erase(T x){
		assert(offset <= x && x < maxval);
		if(freq[x - offset]){
			-- _size;
			-- freq[x - offset];
			for(auto p = x - offset + 1; p <= len; p += p & -p) -- data_key[p - 1];
			return true;
		}
		return false;
	}
	// O(log(len))
	pair<T, U> find_by_order(int k) const{
		if(k < 0) return {offset - 1, {}};
		if(k >= _size) return {maxval, {}};
		int p = 0;
		for(auto i = __lg(len + 1), sum = 0; i >= 0; -- i) if(p + (1 << i) <= len && sum + data_key[p + (1 << i) - 1] <= k){
			sum += data_key[p + (1 << i) - 1];
			p += 1 << i;
		}
		return {p + offset, data_value[p]};
	}
	// O(log(len))
	int order_of_key(T x) const{
		if(x < offset) return 0;
		if(maxval <= x) return _size;
		int sum = 0;
		for(auto r = x - offset; r > 0; r -= r & -r) sum += data_key[r - 1];
		return sum;
	}
	// O(log(len))
	T front() const{
		assert(_size);
		return find_by_order(0) + offset;
	}
	// O(log(len))
	T back() const{
		assert(_size);
		return find_by_order(_size - 1) + offset;
	}
	// Returns {maxval, {}} if no such element
	// O(log(len))
	pair<T, U> lower_bound(T x) const{
		int sum = 0;
		for(auto r = x - offset; r > 0; r -= r & -r) sum += data_key[r - 1];
		return find_by_order(sum);
	}
	// O(log(len)), returns {maxval, {}} if no such element
	pair<T, U> upper_bound(T x) const{
		int sum = 0;
		for(auto r = x - offset + 1; r > 0; r -= r & -r) sum += data_key[r - 1];
		return find_by_order(sum);
	}
	// Returns {minval, {}} if no such element
	// O(log(len))
	T reverse_lower_bound(T x) const{
		int sum = 0;
		for(auto r = x - offset + 1; r > 0; r -= r & -r) sum += data_key[r - 1];
		return find_by_order(sum - 1);
	}
	// Returns {minval, {}} if no such element
	// O(log(len))
	T reverse_upper_bound(T x) const{
		int sum = 0;
		for(auto r = x - offset; r > 0; r -= r & -r) sum += data_key[r - 1];
		return find_by_order(sum - 1);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>integral_map</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
