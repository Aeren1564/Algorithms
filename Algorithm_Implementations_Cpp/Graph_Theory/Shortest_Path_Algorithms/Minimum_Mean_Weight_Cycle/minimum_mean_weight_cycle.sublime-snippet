<snippet>
	<content><![CDATA[
// G must be a weighted directed graph
// Returns the edge list for minimum mean weight cycle if there are any
// O(|V| * (|V| + |E|))
// Requires graph
template<class T, class U>
optional<vector<int>> minimum_mean_weight_cycle(const graph<T> &g){
	int n = g.n;
	static const U inf = numeric_limits<U>::max();
	vector<vector<U>> dp(n + 1, vector<U>(n, inf));
	vector<vector<int>> pe(n + 1, vector<int>(n, -1));
	fill(dp[0].begin(), dp[0].end(), 0);
	for(auto x = 1; x <= n; ++ x) for(auto id = 0; id < (int)g.edge.size(); ++ id){
		if(g.ignore && g.ignore(id)) continue;
		auto [u, v, w] = g.edge[id];
		if(dp[x - 1][u] != inf && dp[x - 1][u] + w < dp[x][v]) dp[x][v] = dp[x - 1][u] + w, pe[x][v] = id;
	}
	int src = -1;
	array<U, 2> cost{1, 0};
	for(auto u = 0; u < n; ++ u) if(dp[n][u] != inf){
		array<U, 2> cur{-1, 0};
		for(auto x = 0; x <= n; ++ x) if(cur[0] * (n - x) < (dp[n][u] - dp[x][u]) * cur[1]) cur = {dp[n][u] - dp[x][u], U(n - x)};
		if(cost[0] * cur[1] > cur[0] * cost[1]) src = u, cost = cur;
	}
	if(!~src) return {};
	vector<int> path, was(n, -1);
	for(auto u = src, x = n; ; u = g.edge[pe[x --][u]].from){
		if(~was[u]) return vector<int>{path.rbegin(), path.rend() - was[u]};
		was[u] = (int)path.size();
		path.push_back(pe[x][u]);
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>minimum_mean_weight_cycle</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
