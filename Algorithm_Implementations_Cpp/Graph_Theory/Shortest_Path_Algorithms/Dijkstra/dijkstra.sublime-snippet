<snippet>
	<content><![CDATA[
template<class T>
struct dijkstra{
	int n;
	T base_dist;
	vector<T> dist;
	vector<int> pv;
	vector<int> pe;
	vector<int> order;
	vector<int> pos;
	vector<int> root_of;
	vector<int> root;
	vector<int> depth;
	vector<int> was;
	dijkstra(T base_dist = T{0}): base_dist(base_dist){ }
	void init(int n){
		this->n = n;
		dist.assign(n, base_dist);
		pv.assign(n, -1);
		pe.assign(n, -1);
		order.clear();
		pos.assign(n, -1);
		root_of.assign(n, -1);
		root.clear();
		depth.assign(n, -1);
		was.assign(n, -2);
		attempt = -1;
	}
	int attempt;
	priority_queue<pair<T, int>, vector<pair<T, int>>, greater<pair<T, int>>> pq;
	// act_greater(v, u): dist[v] has been updated to larger value by u
	// act_equal(v, u): dist[v] equals the length of shortest path to v through u
	// O(((# of reachable nodes) + (# of reachable edges)) * log((# of reachable edges)))
	// Requires graph
	template<class Graph>
	void _run(const Graph &g, const vector<int> &src, auto act_greater, auto act_equal){
		for(auto u: src){
			if(was[u] == attempt) continue;
			was[u] = attempt;
			pq.push({dist[u] = base_dist, u});
			depth[u] = 0;
			root_of[u] = u;
			root.push_back(u);
			pv[u] = -1;
			pe[u] = -1;
		}
		order.clear();
		while(!pq.empty()){
			auto [d, u] = pq.top();
			pq.pop();
			if(d != dist[u]) continue;
			pos[u] = (int)order.size();
			order.push_back(u);
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				auto &e = g.edge[id];
				assert(0 <= e.cost);
				if(was[v] != attempt || dist[u] + e.cost < dist[v]){
					was[v] = attempt;
					depth[v] = depth[u] + 1;
					pv[v] = u;
					pe[v] = id;
					root_of[v] = root_of[u];
					pq.push({dist[v] = dist[u] + e.cost, v});
					act_greater(v, u);
				}
				else if(dist[u] + e.cost == dist[v]) act_equal(v, u);
			}
		}
	}
	// Requires graph
	template<class Graph>
	void run(const Graph &g, const vector<int> &src, auto act_greater, auto act_equal){
		assert(g.n <= n);
		if(g.n == 0) return;
		for(auto u: src) assert(0 <= u && u < g.n);
		root.clear(), order.clear();
		++ attempt;
		_run(g, src, act_greater, act_equal);
	}
	// Requires graph
	template<class Graph>
	void run(const Graph &g, const vector<int> &src){
		run(g, src, [&](int, int){  }, [&](int, int){  });
	}
	// Check if u is visited during the last dijkstra-like call.
	bool visited(int u) const{
		return was[u] == attempt;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>dijkstra</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
