<snippet>
	<content><![CDATA[
struct functional_graph_processor{
	functional_graph_processor(const vector<int> &next): n((int)next.size()), cycle_id(n, -1), cycle_pos(n, -1), cycle_prev(n, -1), size(n), root(n, -1), depth(n, -1), abr(n){
		vector<int> was(n), _size;
		for(auto u = 0; u < n; ++ u){
			if(was[u]) continue;
			int v = u;
			while(!was[v]){
				was[v] = true;
				v = next[v];
			}
			if(!~depth[v]){
				int w = v;
				vector<int> c;
				while(!~depth[w]){
					cycle_id[w] = (int)cycle.size();
					cycle_pos[w] = (int)c.size();
					c.push_back(w);
					root[w] = w;
					depth[w] = 0;
					w = next[w];
				}
				cycle.push_back(c);
				_size.push_back((int)cycle.size());
			}
			auto dfs = [&](auto self, int u)->void{
				if(~depth[u]) return;
				int v = next[u];
				self(self, v);
				root[u] = root[v];
				++ _size[cycle_id[root[u]]];
				depth[u] = depth[v] + 1;
				abr[v].push_back(u);
			};
			dfs(dfs, u);
		}
		for(auto u = 0; u < n; ++ u){
			size[u] = _size[cycle_id[root[u]]];
			if(~cycle_pos[u]) cycle_prev[next[u]] = u;
		}
	}
	// Requires graph
	template<class Graph>
	functional_graph_processor(const Graph &g){
		int n = g.n;
		assert(n == (int)g.edge.size());
		vector<int> pv(n, -1), state(n), on_cycle(n);
		vector<vector<int>> cycle;
		auto dfs = [&](auto self, int u, int p)->void{
			state[u] = 1;
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				auto &e = g.edge[id];
				int v = g(u, id);
				if(v == p) continue;
				if(state[v] == 1){
					cycle.emplace_back();
					for(auto w = u; w != v; w = pv[w]){
						cycle.back().push_back(w);
						on_cycle[w] = true;
					}
					cycle.back().push_back(v);
					on_cycle[v] = true;
				}
				else if(state[v] == 0){
					pv[v] = u;
					self(self, v, u);
				}
			}
			state[u] = 2;
		};
		for(auto u = 0; u < n; ++ u){
			if(state[u] != 2){
				assert(state[u] == 0);
				dfs(dfs, u, -1);
			}
		}
		vector<int> next(n, -1);
		auto dfs2 = [&](auto self, int u, int p)->void{
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				auto &e = g.edge[id];
				int v = g(u, id);
				if(v == p || on_cycle[v]) continue;
				next[v] = u;
				self(self, v, u);
			}
		};
		for(auto &c: cycle){
			for(auto i = 0; i < (int)c.size(); ++ i) next[c[i]] = c[(i + 1) % (int)c.size()];
			for(auto u: c) dfs2(dfs2, u, -1);
		}
		*this = functional_graph_processor(next);
	}
	int n;
	vector<vector<int>> cycle;
	vector<int> cycle_id; // id of the cycle it belongs to, -1 if not part of one
	vector<int> cycle_pos; // position in its cycle, -1 if not part of one
	vector<int> cycle_prev; // previous vertex in its cycle, -1 if not part of one
	vector<int> size; // size of its weakly connected component
	vector<int> root; // first reachable node in a cycle
	vector<int> depth; // distance to its root
	vector<vector<int>> abr; // forest of arborescences of reversed edges not on the cycles
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>functional_graph_processor</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
