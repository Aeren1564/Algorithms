<snippet>
	<content><![CDATA[
// Decompose the given loopless undirected graph into endpoint disjoint paths and cycles
// O(|V| + |E|)
template<class T>
void euler_decomopsition(const graph<T> &g, auto process_path, auto process_cycle){
	int n = g.n, m = (int)g.edge.size();
	vector<array<int, 2>> edge;
	vector<vector<array<int, 2>>> adj(m);
	for(auto u = 0; u < n; ++ u){
		int j = -1;
		for(auto i: g.adj[u]){
			if(g.ignore && g.ignore(i)) continue;
			if(!~j) j = i;
			else{
				int id = (int)edge.size();
				adj[i].push_back({id, u}), adj[j].push_back({id, u});
				edge.push_back({i, j});
				j = -1;
			}
		}
	}
	vector<int> vis(m);
	auto update = [&](int u)->void{
		vis[u] = true;
		vector<int> path{u};
		int end = g.edge[u].from;
		for(auto [id, w]: adj[u]){
			reverse(path.begin(), path.end());
			for(auto v = u ^ edge[id][0] ^ edge[id][1]; !vis[v]; ){
				vis[v] = true;
				path.push_back(v);
				end = w ^= g.edge[v].from ^ g.edge[v].to;
				if((int)adj[v].size() == 1) break;
				id ^= adj[v][0][0] ^ adj[v][1][0];
				v ^= edge[id][0] ^ edge[id][1];
			}
		}
		int start = end;
		for(auto it = path.rbegin(); it != path.rend(); ++ it) start ^= g.edge[*it].from ^ g.edge[*it].to;
		if(start != end) process_path(start, end, path);
		else process_cycle(start, path);
	};
	for(auto u = 0; u < m; ++ u){
		if((int)adj[u].size() == 2 || vis[u] || g.ignore && g.ignore(u)) continue;
		update(u);
	}
	for(auto u = 0; u < m; ++ u){
		if(vis[u] || g.ignore && g.ignore(u)) continue;
		update(u);
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>euler_decomopsition</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
