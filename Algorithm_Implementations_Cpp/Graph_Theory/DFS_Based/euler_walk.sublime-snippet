<snippet>
	<content><![CDATA[
// returns an euler walk starting at s given that there are edge_cnt edges reachable from s
// Returns the edge list
// O(|V|+|E|)
template<class T>
optional<vector<int>> euler_walk(const graph<T> &g, int s, int edge_cnt){
	if(!edge_cnt) return {{}};
	int n = g.n, m = (int)g.edge.size();
	vector<int> deg(n), its(n), used(m), res_e;
	vector<array<int, 2>> st = {{s, -1}};
	++ deg[s]; // to allow Euler paths, not just cycles
	while(!st.empty()){
		auto [u, id] = st.back();
		int &it = its[u], end = (int)g.adj[u].size();
		if(g.ignore) while(it < end && g.ignore(g.adj[u][it])) ++ it;
		if(it == end){
			res_e.push_back(id), st.pop_back();
			continue;
		}
		int id_next = g.adj[u][it ++];
		if(!used[id_next]){
			int v = g(u, id_next);
			-- deg[u], ++ deg[v];
			used[id_next] = 1, st.push_back({v, id_next});
		}
	}
	for(auto d: deg) if(d < 0 || (int)res_e.size() != edge_cnt + 1) return {};
	return {{res_e.rbegin() + 1, res_e.rend()}};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>euler_walk</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
