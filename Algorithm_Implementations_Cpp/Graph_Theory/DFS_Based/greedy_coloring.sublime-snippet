<snippet>
	<content><![CDATA[
// for each weakly connected components, try finding a coloring such that (color[u] + 1) % C == color[v] for all edges.
// undirected graphs are regarded as its canonical directed representation
// C=1 : returns weakly connected components
// C=2 : returns bipartite colorings
// O(|V| + |E|)
// Requires graph
template<class T, int C = 2>
void greedy_coloring(const graph<T> &g, auto act){
	int n = g.n;
	vector<int> was(n, -1);
	auto rg = g.transpose();
	for(auto u = 0; u < n; ++ u){
		if(~was[u]) continue;
		bool perfect = true;
		array<vector<int>, C> split;
		auto dfs = [&](auto self, int u)->void{
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				auto &e = g.edge[id];
				int v = u ^ e.from ^ e.to;
				if(!~was[v]){
					split[was[v] = (was[u] + 1) % C].push_back(v);
					self(self, v);
				}
				else if(was[v] != (was[u] + 1) % C){
					perfect = false;
				}
			}
			for(auto id: rg.adj[u]){
				if(rg.ignore && rg.ignore(id)) continue;
				auto &e = rg.edge[id];
				int v = u ^ e.from ^ e.to;
				if(!~was[v]){
					split[was[v] = (was[u] + C - 1) % C].push_back(v);
					self(self, v);
				}
				else if(was[v] != (was[u] + C - 1) % C){
					perfect = false;
				}
			}
		};
		split[was[u] = 0].push_back(u);
		dfs(dfs, u);
		act(perfect, split);
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>greedy_coloring</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
