<snippet>
	<content><![CDATA[
// Requries graph
template<class T>
vector<int> find_dominators(const graph<T> &g, int root){
	int n = g.n;
	vector<int> pos(n, -1), order, parent(n, -1);
	auto dfs = [&](auto dfs, int u)->void{
		pos[u] = (int)order.size();
		order.push_back(u);
		for(auto id : g.adj[u]){
			if(g.ignore != nullptr && g.ignore(id)) continue;
			auto &e = g.edge[id];
			int v = e.to;
			if(!~pos[v]){
				parent[v] = u;
				dfs(dfs, v);
			}
		}
	};
	dfs(dfs, root);
	vector<int> p(n), best(n), sdom = pos;
	iota(p.begin(), p.end(), 0), iota(best.begin(), best.end(), 0);
	auto find_best = [&](auto find_best, int x)->int{
		if(p[x] != x){
			int u = find_best(find_best, p[x]);
			if(sdom[u] < sdom[best[x]]) best[x] = u;
			p[x] = p[p[x]];
		}
		if(sdom[best[p[x]]] < sdom[best[x]]) best[x] = best[p[x]];
		return best[x];
	};
	graph<int> rg = g.transpose();
	vector<int> idom(n, -1), link(n, -1);
	vector<vector<int>> bucket(n);
	for(auto it = (int)order.size() - 1; it >= 0; -- it){
		int w = order[it];
		for(auto id: rg.adj[w]){
			if(rg.ignore && rg.ignore(id)) continue;
			auto &e = rg.edge[id];
			int u = e.to;
			if(~pos[u]) sdom[w] = min(sdom[w], sdom[find_best(find_best, u)]);
		}
		idom[w] = order[sdom[w]];
		for(auto u: bucket[w]) link[u] = find_best(find_best, u);
		for(auto id: g.adj[w]){
			if(g.ignore != nullptr && g.ignore(id)) continue;
			auto &e = g.edge[id];
			int u = e.to;
			if(parent[u] == w) p[u] = w;
		}
		bucket[order[sdom[w]]].push_back(w);
	}
	for(auto it = 1; it < (int)order.size(); ++ it) idom[order[it]] = idom[link[order[it]]];
	return idom; // idom[i] -- immediate dominator for vertex i
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>find_dominators</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
