<snippet>
	<content><![CDATA[
// Requires graph
struct centroid_decomposition{
	int n, root; // the root of the arborescence
	graph<int> abr; // stores the arborescence
	vector<int> pv; // Parent vertex in the decomposition
	vector<int> pe; // Parent eedge in the decomposition
	vector<int> order; // DFS order of the decomposition tree
	vector<int> pos; // Starting position in the DFS order
	vector<int> end; // Ending position in the DFS order
	vector<int> size; // Size of the subtree in the decomposition
	vector<int> depth; // Depth in the decomposition
	vector<int> pos_as_child; // u is the pos_as_child[u]-th child
	// g must be a tree
	// O(n log n)
	template<class T>
	centroid_decomposition(const graph<T> &g): n(g.n), abr(n), pv(n, -1), pe(n, -1), pos(n, -1), end(n, -1), size(n), depth(n), pos_as_child(n, -1){
		vector<int> dead(n), size(n);
		auto centroid = [&](int s){
			int u = s, pe = -1;
			while(true){
				for(auto id: g.adj[u]){
					if(id == pe || g.ignore && g.ignore(id)) continue;
					int v = g(u, id);
					if(dead[v]) continue;
					if(size[v] > size[s] >> 1){
						u = v, pe = id;
						goto NEXT;
					}
				}
				break;
				NEXT:;
			}
			return u;
		};
		auto dfs_size = [&](auto self, int u, int p)->void{
			size[u] = 1;
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				if(p == v || dead[v]) continue;
				self(self, v, u);
				size[u] += size[v];
			}
		};
		auto construct = [&](auto self, int u, int p)->void{
			dfs_size(dfs_size, u, p);
			dead[u = centroid(u)] = true;
			this->size[u] = size[u];
			if(~p){
				pv[u] = p;
				pos_as_child[u] = (int)abr.adj[p].size();
				pe[u] = abr.orient(p, u);
			}
			else root = u;
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				if(!dead[v]) self(self, v, u);
			}
		};
		construct(construct, 0, -1);
		auto dfs = [&](auto self, int u)->void{
			pos[u] = (int)order.size();
			order.push_back(u);
			for(auto id: abr.adj[u]){
				int v = abr.edge[id].to;
				depth[v] = depth[u] + 1;
				self(self, v);
			}
			end[u] = (int)order.size();
		};
		dfs(dfs, root);
	}
	vector<vector<int>> step; // step[u][i]: # of edges from u to its i-th decomposition parent
	template<class T>
	void init_step(const graph<T> &g){
		step.assign(n, {});
		auto set_step = [&](auto self, int u, int pe, int d)->void{
			for(auto id: g.adj[u]){
				if(id == pe || g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				if(depth[v] <= d) continue;
				step[v].push_back(step[u].back() + 1);
				self(self, v, id, d);
			}
		};
		for(auto t = n - 1; t >= 0; -- t){
			int u = order[t];
			step[u].push_back(0);
			set_step(set_step, u, -1, depth[u]);
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>centroid_decomposition</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
