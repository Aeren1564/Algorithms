<snippet>
	<content><![CDATA[
// pajenegod orz
// Requires graph
struct shallowest_decomposition{
	int n, root; // the root of the arborescence
	graph<int> abr; // stores the arborescence
	vector<int> pv; // Parent vertex in the decomposition
	vector<int> pe; // Parent eedge in the decomposition
	vector<int> order; // DFS order of the decomposition tree
	vector<int> pos; // Starting position in the DFS order
	vector<int> end; // Ending position in the DFS order
	vector<int> size; // Size of the subtree in the decomposition
	vector<int> depth; // Depth in the decomposition
	vector<int> pos_as_child; // u is the pos_as_child[u]-th child
	// g must be a tree
	// O(n)
	template<class T>
	shallowest_decomposition(const graph<T> &g): n(g.n), abr(n), pv(n, -1), pe(n, -1), pos(n, -1), end(n, -1), size(n, 1), depth(n), pos_as_child(n, -1){
		assert(n);
		vector<int> dp(n);
		vector<vector<int>> stacks(__lg(n) + 1);
		auto create_chain = [&](int labels, int u)->void{
			while(labels){
				int label = __lg(labels);
				labels ^= 1 << label;
				int v = stacks[label].back();
				stacks[label].pop_back();
				pv[v] = u;
				pos_as_child[v] = (int)abr.adj[u].size();
				pe[v] = abr.orient(u, v);
				u = v;
			}
		};
		auto construct = [&](auto self, int u, int pe)->void{
			int seen = 0, seen_twice = 0;
			for(auto id: g.adj[u]){
				if(id == pe || g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				self(self, v, id);
				seen_twice |= seen & dp[v];
				seen |= dp[v];
			}
			int temp = ~seen & -(1 << (seen_twice ? __lg(seen_twice) + 1: 0));
			int label = temp & -temp;
			dp[u] = (label | seen) & -label;
			stacks[__lg(label)].push_back(u);
			for(auto t = (int)g.adj[u].size() - 1; t >= 0; -- t){
				int id = g.adj[u][t];
				if(g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				create_chain(dp[v] & label - 1, u);
			}
		};
		construct(construct, 0, -1);
		root = stacks[__lg(dp[0])].back();
		stacks[__lg(dp[0])].pop_back();
		create_chain(dp[0] ^ dp[root], root);
		auto dfs = [&](auto self, int u)->void{
			pos[u] = (int)order.size();
			order.push_back(u);
			for(auto id: abr.adj[u]){
				int v = abr.edge[id].to;
				depth[v] = depth[u] + 1;
				self(self, v);
				size[u] += size[v];
			}
			end[u] = (int)order.size();
		};
		dfs(dfs, root);
	}
	vector<vector<int>> step; // step[u][i]: # of edges from u to its i-th decomposition parent
	template<class T>
	void init_step(const graph<T> &g){
		step.assign(n, {});
		auto set_step = [&](auto self, int u, int pe, int d)->void{
			for(auto id: g.adj[u]){
				if(id == pe || g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				if(depth[v] <= d) continue;
				step[v].push_back(step[u].back() + 1);
				self(self, v, id, d);
			}
		};
		for(auto t = n - 1; t >= 0; -- t){
			int u = order[t];
			step[u].push_back(0);
			set_step(set_step, u, -1, depth[u]);
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>shallowest_decomposition</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
