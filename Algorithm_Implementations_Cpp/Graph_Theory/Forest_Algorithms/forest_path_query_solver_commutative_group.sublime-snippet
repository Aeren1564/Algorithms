<snippet>
	<content><![CDATA[
// Requires graph
struct forest_path_query_solver_commutative_group{
	int n;
	vector<int> pv;
	vector<int> pos;
	vector<int> end;
	vector<int> root_of;
	vector<int> was;
	forest_path_query_solver_commutative_group(){ }
	template<class T>
	forest_path_query_solver_commutative_group(const graph<T> &g){
		vector<int> src(g.n);
		iota(src.begin(), src.end(), 0);
		*this = forest_path_query_solver_commutative_group(g, src);
	}
	template<class T>
	forest_path_query_solver_commutative_group(const graph<T> &g, const vector<int> &src){
		init(g.n);
		build(g, src);
	}
	void init(int n){
		this->n = n;
		pv.assign(n, -1);
		pos.assign(n, -1);
		end.assign(n, -1);
		root_of.assign(n, -1);
		was.assign(n, -2);
		attempt = -1;
	}
	int attempt;
	// Prepare a linear DS of length 2*g.n filled with identity elements of a commutative group
	template<class T>
	void build(const graph<T> &g, const vector<int> &src){
		assert(g.n <= n);
		++ attempt;
		int it = 0;
		auto dfs = [&](auto self, int u, int pe)->void{
			assert(was[u] != attempt);
			was[u] = attempt;
			pos[u] = it ++;
			for(auto id: g.adj[u]){
				if(pe == id || g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				pv[v] = u;
				root_of[v] = root_of[u];
				self(self, v, id);
			}
			end[u] = it ++;
		};
		for(auto r: src){
			if(was[r] == attempt) continue;
			root_of[r] = r;
			dfs(dfs, r, -1);
		}
	}
	// Check if u is visited during the last build call
	bool visited(int u) const{
		assert(0 <= u && u < n);
		return was[u] == attempt;
	}
	// Check if u is an ancestor of v in some spanning tree.
	bool ancestor_of(int u, int v) const{
		assert(visited(u) && visited(v));
		return root_of[u] == root_of[v] && pos[u] <= pos[v] && end[v] <= end[u];
	}
	// f(p, c): DS[p] += c * x
	// Represents updating value of node u / parent edge of u by x
	void update(int u, auto f) const{
		assert(0 <= u && u < n);
		f(pos[u], 1), f(end[u], -1);
	}
	// Let res = identity
	// f(r, c): res += c * DS[0, r)
	// Final value of res represents the sum of values in the u-v path
	// 'lca' must be the lca of u and v
	// 3 or 4 f() calls
	template<int VALS_IN_EDGES = false>
	void query(int u, int v, int lca, auto f) const{
		assert(ancestor_of(lca, u) && ancestor_of(lca, v));
		f(pos[u] + 1, 1), f(pos[v] + 1, 1);
		if constexpr(VALS_IN_EDGES) f(pos[lca] + 1, -2);
		else{
			f(pos[lca] + 1, -1);
			if(~pv[lca]) f(pos[pv[lca]], -1);
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>forest_path_query_solver_commutative_group</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
