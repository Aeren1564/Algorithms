<snippet>
	<content><![CDATA[
// Requires graph and range_minmax_query_solver
struct lca_solver{
	int n;
	vector<int> pv, pe, pos, end, depth, order, pos_order;
	range_minmax_query_solver<int> rmq;
	// O(n * log(n))
	template<class T>
	lca_solver(const graph<T> &g, const vector<int> &roots): n(g.n), pv(n, -1), pe(n, -1), depth(n), pos(n, -1), end(n, -1){
		int it = 0;
		auto dfs = [&](auto self, int u)->void{
			pos[u] = (int)order.size();
			order.push_back(u), pos_order.push_back(pos[u]);
			for(auto id: g.adj[u]){
				if(id == pe[u] || g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				pv[v] = u, pe[v] = id;
				depth[v] = depth[u] + 1;
				self(self, v);
				order.push_back(u), pos_order.push_back(pos[u]);
			}
			end[u] = (int)order.size();
		};
		for(auto root: roots) if(!~pos[root]) dfs(dfs, root);
		rmq = {pos_order};
	}
	// assumes u and v are on the same component
	// O(1)
	int lca(int u, int v) const{
		if(u == v) return u;
		tie(u, v) = minmax(pos[u], pos[v]);
		return order[rmq.query(u, v)];
	}
	// assumes u and v are on the same component
	// O(1)
	int steps(int u, int v, int w = -1) const{
		return depth[u] + depth[v] - 2 * depth[~w ? w : lca(u, v)];
	}
	// O(1)
	bool ancestor_of(int u, int v) const{
		return pos[u] <= pos[v] && end[v] <= end[u];
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lca_solver</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
