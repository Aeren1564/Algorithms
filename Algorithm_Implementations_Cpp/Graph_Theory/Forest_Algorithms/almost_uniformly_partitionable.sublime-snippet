<snippet>
	<content><![CDATA[
// Implementation of http://www.ecei.tohoku.ac.jp/alg/nishizeki/sub/j/DVD/PDF_P/P109.pdf
// Returns an array a of length p where a[i] = [there exists a partition of the tree g into i+1 subtrees
// such that sum of weight of each components is in [low, high)
// O(p^3 * |V|)
// Requires graph
template<class T, class U>
vector<int> almost_uniformly_partitionable(const graph<T> &g, const vector<U> &weight, int p, U low, U high){
	assert(p >= 0 && low <= high);
	if(!p || low == high || any_of(weight.begin(), weight.end(), [&](auto x){ return x >= high; })) return vector<int>(p);
	vector<int> sz(g.n, 1);
	const U len = high - low;
	auto dfs = [&](auto self, int u, int pe)->vector<vector<array<U, 2>>>{
		vector<vector<array<U, 2>>> dp(min(p, sz[u]));
		dp[0].push_back({weight[u], weight[u] + 1});
		for(auto id: g.adj[u]){
			if(id == pe || g.ignore && g.ignore(id)) continue;
			int v = g(u, id);
			auto dpv = self(self, v, id);
			vector<int> valid(p);
			for(auto i = 0; i < (int)dpv.size(); ++ i) for(auto [l, r]: dpv[i]) if(low < r && l < high){
				valid[i] = true;
				break;
			}
			vector<vector<array<U, 2>>> dp_next(min(p, sz[u] + sz[v]));
			for(auto i = 0; i < (int)dp_next.size(); ++ i){
				vector<array<U, 2>> intervals;
				U minl = numeric_limits<U>::max(), maxl = numeric_limits<U>::min();
				for(auto j = max(0, i - (int)dpv.size() + 1); j < min((int)dp.size(), i + 1); ++ j) for(auto [l, r]: dp[j]) for(auto [ll, rr]: dpv[i - j]){
					intervals.push_back({l + ll, r + rr - 1});
					minl = min(minl, l + ll);
					maxl = max(maxl, l + ll);
				}
				for(auto j = 0; j < min(i, (int)dp.size()); ++ j) if(valid[i - 1 - j]) for(auto [l, r]: dp[j]){
					intervals.push_back({l, r});
					minl = min(minl, l);
					maxl = max(maxl, l);
				}
				if(intervals.empty()) continue;
				vector<array<U, 2>> groups((maxl - minl) / len + 1, {numeric_limits<U>::max(), numeric_limits<U>::min()});
				for(auto [l, r]: intervals){
					int i = (l - minl) / len;
					groups[i] = {min(groups[i][0], l), max(groups[i][1], r)};
				}
				for(auto [l, r]: groups){
					l = min(l, high), r = min(r, high);
					if(l < r){
						if(dp_next[i].empty() || l - dp_next[i].back()[1] >= len) dp_next[i].push_back({l, r});
						else dp_next[i].back()[1] = max(dp_next[i].back()[1], r);
					}
				}
			}
			sz[u] += sz[v];
			swap(dp, dp_next);
		}
		return dp;
	};
	auto dp = dfs(dfs, 0, -1);
	vector<int> res(p);
	for(auto i = 0; i < p; ++ i) for(auto [l, r]: dp[i]) if(low < r && l < high){
		res[i] = true;
		break;
	}
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>almost_uniformly_partitionable</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
