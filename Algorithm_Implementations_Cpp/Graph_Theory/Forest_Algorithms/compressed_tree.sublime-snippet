<snippet>
	<content><![CDATA[
// Build the minimal tree containing all the nodes
// Returns {vertex list in dfs order of lca_solver, downward-directed edge list}
// O(|subset| * log(|subset|))
// Requires graph and lca_solver
pair<vector<int>, vector<array<int, 2>>> compressed_tree(const lca_solver &ls, const vector<int> &subset){
	auto order = subset;
	const auto &p = ls.pos;
	auto cmp = [&](int u, int v){ return p[u] != p[v] ? p[u] < p[v] : u < v; };
	sort(order.begin(), order.end(), cmp);
	order.erase(unique(order.begin(), order.end()), order.end());
	for(auto i = 1, sz = (int)order.size(); i < sz; ++ i) order.push_back(ls.lca(order[i - 1], order[i]));
	sort(order.begin(), order.end(), cmp), order.erase(unique(order.begin(), order.end()), order.end());
	vector<array<int, 2>> downward_edge;
	for(auto i = 1; i < (int)order.size(); ++ i) downward_edge.push_back({ls.lca(order[i - 1], order[i]), order[i]});
	return {order, downward_edge};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>compressed_tree</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
