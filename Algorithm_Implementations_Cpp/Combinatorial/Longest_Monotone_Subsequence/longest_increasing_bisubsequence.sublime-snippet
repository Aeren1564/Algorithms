<snippet>
	<content><![CDATA[
// Returns the indices
// O(n log^2 n)
template<class T, class U, class CompareT = less<>, class CompareU = less<>>
vector<int> longest_increasing_bisubsequence(const vector<T> &a, const vector<U> &b, CompareT cmpT = less<>(), CompareU cmpU = less<>()){
	int n = (int)a.size();
	assert((int)b.size() == n);
	auto cmp = [&](int i, int j)->bool{
		return cmpT(a[i], a[j]) ? true : cmpT(a[j], a[i]) ? false : cmpU(b[i], b[j]);
	};
	vector<set<int, decltype(cmp)>> active;
	vector<int> prev(n, -1);
	for(auto i = 0; i < n; ++ i){
		auto it = partition_point(active.begin(), active.end(), [&](const auto &s){
			auto it = s.lower_bound(i);
			return it != s.begin() && cmpU(b[*std::prev(it)], b[i]);
		});
		if(it != active.begin()) prev[i] = *std::prev(std::prev(it)->lower_bound(i));
		if(it == active.end()) active.push_back(set<int, decltype(cmp)>(cmp)), it = std::prev(active.end());
		auto &s = *it;
		for(auto it2 = next(s.insert(i).first); it2 != s.end() && cmpU(b[i], b[*it2]); it2 = s.erase(it2));
	}
	int len = (int)active.size(), cur = *active.back().begin();
	vector<int> res(len);
	while(len --) res[len] = cur, cur = prev[cur];
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>longest_increasing_bisubsequence</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
