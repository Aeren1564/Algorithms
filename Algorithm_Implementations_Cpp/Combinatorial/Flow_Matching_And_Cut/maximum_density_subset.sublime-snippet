<snippet>
	<content><![CDATA[
// Implementation of https://www2.eecs.berkeley.edu/Pubs/TechRpts/1984/CSD-84-171.pdf
// Density of a graph is sum of edge weights plus vertex weights, divided by the number of vertices. Returns a subgraph with the maximum density
// U must be able to hold 4 * |V|^2 * (sum(edge weight) + max(vertex weight))
// O(log(|V|)) computations of min cut on a graph with |V| vertices and |V| + |E| edges
// Requires flow_network, dinic, and graph
template<class T, class U>
vector<int> maximum_density_subset(const graph<T> &g, vector<U> vertex_weight = {}){
	for(auto e: g.edge) assert(e.cost >= 0);
	int n = g.n;
	if(n == 1) return {0};
	const U scale = (U)2 * n * (n - 1);
	if(vertex_weight.empty()) vertex_weight.assign(n, 0);
	for(auto &x: vertex_weight) x *= scale;
	U shift = 1 + 2 * max<U>(0, *max_element(vertex_weight.begin(), vertex_weight.end()));
	vector<U> deg(n);
	for(auto id = 0; id < (int)g.edge.size(); ++ id){
		if(g.ignore && g.ignore(id)) continue;
		auto [u, v, w] = g.edge[id];
		w *= scale;
		deg[u] += w, deg[v] += w, shift += w;
	}
	flow_network<U> F(n + 2);
	dinic_maximum_flow<U> D(F);
	int source = n, sink = n + 1;
	vector<int> edge_id(n);
	for(auto u = 0; u < n; ++ u){
		F.orient(source, u, shift);
		edge_id[u] = F.orient(u, sink, shift - deg[u] - 2 * vertex_weight[u]);
	}
	for(auto id = 0; id < (int)g.edge.size(); ++ id){
		if(g.ignore && g.ignore(id)) continue;
		auto [u, v, w] = g.edge[id];
		F.link(u, v, w * scale);
	}
	U cut_weight;
	vector<int> left_cut, right_cut;
	auto notenough = [&](U guess)->bool{
		F.clear_flow();
		for(auto u = 0; u < n; ++ u){
			int id = edge_id[u];
			F.edge[id].capacity += 2 * guess;
		}
		tie(cut_weight, left_cut, right_cut) = D.minimum_cut(source, sink);
		for(auto u = 0; u < n; ++ u){
			int id = edge_id[u];
			F.edge[id].capacity -= 2 * guess;
		}
		return (int)left_cut.size() >= 2;
	};
	U low = 0, high = shift;
	while(high - low >= 2){
		U mid = low + (high - low >> 1);
		(notenough(mid) ? low : high) = mid;
	}
	assert(notenough(low));
	left_cut.pop_back();
	return left_cut;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>maximum_density_subset</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
