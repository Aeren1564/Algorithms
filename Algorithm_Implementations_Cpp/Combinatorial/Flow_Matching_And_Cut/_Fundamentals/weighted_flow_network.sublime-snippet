<snippet>
	<content><![CDATA[
template<class T, class C>
struct weighted_flow_network{
	struct E{
		int from, to;
		T capacity, flow;
		C cost;
	};
	vector<vector<int>> adj;
	vector<E> edge;
	int n;
	C cost = 0;
	weighted_flow_network(int n): n(n), adj(n){ }
	void clear_flow(){
		for(auto &e: edge) e.flow = 0;
		cost = 0;
	}
	int link(int from, int to, T cap, C cost){
		assert(0 <= from && from < n && 0 <= to && to < n);
		int ind = orient(from, to, cap, cost);
		orient(to, from, cap, cost);
		return ind;
	}
	int orient(int from, int to, T cap, C cost){
		assert(0 <= from && from < n && 0 <= to && to < n);
		int ind = (int)edge.size();
		adj[from].push_back((int)edge.size());
		edge.push_back({from, to, cap, 0, cost});
		adj[to].push_back((int)edge.size());
		edge.push_back({to, from, 0, 0, -cost});
		return ind;
	}
	void add_flow(int i, T f){
		edge[i].flow += f;
		cost += f * edge[i].cost;
		edge[i ^ 1].flow -= f;
	}
	friend ostream &operator<<(ostream &out, const weighted_flow_network &F){
		out << "\n";
		for(auto &e: F.edge){
			out << "{" << e.from << " -> " << e.to << ", " << e.cost << ", " << e.flow << "/" << e.capacity << "}\n";
		}
		return out;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>weighted_flow_network</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
