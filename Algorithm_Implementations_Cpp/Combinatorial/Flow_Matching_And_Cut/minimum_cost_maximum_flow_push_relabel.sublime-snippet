<snippet>
	<content><![CDATA[
// Source: https://github.com/dacin21/dacin21_codebook/blob/master/flow/mincost.cpp
// Requires flow_network_weighted
template<class T, class C>
struct minimum_cost_maximum_flow_push_relabel{
	flow_network_weighted<T, C> &F;
	minimum_cost_maximum_flow_push_relabel(flow_network_weighted<T, C> &F): F(F){ }
	vector<int> in_q, cur;
	vector<T> ex;
	vector<C> h;
	vector<vector<int>> hs;
	vector<int> co;
	T _maximum_flow(int source, int sink){
		int n = F.n;
		ex.assign(n, 0);
		h.assign(n, 0);
		hs.assign(n << 1, {});
		co.assign(n << 1, 0);
		cur.assign(n, 0);
		h[source] = n;
		ex[sink] = 1;
		co[0] = n - 1;
		for(auto id: F.adj[source]){
			auto &e = F.edge[id];
			T delta = e.capacity - e.flow;
			if(!ex[e.to] && delta > 0) hs[h[e.to]].push_back(e.to);
			F.add_flow(id, delta);
			ex[e.from] -= delta, ex[e.to] += delta;
		}
		if(!hs[0].empty()){
			for(auto hi = 0; hi >= 0; ){
				int u = hs[hi].back();
				hs[hi].pop_back();
				while(ex[u] > 0){
					if(cur[u] == (int)F.adj[u].size()){
						h[u] = numeric_limits<C>::max();
						for(auto i = 0; i < (int)F.adj[u].size(); ++ i){
							auto &e = F.edge[F.adj[u][i]];
							if(e.flow < e.capacity && h[u] > h[e.to] + 1) h[u] = h[e.to] + 1, cur[u] = i;
						}
						if(++ co[h[u]], !-- co[hi] && hi < n) for(auto i = 0; i < n; ++ i) if(hi < h[i] && h[i] < n){
							-- co[h[i]];
							h[i] = n + 1;
						}
						hi = h[u];
					}
					else{
						int id = F.adj[u][cur[u]];
						auto &e = F.edge[id];
						if(e.flow < e.capacity && h[u] == h[e.to] + 1){
							T delta = min(ex[u], e.capacity - e.flow);
							if(!ex[e.to] && delta > 0) hs[h[e.to]].push_back(e.to);
							F.add_flow(id, delta);
							ex[e.from] -= delta, ex[e.to] += delta;
						}
						else ++ cur[u];
					}
				}
				while(hi >= 0 && hs[hi].empty()) -- hi;
			}
		}
		return -ex[source];
	}
	// O(flow * log(n * max_edge_cost)) = O(n^3 * log(n * C))
	pair<T, C> solve(int source, int sink){
		assert(0 <= min(source, sink) && max(source, sink) < F.n && source != sink);
		static constexpr int scale = 2;
		F.clear_flow();
		for(auto &e: F.edge) e.cost *= F.n;
		T flow = _maximum_flow(source, sink);
		int n = F.n;
		h.assign(n, 0);
		ex.assign(n, 0);
		in_q.assign(n, false);
		cur.assign(n, 0);
		C eps = 0;
		for(auto &e: F.edge) eps = max(eps, abs(e.cost));
		auto push = [&](int id, T f)->void{
			auto &e = F.edge[id];
			f = min(f, e.capacity - e.flow);
			F.add_flow(id, f);
			ex[e.from] -= f, ex[e.to] += f;
		};
		auto relabel = [&](int u)->void{
			C h_next = numeric_limits<C>::min() / 2;
			for(auto i = 0; i < (int)F.adj[u].size(); ++ i){
				auto &e = F.edge[F.adj[u][i]];
				if(e.flow < e.capacity && h_next < h[e.to] - e.cost) h_next = h[e.to] - e.cost, cur[u] = i;
			}
			h[u] = h_next - eps;
		};
		vector<int> q;
		for(; eps; eps >>= scale){
			q.clear();
			fill(cur.begin(), cur.end(), 0);
			for(auto u = 0; u < n; ++ u) for(auto id: F.adj[u]){
				auto &e = F.edge[id];
				if(h[u] + e.cost - h[e.to] < 0 && e.flow < e.capacity) push(id, e.capacity - e.flow);
			}
			for(auto u = 0; u < n; ++ u) if(ex[u] > 0){
				q.push_back(u);
				in_q[u] = true;
			}
			for(auto beg = 0; beg < (int)q.size(); ++ beg){
				int u = q[beg];
				in_q[u] = false;
				while(ex[u] > 0){
					if(cur[u] == (int)F.adj[u].size()) relabel(u);
					for(auto &i = cur[u], deg = (int)F.adj[u].size(); i < deg; ++ i){
						int id = F.adj[u][i];
						auto &e = F.edge[id];
						if(h[u] + e.cost - h[e.to] < 0){
							push(id, ex[u]);
							if(ex[e.to] > 0 && !in_q[e.to]){
								q.push_back(e.to);
								in_q[e.to] = true;
							}
							if(ex[u] == 0) break;
						}
					}
				}
			}
			if(eps > 1 && eps >> scale == 0) eps = 1 << scale;
		}
		for(auto &e: F.edge) e.cost /= n;
		F.cost /= n;
		return {flow, F.cost};
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>minimum_cost_maximum_flow_push_relabel</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
