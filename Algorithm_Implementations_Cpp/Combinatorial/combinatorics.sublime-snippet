<snippet>
	<content><![CDATA[
template<class T>
struct combinatorics{
#ifdef LOCAL
	#define ASSERT(c) assert(c)
#else
	#define ASSERT(c) 42
#endif
	// O(n)
	static vector<T> precalc_fact(int n){
		vector<T> f(n + 1, 1);
		for(auto i = 1; i <= n; ++ i) f[i] = f[i - 1] * i;
		return f;
	}
	// O(n * m)
	static vector<vector<T>> precalc_C(int n, int m){
		vector<vector<T>> c(n + 1, vector<T>(m + 1));
		for(auto i = 0; i <= n; ++ i) for(auto j = 0; j <= min(i, m); ++ j) c[i][j] = i && j ? c[i - 1][j - 1] + c[i - 1][j] : T(1);
		return c;
	}
	int SZ = 0;
	vector<T> inv, fact, invfact;
	combinatorics(){ }
	// O(SZ)
	combinatorics(int SZ): SZ(SZ), inv(SZ + 1, 1), fact(SZ + 1, 1), invfact(SZ + 1, 1){
		for(auto i = 1; i <= SZ; ++ i) fact[i] = fact[i - 1] * i;
		invfact[SZ] = 1 / fact[SZ];
		for(auto i = SZ - 1; i >= 0; -- i){
			invfact[i] = invfact[i + 1] * (i + 1);
			inv[i + 1] = invfact[i + 1] * fact[i];
		}
	}
	// O(1)
	T C(int n, int k) const{
		ASSERT(0 <= min(n, k) && max(n, k) <= SZ);
		return n >= k ? fact[n] * invfact[k] * invfact[n - k] : T{0};
	}
	// O(1)
	T P(int n, int k) const{
		ASSERT(0 <= min(n, k) && max(n, k) <= SZ);
		return n >= k ? fact[n] * invfact[n - k] : T{0};
	}
	// O(1)
	T H(int n, int k) const{
		ASSERT(0 <= min(n, k));
		if(n == 0) return 0;
		return C(n + k - 1, k);
	}
	// Multinomial Coefficient
	T mC(int n, const vector<int> &a) const{
		ASSERT((int)a.size() >= 2 && accumulate(a.begin(), a.end(), 0) == n);
		ASSERT(0 <= min(n, *min_element(a.begin(), a.end())) && max(n, *max_element(a.begin(), a.end())) <= SZ);
		T res = fact[n];
		for(auto x: a) res *= invfact[x];
		return res;
	}
	// Multinomial Coefficient
	template<class... U, typename enable_if<(is_integral_v<U> && ...)>::type* = nullptr>
	T mC(int n, U... pack){
		ASSERT(sizeof...(pack) >= 2 && (... + pack) == n);
		return (fact[n] * ... * invfact[pack]);
	}
	// O(min(k, n - k))
	T naive_C(long long n, long long k) const{
		ASSERT(0 <= min(n, k));
		if(n < k) return 0;
		T res = 1;
		k = min(k, n - k);
		ASSERT(k <= SZ);
		for(auto i = n; i > n - k; -- i) res *= i;
		return res * invfact[k];
	}
	// O(k)
	T naive_P(long long n, int k) const{
		ASSERT(0 <= min<long long>(n, k));
		if(n < k) return 0;
		T res = 1;
		for(auto i = n; i > n - k; -- i) res *= i;
		return res;
	}
	// O(k)
	T naive_H(long long n, int k) const{
		ASSERT(0 <= min<long long>(n, k));
		return naive_C(n + k - 1, k);
	}
	// O(1)
	bool parity_C(long long n, long long k) const{
		ASSERT(0 <= min(n, k));
		return n >= k ? (n & k) == k : false;
	}
	// Number of ways to place n '('s and k ')'s starting with m copies of '(' such that in each prefix, number of '(' is equal or greater than ')'
	// Catalan(n, n, 0): n-th catalan number
	// Catalan(s, s+k-1, k-1): sum of products of k catalan numbers where the index of product sums up to s.
	// O(1)
	T Catalan(int n, int k, int m = 0) const{
		ASSERT(0 <= min({n, k, m}));
		return k <= m ? C(n + k, n) : k <= n + m ? C(n + k, n) - C(n + k, k - m - 1) : T();
	}
#undef ASSERT
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>combinatorics</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
