<snippet>
	<content><![CDATA[
// Returns four non-negative integers a, b, c, d with n=a^2+b^2+c^2+d^2
// T must be able to hold the square of n
// O(log(n)^2 * log(log(n)))
// Requires solve_fermat_two_square
template<class T>
array<T, 4> solve_lagrange_four_square(T n){
	assert(n >= 0);
	array<T, 4> res{};
	if(n <= 4) fill(res.end() - n, res.end(), 1);
	else if(n <= 7){
		res[0] = 2;
		fill(res.end() - (n - 4), res.end(), 1);
	}
	else if(n % 4 == 2){
		using ull = unsigned long long;
		auto mod_mul = [&](ull a, ull b, ull M)->ull{
			long long res = a * b - M * ull(1.L / M * a * b);
			return res + M * (res < 0) - M * (res >= (long long)M);
		};
		auto mod_pow = [&](ull b, ull e, ull mod)->ull{
			ull res = 1;
			for(; e; b = mod_mul(b, b, mod), e >>= 1) if(e & 1) res = mod_mul(res, b, mod);
			return res;
		};
		auto is_prime = [&](ull n){
			if(n < 2 || n % 6 % 4 != 1) return (n | 1) == 3;
			ull s = __builtin_ctzll(n - 1), d = n >> s;
			for(ull a: {2, 325, 9375, 28178, 450775, 9780504, 1795265022}){
				ull p = mod_pow(a, d, n), i = s;
				while(p != 1 && p != n - 1 && a % n && i --) p = mod_mul(p, p, n);
				if(p != n - 1 && i != s) return false;
			}
			return true;
		};
		T th = sqrtl(n / 2);
		while(2 * (th + 1) * (th + 1) <= n) ++ th;
		mt19937 rng(0);
		while(true){
			T x = rng() % (th + 1), y = rng() % (th + 1);
			if(n - x * x - y * y == 2 || x % 2 != y % 2 && is_prime(n - x * x - y * y)){
				auto [a, b] = solve_fermat_two_square(n - x * x - y * y);
				res = {a, b, x, y};
				break;
			}
		}
	}
	else if(n & 1){
		res = solve_lagrange_four_square(2 * n);
		sort(res.begin(), res.end(), [&](auto x, auto y){ return x % 2 == y % 2 ? x < y : x % 2 < y % 2; });
		res = {(res[1] - res[0]) / 2, (res[1] + res[0]) / 2, (res[3] - res[2]) / 2, (res[3] + res[2]) / 2};
	}
	else{
		int e = 0;
		T m = n;
		while(m % 2 == 0) ++ e, m /= 2;
		if(e & 1){
			res = solve_lagrange_four_square(2 * m);
			T p2 = 1;
			for(auto i = 0; i < e / 2; ++ i) p2 *= 2;
			for(auto &x: res) x *= p2;
		}
		else{
			res = solve_lagrange_four_square(2 * n);
			sort(res.begin(), res.end(), [&](auto x, auto y){ return x % 2 == y % 2 ? x < y : x % 2 < y % 2; });
			res = {(res[1] - res[0]) / 2, (res[1] + res[0]) / 2, (res[3] - res[2]) / 2, (res[3] + res[2]) / 2};
		}
	}
	assert(*min_element(res.begin(), res.end()) >= 0);
	assert(res[0] * res[0] + res[1] * res[1] + res[2] * res[2] + res[3] * res[3] == n);
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>solve_lagrange_four_square</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
