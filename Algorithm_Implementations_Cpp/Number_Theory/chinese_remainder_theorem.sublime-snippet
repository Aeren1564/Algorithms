<snippet>
	<content><![CDATA[
template<class T>
constexpr pair<T, T> inv_gcd(T a, T b){
	a = a % b;
	if(a < 0) a += b;
	if(a == 0) return {b, 0};
	T s = b, t = a;
	T m0 = 0, m1 = 1;
	while(t){
		T u = s / t;
		s -= t * u;
		m0 -= m1 * u;
		auto tmp = s;
		s = t, t = tmp, tmp = m0, m0 = m1, m1 = tmp;
	}
	if(m0 < 0) m0 += b / s;
	return {s, m0};
}
// Returns the pair (rem, mod)
template<class T>
pair<T, T> chinese_remainder_theorem(const vector<T> &r, const vector<T> &m){
	assert(r.size() == m.size());
	int n = (int)r.size();
	T r0 = 0, m0 = 1;
	for(auto i = 0; i < n; ++ i){
		assert(1 <= m[i]);
		T r1 = r[i] % m[i], m1 = m[i];
		if(r1 < 0) r1 += m[i];
		if(m0 < m1) swap(r0, r1), swap(m0, m1);
		if(m0 % m1 == 0){
			if(r0 % m1 != r1) return {0, 0};
			continue;
		}
		T g, im;
		tie(g, im) = inv_gcd(m0, m1);
		T u1 = (m1 / g);
		if ((r1 - r0) % g) return {0, 0};
		T x = (r1 - r0) / g % u1 * im % u1;
		r0 += x * m0, m0 *= u1;  // -> lcm(m0, m1)
		if(r0 < 0) r0 += m0;
	}
	return {r0, m0};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>chinese_remainder_theorem</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
