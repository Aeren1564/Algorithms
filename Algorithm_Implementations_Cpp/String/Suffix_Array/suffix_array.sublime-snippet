<snippet>
	<content><![CDATA[
struct suffix_array{
	vector<int> sa_naive(const vector<int> &s){
		int n = (int)s.size();
		vector<int> sa(n);
		iota(sa.begin(), sa.end(), 0);
		sort(sa.begin(), sa.end(), [&](int l, int r){
			if(l == r) return false;
			for(; l < n && r < n; ++ l, ++ r) if(s[l] != s[r]) return s[l] < s[r];
			return l == n;
		});
		return sa;
	}
	vector<int> sa_doubling(const vector<int> &s){
		int n = (int)s.size();
		vector<int> sa(n), pos = s, tmp(n);
		iota(sa.begin(), sa.end(), 0);
		for(auto k = 1; k < n; k <<= 1){
			auto cmp = [&](int x, int y){
				if(pos[x] != pos[y]) return pos[x] < pos[y];
				int rx = x + k < n ? pos[x + k] : -1;
				int ry = y + k < n ? pos[y + k] : -1;
				return rx < ry;
			};
			sort(sa.begin(), sa.end(), cmp);
			tmp[sa[0]] = 0;
			for(auto i = 1; i < n; ++ i) tmp[sa[i]] = tmp[sa[i - 1]] + (cmp(sa[i - 1], sa[i]) ? 1 : 0);
			swap(tmp, pos);
		}
		return sa;
	}
	template<int THRESHOLD_NAIVE = 10, int THRESHOLD_DOUBLING = 40>
	vector<int> sa_is(const vector<int> &s, int sigma){
		int n = (int)s.size();
		if(n == 0) return {};
		if(n == 1) return {0};
		if(n == 2){
			if(s[0] < s[1]) return {0, 1};
			else return {1, 0};
		}
		if(n < THRESHOLD_NAIVE) return sa_naive(s);
		if(n < THRESHOLD_DOUBLING) return sa_doubling(s);
		vector<int> sa(n);
		vector<bool> ls(n);
		for(auto i = n - 2; i >= 0; -- i) ls[i] = (s[i] == s[i + 1]) ? ls[i + 1] : (s[i] < s[i + 1]);
		vector<int> sum_l(sigma), sum_s(sigma);
		for(auto i = 0; i < n; ++ i){
			if(!ls[i]) ++ sum_s[s[i]];
			else ++ sum_l[s[i] + 1];
		}
		for(auto i = 0; i < sigma; ++ i){
			sum_s[i] += sum_l[i];
			if(i + 1 < sigma) sum_l[i + 1] += sum_s[i];
		}
		auto induce = [&](const vector<int> &lms){
			fill(sa.begin(), sa.end(), -1);
			vector<int> buf(sigma);
			copy(sum_s.begin(), sum_s.end(), buf.begin());
			for(auto d: lms){
				if(d == n) continue;
				sa[buf[s[d]] ++] = d;
			}
			copy(sum_l.begin(), sum_l.end(), buf.begin());
			sa[buf[s[n - 1]] ++] = n - 1;
			for(auto i = 0; i < n; ++ i){
				int v = sa[i];
				if(v >= 1 && !ls[v - 1]) sa[buf[s[v - 1]] ++] = v - 1;
			}
			copy(sum_l.begin(), sum_l.end(), buf.begin());
			for(auto i = n - 1; i >= 0; -- i){
				int v = sa[i];
				if(v >= 1 && ls[v - 1]) sa[-- buf[s[v - 1] + 1]] = v - 1;
			}
		};
		vector<int> lms_map(n + 1, -1);
		int m = 0;
		for(auto i = 1; i < n; ++ i) if(!ls[i - 1] && ls[i]) lms_map[i] = m ++;
		vector<int> lms;
		lms.reserve(m);
		for(auto i = 1; i < n; ++ i) if(!ls[i - 1] && ls[i]) lms.push_back(i);
		induce(lms);
		if(m){
			vector<int> sorted_lms;
			sorted_lms.reserve(m);
			for(auto v: sa) if(lms_map[v] != -1) sorted_lms.push_back(v);
			vector<int> rec_s(m);
			int rec_sigma = 0;
			rec_s[lms_map[sorted_lms[0]]] = 0;
			for(auto i = 1; i < m; ++ i){
				int l = sorted_lms[i - 1], r = sorted_lms[i];
				int end_l = (lms_map[l] + 1 < m) ? lms[lms_map[l] + 1] : n;
				int end_r = (lms_map[r] + 1 < m) ? lms[lms_map[r] + 1] : n;
				bool same = true;
				if(end_l - l != end_r - r) same = false;
				else{
					for(; l < end_l; ++ l, ++ r) if (s[l] != s[r]) break;
					if(l == n || s[l] != s[r]) same = false;
				}
				if(!same) ++ rec_sigma;
				rec_s[lms_map[sorted_lms[i]]] = rec_sigma;
			}
			auto rec_sa = sa_is<THRESHOLD_NAIVE, THRESHOLD_DOUBLING>(rec_s, rec_sigma + 1);
			for(auto i = 0; i < m; ++ i) sorted_lms[i] = lms[rec_sa[i]];
			induce(sorted_lms);
		}
		return sa;
	}
	int n;
	// data: sorted sequence of suffices including the empty suffix
	// pos[i]: position of the suffix i in the suffix array
	// lcp[i]: longest common prefix of data[i] and data[i + 1]
	vector<int> data, pos, lcp;
	// O(n + sigma)
	suffix_array(const vector<int> &s, int sigma): n((int)s.size()), pos(n + 1), lcp(n){
		assert(0 <= sigma);
		for(auto d: s) assert(0 <= d && d < sigma);
		data = sa_is(s, sigma);
		data.insert(data.begin(), n);
		for(auto i = 0; i <= n; ++ i) pos[data[i]] = i;
		for(auto i = 0, h = 0; i <= n; ++ i){
			if(h > 0) -- h;
			if(pos[i] == 0) continue;
			int j = data[pos[i] - 1];
			for(; j + h <= n && i + h <= n; ++ h) if((j + h == n) != (i + h == n) || j + h < n && s[j + h] != s[i + h]) break;
			lcp[pos[i] - 1] = h;
		}
	}
	// O(n * log(n)) time, O(n) space
	template<class T>
	suffix_array(const vector<T> &s): n((int)s.size()), pos(n + 1), lcp(n){
		vector<int> idx(n);
		iota(idx.begin(), idx.end(), 0);
		sort(idx.begin(), idx.end(), [&](int l, int r){ return s[l] < s[r]; });
		vector<int> s2(n);
		int now = 0;
		for(auto i = 0; i < n; ++ i){
			if(i && s[idx[i - 1]] != s[idx[i]]) ++ now;
			s2[idx[i]] = now;
		}
		data = sa_is(s2, now + 1);
		data.insert(data.begin(), n);
		for(auto i = 0; i <= n; ++ i) pos[data[i]] = i;
		for(auto i = 0, h = 0; i <= n; ++ i){
			if(h > 0) -- h;
			if(pos[i] == 0) continue;
			int j = data[pos[i] - 1];
			for(; j + h <= n && i + h <= n; ++ h) if((j + h == n) != (i + h == n) || j + h < n && s[j + h] != s[i + h]) break;
			lcp[pos[i] - 1] = h;
		}
	}
	// rmq must be built over lcp
	// O(1)
	template<class RangeMinQuery_t>
	int longest_common_prefix(int i, int j, const RangeMinQuery_t &rmq) const{
		assert(0 <= i && i <= n && 0 <= j && j <= n);
		return i == j ? n - i : rmq.query(min(pos[i], pos[j]), max(pos[i], pos[j]));
	}
	// rmq must be built over lcp
	// Compares s[p, p + len) and s[q, q + len)
	// O(1)
	template<class RangeMinQuery_t>
	bool compare(int p, int q, int len, const RangeMinQuery_t &rmq) const{
		assert(0 <= min({p, q, len}) && p + len <= n && q + len <= n);
		if(len == 0 || p == q) return false;
		int common_len = longest_common_prefix(p, q, rmq);
		if(common_len >= len) return false;
		return data[p] < data[q];
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>suffix_array</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
