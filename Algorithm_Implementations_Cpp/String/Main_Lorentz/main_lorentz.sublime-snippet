<snippet>
	<content><![CDATA[
// Returns O(n * log(n)) tuples {l, r, p} indicating that [i, i + p) equals [i + p, i + 2 * p) for all i in [l, r)
// O(n * log(n))
// Requires suffix_array
template<class Char_Type, class RMQ>
vector<array<int, 3>> main_lorentz(const vector<Char_Type> &s){
	int n = (int)s.size();
	suffix_array sa(s, true), rsa(vector<int>{s.rbegin(), s.rend()}, true);
	RMQ rmq(sa.lcp), rrmq(rsa.lcp);
	vector<array<int, 3>> res;
	for(auto p = 1; p << 1 <= n; ++ p){
		for(auto i = 0, last = -1; i + p <= n; i += p){
			int l = i - rsa.longest_common_prefix(n - i - p, n - i, rmq), r = i - p + sa.longest_common_prefix(i, i + p, rrmq);
			if(l > r || l == last) continue;
			res.push_back({last = l, r + 1, p});
		}
	}
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>main_lorentz</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
