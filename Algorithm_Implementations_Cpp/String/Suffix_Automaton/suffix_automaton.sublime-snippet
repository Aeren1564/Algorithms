<snippet>
	<content><![CDATA[
// Each node represents an endpos-equivalent class
// Each class consists of some consecutive suffixes of the longest substring in it
// The suffix corresponding to minlen - 1 can be obtained by following the suffix link and looking at the longest substring in it
// Adjacency_Type: array<int, X> or map<int, int> where X is the size of the alphabet
template<class Adjacency_Type>
struct suffix_automaton{
	// Begin States
	vector<int> max_len{0}; // Length of the longest string in the class.
	vector<int> link{-1};
	vector<int> firstpos{-1}; // Index of the first occurences of the strings in the class.
	vector<int> is_clone{false};
	vector<Adjacency_Type> next{{}};
	// End States
	int new_state(int l, int sl, int fp, bool c, const Adjacency_Type &adj){
		max_len.push_back(l);
		link.push_back(sl);
		firstpos.push_back(fp);
		is_clone.push_back(c);
		next.push_back(adj);
		return (int)max_len.size() - 1;
	}
	int last = 0;
	void extend(int c){
		int cur = new_state(max_len[last] + 1, -1, max_len[last], false, {}), p = last;
		while(~p && !next[p][c]) next[p][c] = cur, p = link[p];
		if(!~p) link[cur] = 0;
		else{
			int q = next[p][c];
			if(max_len[p] + 1 == max_len[q]) link[cur] = q;
			else{
				int clone = new_state(max_len[p] + 1, link[q], firstpos[q], true, next[q]);
				while(~p && next[p][c] == q) next[p][c] = clone, p = link[p];
				link[q] = link[cur] = clone;
			}
		}
		last = cur;
		count.clear();
		inv_link.clear();
	}
	void extend(char c){
		extend(tolower(c) - 'a');
	}
	void extend(const vector<int> &s){
		for(auto c: s) extend(c);
	}
	void extend(const string &s){
		for(auto c: s) extend(c);
	}
	int next_state(int u, int c){
		assert(0 <= u && u < (int)next.size());
		while(u && !next[u][c]) u = link[u];
		if(next[u][c]) u = next[u][c];
		return u;
	}
	int next_state(int u, char c){
		return next_state(u, tolower(c) - 'a');
	}
	pair<int, int> next_state(int u, int len, int c){
		assert(0 <= u && u < (int)next.size());
		while(u && !next[u][c]) u = link[u], len = max_len[u];
		if(next[u][c]) u = next[u][c], ++ len;
		return {u, len};
	}
	pair<int, int> next_state(int u, int len, char c){
		return next_state(u, len, tolower(c) - 'a');
	}
	int size() const{ // # of states
		return (int)max_len.size();
	}
	int min_len(int u) const{ // length of the shortest string in the endpos equivalent class
		return u ? max_len[link[u]] + 1 : 0;
	}
	vector<int> terminals() const{
		vector<int> t;
		for(auto u = last; ~u; u = link[u]) t.push_back(u);
		return t;
	}
	vector<int> count; // # of occurrences of substring represented by each states in the string. Calling extend invalidates the array.
	vector<vector<int>> inv_link;
	void precalc_count(){
		int sz = (int)size();
		count.assign(sz, 0), inv_link.assign(sz, {});
		for(auto u = 1; u < sz; ++ u) inv_link[link[u]].push_back(u);
		auto dfs = [&](auto self, int u)->void{
			count[u] = !is_clone[u];
			for(auto v: inv_link[u]){
				self(self, v);
				count[u] += count[v];
			}
		};
		dfs(dfs, 0);
	}
	vector<int> find_all_occurrences(int u){
		assert(!count.empty() && u < size());
		vector<int> res;
		auto dfs = [&](auto self, int u)->void{
			if(!is_clone[u]) res.push_back(firstpos[u]);
			for(auto v: inv_link[u]) self(self, v);
		};
		dfs(dfs, u);
		return res;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>suffix_automaton</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
